[{"categories":["coding-problems"],"content":"Given an array, return an array where each element is the product of the all elements except the current one.","date":"Jul 3 2022","objectID":"/dcp-2/","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. ","date":"Jul 3 2022","objectID":"/dcp-2/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":"The Question Given an array of integers, return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. Follow-up: What if the division operation is not allowed? ","date":"Jul 3 2022","objectID":"/dcp-2/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":"Examples [1, 2, 3, 4, 5] Result: [120, 60, 40, 30, 24] [3, 2, 1] Result: [2, 3, 6] What’s interesting about this question is if there are 0s in the array: [1, 2, 3, 0] Result: [0, 0, 0, 6] [1, 2, 0, 3, 4, 0, 5] Result: [0, 0, 0, 0, 0, 0, 0] ","date":"Jul 3 2022","objectID":"/dcp-2/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":"Solutions ","date":"Jul 3 2022","objectID":"/dcp-2/:3:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":"Division of Overall Product The most intuitive solution is to first calculate the overall product of the array, P and then for each element in the given array, divide P by it to get the corresponding number in the result array. Dividing P by every element can be a problem if one of the elements is 0, since we’ll get a runtime error for dividing by 0. However, if there is indeed a 0 in the array, then P will also be 0. So we realize that we need to handle zeroes carefully in this solution. Trying out some test cases (see Examples above), we realize that there are three cases when it comes to 0s in the array: No zeroes: We can follow our simple solution above One zero, at index z: All positions in the result array except z will be 0, while z will hold the product of all numbers in the given array without the 0 More than one zeroes: All positions in the result array will hold 0. Hence, we need to keep track of the number of zeroes and construct the result accordingly. We can simply keep a running count of zeroes and firstZeroIndex for this, and calculate P accordingly. P = 1 zcount = 0 firstZeroIndex = -1 for i=0 to n-1: if a[i] == 0: if zcount == 0: firstZeroIndex = i zcount++ else: P = P * a[i] if zcount \u003e 1: break if zcount \u003e 1: result = [0, 0, ..., 0] of size n else if zcount == 1: result = [0, 0, ..., 0] of size n result[firstZeroIndex] = P else: result = [] for i=0 to n-1: result[i] = P / a[i] return result return result The time complexity of this solution is O(n) with two passes required, and auxilliary space complexity is O(1). Take care of overflow! Care must be taken that the variable P does not overflow. Use a larger integer type, or use modular arithmetic if allowable. ","date":"Jul 3 2022","objectID":"/dcp-2/:3:1","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":"Product Prefix and Suffix To address the follow-up of disallowing use of the division operation, we can calculate prefix and suffix product arrays and use the two to construct the final result array. These arrays hold the product of the prefix / suffix of the array without including the current element. Prefix array: pref[i] = a[0] * ... a[i-1], pref[0] = 1 Suffix array: suff[i] = a[i+1] * ... a[n-1], suff[n-1] = 1 To then construct the final result array, we simply multiply these two arrays elementwise. That is, result[i] = pref[i] * suff[i]. This works because pref[i] and suff[i] together hold the product of every element in the prefix and the suffix respectively, accounting for the whole array except a[i], which is the required result. A nice thing about this solution is that we do not need to handle 0s separately. However it does take three passes. We can skip two passes in case of zeroes, but even without that, the solution is correct. pref = [] pref[0] = 1 for i=1 to n-1: pref[i] = pref[i-1] * a[i-1] suff = [] suff[n-1] = 1 for i=n-2 to 0: suff[i] = suff[i+1] * a[i+1] result = [] for i=0 to n-1: result[i] = pref[i] * suff[i] return result The time complexity of this solution is O(n) and it takes three passes, while the auxilliary space complexity is O(n) for the prefix and suffix product arrays. ","date":"Jul 3 2022","objectID":"/dcp-2/:3:2","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["projects","productivity","experience"],"content":"Software Development with collaboration is hard, here are some of my learnings","date":"Jan 14 2022","objectID":"/project-pandemonium/","tags":["projects","productivity","experience","thoughts"],"title":"Project Pandemonium","uri":"/project-pandemonium/"},{"categories":["projects","productivity","experience"],"content":" This blog was originally published by me as part of a blog series by Google Student Developer Clubs, VJTI. A few days ago, during a lazy afternoon, while rummaging through my muddle of a cupboard, I found a notebook that had, unsurprisingly, my name scrawled on it. I opened the book somewhere in the middle, but those pages were blank. Then, opening the first page, I smiled, sheepish and nostalgic. Written on the first twenty or so pages of this notebook, was the account of one of my first projects as an engineering student. I immediately took a trip down memory lane. I perused those logs, consisting of long paragraphs of technical details, diagrams and outlines of activities carried out each day. But what stood out were the number of questions and exclamations. Occasionally, a few lines lamented on the roadblocks and failures that were faced, the uncertainty of whether things will work out and whether we were getting anywhere with the project. ","date":"Jan 14 2022","objectID":"/project-pandemonium/:0:0","tags":["projects","productivity","experience","thoughts"],"title":"Project Pandemonium","uri":"/project-pandemonium/"},{"categories":["projects","productivity","experience"],"content":"About the project Along with three friends, I was part of a project that aimed to develop a WiFi Positioning System, or more specifically, an Indoor Positioning System. Fundamentally, this system would determine the location of a device using wireless access points that are in its vicinity. This project was under Eklavya, a mentorship program of the Society of Robotics and Automation, VJTI. I would have loved to tell you that despite the misgivings in my memoirs, we managed to accomplish our goals. We didn’t. And that’s what this blog is about. A project can be very chaotic. A number of things can go wrong, and every action to correct those mistakes can cascade into a wave of defects. In the end (if there is one), you are left with a good solution, a bad solution, a good solution that is not required, or several other variants. I’m no software engineering expert or a project management expert. I’m a final year undergraduate and I want to share some things I’ve learned after doing some projects in the last four years. In no way are these things guaranteed to be relevant or useful or even correct. But they’re food for thought! But what’s the problem? Define the problem. We hear this all the time but seldom do we really put it into effect, or at least with the required level of sincerity, specificity and clarity. *\"I want to make a chatting application\"* might seem self-explanatory as the definition of the required solution, but it's not. The necessity for a clear understanding of the requirements, the scope and priorities, and the assumptions of a solution cannot be emphasized enough. Indeed, this is one of the major reasons why my WiFi Positioning System project was, in subtle terms, a letdown. I vividly remember *not* being sure about what we were making. To quote the very first line in my logs: “After days of ambiguity, our group was able to decide firmly about the project idea - Localization using Triangulation.\" Except of course, the ambiguity wasn’t gone, and to the keen reader, it must be apparent that the topic mentioned in this excerpt is not what we ended up doing. Is that what we had decided? It’s important to get most requirements or goals clear and sorted out in the beginning. I say “most” because getting the requirements perfect the first time is extremely difficult, if at all possible. If there are stakeholders of the project, it will indubitably prove difficult to solicit and analyze specific and clear requirements from them at the very beginning of the project - one of the biggest drawbacks of the Waterfall model of software development. Invariably, some form of an iterative process involving prototyping and feedback is part of the trade. But the sooner these requirements get clear, the sooner a project will reach completion, and lesser time will be spent pursuing features or improvements that are not required. It’s common knowledge that brainstorming in a group can help a lot with this part, because more aspects of the problem and solution will be explored, uncovering more and more questions that will hopefully be answered later on. What’s not common knowledge is that all these (likely diverging) lines of thought should be combined to a single, coherent one early enough, otherwise the benefits of collaboration may turn futile. Yes, we can! Can we though? Another important aspect of planning is feasibility. Gauging the feasibility of a solution is, admittedly, difficult. It requires experience, which I definitely didn’t have then, and no one can have enough. However, research can help here. If it’s a research project or maybe a data science project, a literature review is helpful, and in most cases, expected. Published work like papers, blogs, source code repositories can help one understand the work that others pursuing similar goals have done, as well as an understanding of the technical difficulty, skills and resources required, and therefore, the feasibility of the project. Did we do a literature review for ","date":"Jan 14 2022","objectID":"/project-pandemonium/:1:0","tags":["projects","productivity","experience","thoughts"],"title":"Project Pandemonium","uri":"/project-pandemonium/"},{"categories":["reading"],"content":"A list of articles, courses, books, videos  and any other things that I found personally interesting","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"Here’s a list of articles, courses, books, videos, and any other things that I found personally interesting and went through them: ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:0","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"Productivity Methods I stumbled across the following posts by Devi Parikh while going through this repo: Calendar. Not to-do lists: This post discusses some principles for time management. it makes the argument for using calendar to manage your time and tasks, not to-do lists. According to Parikh, to-do lists are too disorganized (especially in the time dimension, which is what we’re trying to optimize). She then goes on to explain her method of using calendars, which involves making everything you do - not just work, but things like eating, sleeping, doing nothing - an entry on your calendar. She then discusses other principles - I found the calibration multiplier fascinating! Checking Email → inbox Zero: This is something I’d heard about before, in the form of other terms like Touching every email once. This post outlines the motivation for being strict with your inbox, and dissuades procrastinating emails. Do what you need to do with that email whenever you open it, don’t put it off for a later time. ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:1","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"The Confessions of Marcus Hutchins, the Hacker Who Saved the Internet I love this article. It is a very well written story of Marcus Hutchins, the hacker who was responsible for stopping the WannaCry ransomware attack in 2017. Apart from the cool hacker element, this article also remarkably addresses the real-world implications of cybersecurity, and the serious repercussions it can have on people and property. It delves into the grey world of Cybersecurity, and it made me think that there really isn’t a stark line between cybercriminals and cybersecurity experts. They’re really the same kind of people who study the same things, but are on different teams, with different intentions. This 70-90 minutes read is worth every second. ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:2","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"Dropout: A Simple Way to Prevent Neural Networks from Overfitting This is the original paper on Dropout, a technique that is commonly used while training deep neural networks today. I knew the concept of dropout, but the way that the authors present it instilled a new way of thinking about dropout and how it curbs prevents overfitting, with the intuition tending more towards gradient-boosted machines and genetic algorithms than the simple principle of “disallowing the network to get dependent on certain pathways”. ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:3","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"The YOLO papers Many are aware that the creator of YOLO has written quite humorous papers for it. YOLO (You Only Look Once) transformed the field of object detection when it was published in 2016. It was much faster, used less computation and was at par with the state of the art. Apart from the surprise of how simple the model is, the papers really entertain their readers with subtle humour placed here and there. More versions of YOLO have been released since, but the initial versions were written by the same author: Joseph Chet Redmon, and these papers are fun. You Only Look Once: Unified, Real-Time Object Detection YOLO9000: Better, Faster, Stronger # YOLOv3: An Incremental Improvement I never thought that research papers could be written like these. Brilliant! ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:4","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"How to plan and execute your ML and DL projects This blog on FloydHub by Sayak Paul outlines good practices and tooling for machine learning projects, with a focus on reproducibility, versioning and low technical debt. ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:5","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["blockchain","ethereum"],"content":"Implementing the ERC20 standard to make a simple fungible token on Ethereum","date":"Oct 13 2021","objectID":"/erc20/","tags":["ethereum","blockchain","solidity"],"title":"Making a Simple ERC20 Token","uri":"/erc20/"},{"categories":["blockchain","ethereum"],"content":"In this blog post, I’ll walk through creating a simple ERC20 token on Ethereum. This was one of my lab assignments this semester, and I thought I better make a blog post about this, because I want to write consistently over here why not? A token in general is basically simply a digital representation of potentially anything. For example, a token can represent: reputation points in an online platform skills of a character in a game lottery tickets financial assets like a share in a company a fiat currency like USD an ounce of gold A token can also represent access rights to a blockchain or blockchain app, and tokens can also be used to automate \"friction points\" in various industries. Utility tokens, are tokens that have a specific \"use\" on the blockchain or an app based on that. Utility tokens are also called \"app coins\" because they are explicitly designed for a certain app or blockchain. ERC20 Standard The ERC-20 (Ethereum Request for Comments 20), proposed by Fabian Vogelsteller in November 2015, is a Token Standard that implements an API for tokens within Smart Contracts. The motivation for this EIP was to make \"a standard interface allows any tokens on Ethereum to be re-used by other applications: from wallets to decentralized exchanges.\" It provides functionalities like transfering tokens from one account to another, to get the current token balance of an account and also the total supply of the token available on the network. Besides these it can allow an owner of some tokens to approve spending those tokens by a third party account. ","date":"Oct 13 2021","objectID":"/erc20/:0:0","tags":["ethereum","blockchain","solidity"],"title":"Making a Simple ERC20 Token","uri":"/erc20/"},{"categories":["blockchain","ethereum"],"content":"Methods and Events Defined in ERC20 function name() public view returns (string) function symbol() public view returns (string) function decimals() public view returns (uint8) function totalSupply() public view returns (uint256) function balanceOf(address _owner) public view returns (uint256 balance) function transfer(address _to, uint256 _value) public returns (bool success) function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) function approve(address _spender, uint256 _value) public returns (bool success) function allowance(address _owner, address _spender) public view returns (uint256 remaining) The name, symbol, decimals are state constants that identify the ERC20 token and the number of decimal places used for user representation. The totalSupply function returns the total supply of the ERC20 token. The balanceOf function returns the balance of the address passed as a argument. The transfer function transfers specified number of tokens from the sender to the specified receiver, provided the sender has sufficient balance. The approve function is used by the owner of some tokens (specified by the _from argument) to approve a delegate account to withdraw and spend some allowed number of tokens. The allowance function returns the current approved number of tokens by an owner to a specific delegate, as set in the approve function. The transferFrom function allows a delegate approved for withdrawal to transfer owner funds, provided the funds specified are less than or equal to the allowance of the delegate, and less than or equal to the owner’s balance. For our implementation of the ERC20 token, we add some features apart from the standard: The burn function allows the sender to burn some specified number of tokens, provided they have sufficient balance. Successful burning of tokens emits a Transfer event to address 0x000...000. The burnFrom function allows a delegate to burn some specified number of tokens from an account they have sufficient allowance from. Successful burning of tokens emits a Transfer event to address 0x000...000. The isMinter function allows anyone to check if the specified address has minting privileges (or has the minter role). The addMinter function allows the creator of the token to add an address as a minter. Successful addition emits a MinterAdded event. The removeMinter function allows the creator of the token to remove an address from the minter role. Successful removal emits a MinterRemoved event. The renounce function allows a minter to renounce their minting privileges. Successful renunciation emits a MinterRemoved event. The mint function allows a minter to mint an arbitrary amount of tokens and take ownership of those tokens. Successful minting emits a Transfer event with 0x000...000 as the from address. The _isMinter mapping maintains a mapping to identify whether an address has minting privileges or not. Implementation We make this contract in Solidity, and a simple way to start writing Ethereum contracts in Solidity is to use the Remix IDE It’s browser-based, no setup required. ","date":"Oct 13 2021","objectID":"/erc20/:1:0","tags":["ethereum","blockchain","solidity"],"title":"Making a Simple ERC20 Token","uri":"/erc20/"},{"categories":["blockchain","ethereum"],"content":"Token Contract pragma solidity \u003e=0.7.0 \u003c0.9.0; import {SafeMath} from \"../lib/SafeMath.sol\"; contract AkshatToken { string public constant name = \"Akshat's Token\"; string public constant symbol = \"AKT\"; uint8 public constant decimals = 18; address public creator; uint256 _totalSupply; mapping(address =\u003e uint256) _balances; mapping(address =\u003e mapping(address =\u003e uint256)) _allowed; mapping(address =\u003e bool) _isMinter; event Transfer(address indexed from, address indexed to, uint256 indexed tokens); event Approval(address indexed owner, address indexed delegate, uint256 indexed tokens); event MinterAdded(address indexed minter, address indexed addedBy); event MinterRemoved(address indexed minter, address indexed removedBy); using SafeMath for uint256; modifier onlyCreator { require( msg.sender == creator, \"Only creator can call this function\" ); _; } modifier onlyMiner { require( msg.sender == creator || _isMinter[msg.sender], \"Only a minter or the creator can call this function\" ); _; } constructor(uint256 total) { _totalSupply = total; _balances[msg.sender] = total; creator = msg.sender; } function totalSupply() public view returns (uint256) { return _totalSupply; } function balanceOf(address owner) public view returns (uint256) { return _balances[owner]; } function allowance(address owner, address delegate) public view returns (uint256) { return _allowed[owner][delegate]; } function transfer(address to, uint256 tokens) public returns (bool) { require(tokens \u003c= _balances[msg.sender], \"Insufficient tokens\"); _balances[msg.sender] = _balances[msg.sender].sub(tokens); _balances[to] = _balances[to].add(tokens); emit Transfer(msg.sender, to, tokens); return true; } function approve(address delegate, uint256 tokens) public returns (bool) { _allowed[msg.sender][delegate] = tokens; emit Approval(msg.sender, delegate, tokens); return true; } function transferFrom(address from, address to, uint256 tokens) public returns (bool) { require(tokens \u003c= _allowed[from][msg.sender], \"Insufficient tokens approved for delegation\"); require(tokens \u003c= _balances[from], \"Insufficient tokens\"); _balances[from] = _balances[from].sub(tokens); _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokens); _balances[to] = _balances[to].add(tokens); emit Transfer(from, to, tokens); return true; } function burn(uint256 tokens) public returns (bool) { require(tokens \u003c= _balances[msg.sender], \"Insufficient tokens\"); _balances[msg.sender] = _balances[msg.sender].sub(tokens); _totalSupply = _totalSupply.sub(tokens); emit Transfer(msg.sender, address(0), tokens); return true; } function burnFrom(address from, uint256 tokens) public returns (bool) { require(tokens \u003c= _allowed[from][msg.sender], \"Insufficient tokens approved for delegation\"); require(tokens \u003c= _balances[from], \"Insufficient tokens\"); _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokens); _balances[from] = _balances[from].sub(tokens); _totalSupply = _totalSupply.sub(tokens); emit Transfer(from, address(0), tokens); return true; } function isMinter(address _address) public view returns (bool) { return _isMinter[_address]; } function addMinter(address _address) public onlyCreator returns (bool) { require(_isMinter[_address] == false, \"Already a minter\"); _isMinter[_address] = true; emit MinterAdded(_address, msg.sender); return true; } function removeMinter(address _address) public onlyCreator returns (bool) { require(_isMinter[_address] == true, \"Already not a minter\"); _isMinter[_address] = false; emit MinterRemoved(_address, msg.sender); return true; } function renounceMinter() public onlyMiner returns (bool) { _isMinter[msg.sender] = false; emit MinterRemoved(msg.sender, msg.sender); return true; } function mint(uint256 tokens) public onlyMiner returns (bool) { _balances[msg.sender] = _balances[msg.sender].add(tokens); _totalSupply = _totalSupply.add(tokens); emit Transfer(address(0), msg.sender, tokens); return true; } } ","date":"Oct 13 2021","objectID":"/erc20/:2:0","tags":["ethereum","blockchain","solidity"],"title":"Making a Simple ERC20 Token","uri":"/erc20/"},{"categories":["blockchain","ethereum"],"content":"Token Vendor Contract To allow buying and selling tokens (for ether), we create a Vendor contract, that allows buyers and sellers of the tokens to call functions for the same. The payable buyTokens function allows the sender to send some ether in exchange for tokens. The sellTokens function allows the sender to sell the tokens for ether. Successful sale of tokens will require that the sender has delegated a minimum of that amount of tokens to the contract account using the approve function defined in the token contract, so that the Vendor contract can transfer the specified number of tokens on the sender’s behalf. pragma solidity \u003e=0.7.0 \u003c0.9.0; import {AkshatToken} from \"./AkshatToken.sol\"; import {SafeMath} from \"../lib/SafeMath.sol\"; contract AkshatTokenVendor { AkshatToken token; uint256 public tokensPerEth = 100; event BuyTokens(address buyer, uint256 eth, uint256 tokens); event SellTokens(address seller, uint256 eth, uint256 tokens); using SafeMath for uint256; constructor (address tokenAddress) { token = AkshatToken(tokenAddress); } receive() external payable {} function buyTokens() public payable returns (uint256) { require(msg.value \u003e 0, \"Insufficient ether sent\"); uint256 eth = msg.value / (1 ether); uint256 tokens = eth.mul(tokensPerEth); require(token.balanceOf(address(this)) \u003e= tokens, \"Vendor contract has insufficient tokens\"); bool sent = token.transfer(msg.sender, tokens); require(sent, \"Failure in transferring tokens\"); emit BuyTokens(msg.sender, msg.value, tokens); return tokens; } // requires delegation approval function sellTokens(uint256 tokens) public returns (bool) { require(tokens \u003e 0, \"Need to sell non-zero tokens\"); require(token.balanceOf(msg.sender) \u003e= tokens, \"Insufficient tokens\"); uint256 eth = tokens.div(tokensPerEth) * (1 ether); require(address(this).balance \u003e= eth, \"Vendor contract has insufficient ether\"); bool sent = token.transferFrom(msg.sender, address(this), tokens); require(sent, \"Failure in transferring tokens, check approval\"); (sent, ) = msg.sender.call{value: eth}(\"\"); require(sent, \"Failure in transferring ether\"); return true; } } We define arithmetic operations explicitly to secure our ERC20 Token from integer overflow attacks. We check for integer overflows while performing these operations. This logic is implemented in a separate library called SafeMath. pragma solidity \u003e=0.7.0 \u003c0.9.0; library SafeMath { function sub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b \u003c= a); return a - b; } function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c \u003e= a); return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { require(b \u003e 0); uint256 c = a / b; // assert(a == b * c + a % b); // There is no case in which this doesn't hold return c; } } Execution The following steps show how the contracts can be deployed, following a demonstration of the different functionalities coded in the contracts. We run a local Geth client running a private blockchain, and use the Remix IDE to call the contracts. First, we initialize a local test ethereum network using the genesis block given below, and start the node, allowing RPC CORS from Remix. Attach a console to the running geth client via IPC. Create three accounts, and start mining with one so that we can deploy a contract using that account. { \"config\": { \"chainId\": 2021, \"homesteadBlock\": 0, \"eip150Block\": 0, \"eip150Hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"eip155Block\": 0, \"eip158Block\": 0, \"byzantiumBlock\": 0, \"constantinopleBlock\": 0, \"petersburgBlock\": 0, \"istanbulBlock\": 0 }, \"nonce\": \"0x0000000000000042\", \"timestamp\": \"0x00\", \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"extraData\": \"0x00\", \"gasLimit\": \"0x4c4b4","date":"Oct 13 2021","objectID":"/erc20/:3:0","tags":["ethereum","blockchain","solidity"],"title":"Making a Simple ERC20 Token","uri":"/erc20/"},{"categories":["reading"],"content":"A list of articles, courses, books, videos  and any other things that I found personally interesting","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Here’s a list of articles, courses, books, videos, and any other things that I found personally interesting and went through them: ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:0","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Articles on Finance on Tickertape.in Call it a temporary whim, but I’ve been looking into Finance and Economics stuff (pardon me, I’ve never given it much attention before). Tickertape has a series of educational articles, directed towards concepts in economics and finance, and aims to provide a foundation for getting started in equity market investing. This series has four modules, and I’ve read the first one, Elementary Economics, which consists of the following articles: Intro to Macroeconomics Interest Rates \u0026 Forex Circular Flow Monetary Policy Deficits \u0026 Balance of Payments Fiscal Policy Now this is most likely very fundamental for most people, but frankly, it’s quite new for me, and I’m finding it really interesting so far! ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:1","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"MLOps Articles by Tezan Sahu I’ve been exploring Machine Learning and DevOps separately for the past few months, and I’ve heard about the buzz around MLOps, a field which brings the practice of Machine Learning into real-world production systems and processes. This series of articles seems very promising in teaching the principles of MLOps, by first explaining what the DevOps culture and principles are, relating them to MLOps, and also outlining what’s different. It then explains the ML workflow, and the principles that MLOps in particular advocates. A Gentle Introduction to MLOps ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:2","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Authentication system using Ethereum This article is a part of a trilogy of articles that introduce Ethereum and Smart Contracts, written by Sebastian Peyrott. Besides being a great introduction to Ethereum and Blockchain in general, it also has small projects that demonstrate the prospects of Blockchain, which includes an authentication system uses Ethereum to verify an individual’s identity. I came across this series thanks to a college assignment. However, the series is from 2017, so some of the code is deprecated. An Introduction to Ethereum and Smart Contracts: an Authentication Solution It’s also available as a PDF. ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:3","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Natural Language Processing As part of my Final Year project, I am currently studying NLP, and I went through these articles/courses, and found them worth sharing: The Illustrated Transformer by Jay Alammar: This article explains the Transformer model for sequence-to-sequence tasks NLP For You, a course by Lena Voita: A text-based course on the fundamental concepts on NLP, including Word Embeddings, Text Classification, Language Modeling, Seq2seq, Attention, Transformer and Transfer Learning - this is a treasure! CS224N: Natural Language Processing with Deep Learning is a MOOC with lectures available on YouTube Thanks to my friends Arnav Shah and Saharsh Jain for suggesting these resources! ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:4","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"A Project of One’s Own Probably a classic now, I came across this article by Paul Graham. Go ahead and read it for yourself! ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:5","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"How to Remember What You Read This great article by Farnam Street is something that I was thinking about for a long time before I actually googled this question and came across this article. ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:6","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["tools"],"content":"A guide to install TeX on Linux","date":"Sep 28 2021","objectID":"/tex-install-linux/","tags":["latex","linux"],"title":"A Guide to Install TeX on Linux","uri":"/tex-install-linux/"},{"categories":["tools"],"content":"The Story Recently, I wanted to install a TeX system on my Ubuntu 20.04 PC. I tried installing MiKTeX after someone recommended it to me (thrice…), but I found myself unable to update TeX packages because of a cryptic SSL peer certificate error. I reported this in an issue to the MiKTeX repo, but was instead told that my system did not support MiKTeX. Great. Next, I tried to install TeX Live. It seemed simple enough, with a sudo apt install texlive. Can’t get any easier than this, right? So it turns out that the apt package for TeX Live is still the 2019 version. Now unfortunately, this meant that I again could not update packages, since tlmgr, TeX Live’s package manager could not verify the signature for a repository. I tried following this post on TeX Stack Exchange, but this didn’t work out. So I decided to ditch APT, and tried following the TeX Live Quick Install docs (which is probably I should have done first). But even in this method, the default mirror which was chosen was too slow, and for some reason, the default, recommended scheme to install TeX Live (called full scheme) installs around 5GB of TeX software - fonts, packages, et cetera. For someone beginning with TeX, this did not sit well with me. Enough with this rant, let me list down the steps that I followed to install TeX Live on my system. Note that there are most likely better methods/choices that one could use, but these steps worked for me. What is TeX? Simply said, TeX is a popular typesetting system, especially in academia, that enables one to write documents that involve a lot of formatting, mathematical equations, tables et cetera. It was made by ACM Turing Awardee Donald Knuth (who is a legend, by the way). TeX Live Installation TeX Live is a software distribution for TeX, and includes some programs, macros, packages and fonts. It has a package manager specifically for TeX packages, called tlmgr, that is used to install and update TeX packages. Download install-tl (the latest one, yay!) using this link. In case this gets changed, you can find the link in the docs (Do read the docs once before installing). Extract the contents from the .tar.gz file. Here’s how the contents look: Contents of the install-tl directoryContents of the install-tl directory \" Contents of the install-tl directory Run the install-tl Perl script as root. Note that the script does not require root permissions, but requires write access to the directory where it’s going to install, which by default is /usr/local. You can change the directory by looking at the prompts of the script. Note that you can run the installer in GUI mode by the -gui flag (which I would recommend if you’re doing this for the first time, but it requires Tcl to be installed). The --repository option specifies an explicit mirror to use. Try specifying some other mirrors if the default mirror seems too slow. In my case, the mirror provided by NUS (and I stay in Mumbai) was much better than the default one. sudo perl install-tl [-gui] [--repository \u003cURL\u003e] In case you get some error related to 'tlpdb' I came across the following error when I tried using an explicit mirror: install-tl: TLPDB::from_file could not initialize from: https://mirrors.dotsrc.org/ctan/tlpkg/texlive.tlpdb install-tl: Maybe the repository setting should be changed. install-tl: More info: https://tug.org/texlive/acquire.html Try appending systems/texlive/tlnet to the mirror URL when running the install-tl script. For example, sudo perl install-tl --repository https://download.nus.edu.sg/mirror/ctan/systems/texlive/tlnet After a few seconds, something similar to the following will be visible: install-tl script optionsinstall-tl script options \" install-tl script options If you scroll up, you can see the scheme selected by default for installation: \u003cS\u003e set installation scheme: scheme-full. Below that, you can see the number of collections and the space they’ll take: \u003cC\u003e set installation collections: 40 collections out of 41, disk space require","date":"Sep 28 2021","objectID":"/tex-install-linux/:0:0","tags":["latex","linux"],"title":"A Guide to Install TeX on Linux","uri":"/tex-install-linux/"},{"categories":null,"content":"Akshat Shah I’m an undergraduate Information Technology Engineering student at VJTI, Mumbai, currently in the final year. With a keen interest in programming and software, I am looking forward to improve my skills and work on projects and problems in the field of Web Development, Android Development and Machine Learning. Besides these, you’ll find me active on competitive programming websites. You can see some of my projects here. In my free time, I like to read and write. I’m always in for a good, meaningful movie or TV show, and I like to try my luck at carrom! You can view my resume by clicking here. Experience ","date":"Aug 28 2021","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Wells Fargo Intern, April - July 2021 Constructed a microservice architecture involving Node (Express), Python (Flask), Elasticsearch with a team Built a client interface using ReactJS Worked on functionality requiring NLP ","date":"Aug 28 2021","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"CoE - CNDS Intern, April - May 2021 Worked on the front end of a Capture The Flag website using ReactJS ","date":"Aug 28 2021","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Community of Coders, VJTI Member, 2019 - Present Website Contributor Magazine Contributor and Curator Workshop Instructor for Web Workshop 2020 and CLI Workshop 2020 Project Mentor as part of Inheritance, CoC’s Summer Project program for First Year students ","date":"Aug 28 2021","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Society of Robotics and Automation, VJTI Member, 2018-2020 Workshop Instructor for the Wall-E Workshop 2019 Education ","date":"Aug 28 2021","objectID":"/about/:4:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Veermata Jijabai Technological Institute August 2018 - Present, Mumbai Bachelor of Technology (BTech) in Information Technology CGPA: 9.27 ","date":"Aug 28 2021","objectID":"/about/:5:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Kishinchand Chellaram College July 2016 - May 2018, Mumbai Higher Secondary Education (HSC) in Science with Bifocal Computer Science Score: 95.69% aggregate Stood at the first rank across all streams in the college ","date":"Aug 28 2021","objectID":"/about/:6:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Bright Start Fellowship International School April 2006 - May 2016, Mumbai International General Certificate of Secondary Education (IGCSE) Grades: 7 A*, 1 A Stood at the first rank in school Skills and Tech My academic courses include the core subjects of Computer Science, like Data Structures and Algorithms, Operating Systems, Database Management Systems and Computer Networks. Along with these, notable courses include System Administration, Machine Learning, Blockchain Technology, Software Engineering and Object Oriented Analysis and Design. I’m proficient in C++, JavaScript and Python, and familiar with Java. Having done many projects in Web Development, I’m fluent in languages and web frameworks, including HTML, CSS, JavaScript, NodeJS, ReactJS, TailwindCSS, Flask and Express JS. I have worked with SQL databases like PostgreSQL, as well as with NoSQL databases like MongoDB, Firebase Realtime Database and Neo4J. Apart from Web Development, I have done a few native Android Development projects using Java and Kotlin, and have had a stint of dabbling in Robotics in my First Year. In the past year I have studied Machine Learning and practiced on problems using Scikit-learn, and currently I’m studying Deep Learning and Natural Language Processing. ","date":"Aug 28 2021","objectID":"/about/:7:0","tags":null,"title":"About","uri":"/about/"},{"categories":["coding-problems"],"content":"Given an array of integers, find the first missing positive integer in linear time and constant space.","date":"Mar 1 2021","objectID":"/dcp-4/","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. ","date":"Mar 1 2021","objectID":"/dcp-4/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"The Question Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well. You can solve this question on LeetCode. ","date":"Mar 1 2021","objectID":"/dcp-4/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Solutions ","date":"Mar 1 2021","objectID":"/dcp-4/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Use a “map” to mark presence A simple way (albeit requiring linear auxilliary space) is to traverse through the given array, and mark all the positive number present in the array as present using a simple boolean array of size equal to the maximum number present in the array. Then we iterate through the present array and report the first missing number. If there is no missing number, then the first missing positive integer is the maximum element + 1. The following pseudocode assumes 1-based indexing. present = boolean array of size max_element(a) for i in a: if i \u003e 0 then present[i] = true for i from 1 to max_element(a) if !present[i] then return i return max_element(a) + 1 This is a linear time solution, and has space complexity linear in terms of the maximum element present. And that presents a problem: what if the numbers are too large? ","date":"Mar 1 2021","objectID":"/dcp-4/:2:1","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Put elements where they belong The question mentions that we can modify the array in place! And since we have to find the first missing positive integer, we can simply follow the same principle of “marking presence” but use the given array itself, instead of the auxilliary array. To see why this would work, say the first missing positive integer is x. To find x, we need all elements from 1 to x-1 to be placed in their correct positions. For any “large” numbers (that is, numbers greater than the size of the array), we can simply ignore them, because x_ has to be in the range [1, n+1]. Think about it. So when we encounter some element of the array that is positive and less than or equal to n, we put it at its correct place, that’s the position indexed by the element. So we place 1 at 1, 2 at 2, and so on. If an element y is already at position y, then we simply move forward, else we try to move it to position y. But this would mean replacing other elements. Note that if the elements getting replaced are negative, zero or more than n, then we don’t need to worry about them. However, if the element that will be replaced is a valid number, then we can swap the two elements instead of replacing them, and not moving forward for this case, since we need to process the swapped element too. For handling duplicates, we change y to 0 (or any other invalid number) if there’s already a y at position y, so that it can be potentially replaced by another number that should be at the current position. The conditions are a little tricky, so make note of them. For finding the first missing positive integer, we simply iterate through the array again and check for the first position that doesn’t match the value at that position. for i from 1 to n if a[i] \u003c= 0 or a[i] \u003e n or a[i] == i then continue else if a[a[i]] \u003c= 0 or a[a[i]] \u003e n then a[a[i]] = a[i] else if a[a[i]] == a[i] then a[i] = 0 else swap(a[i], a[a[i]]) i = i - 1 for i from 1 to n if a[i] != i then return i return n+1 You can find the C++ implementation here ","date":"Mar 1 2021","objectID":"/dcp-4/:2:2","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Design an algorithm to serialize and deserialize a binary tree.","date":"Mar 1 2021","objectID":"/dcp-3/","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. ","date":"Mar 1 2021","objectID":"/dcp-3/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"The Question Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. You can solve this question on LeetCode ","date":"Mar 1 2021","objectID":"/dcp-3/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"Solutions ","date":"Mar 1 2021","objectID":"/dcp-3/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"Recursion! We can use preorder traversal of a tree to encode it as a string. We start with the root, encode it, and then move on to the left subtree and serialize it, then move on to the right tree and serialize it. The base case will be when we call the recursive function for a child of a leaf node, we can encode it as “null”. fun serialize(root) if root is null then return \"null\" return str(root-\u003eval) + \",\" + serialize(root-\u003eleft) + \",\" + serialize(root-\u003eright) For deserializing a string of the type formed by serialize, we can again make use of the preorder traversal, since we know that is the order in which the serialized string was built. First, we can split the string by its delimiter (a comma, in this case) to get a list of nodes (including null nodes) and then traverse the list, while we build the tree in preorder traversal. We do this by keeping the pointer of the list common across all recursive calls, and each recursive call builds a subtree, in preorder. Whenever we hit a null element in the list, we simply return null. fun deserialize(tree) nodes = tree.split(\",\") i = 0 root = buildTree(nodes, i) return root fun buildTree(nodes, i) if nodes[i] == \"null\" then return null else root = Node(int(root)) i = i + 1 root.left = buildTree(nodes, i) i = i + 1 root.right = buildTree(nodes, i) return root You can find the Python implementation here. This can be implemented in C++ easily too, but right now I’m a little lazy to write out the split function :-). ","date":"Mar 1 2021","objectID":"/dcp-3/:2:1","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"Given a list of numbers and a number `k`, return whether any two numbers from the list add up to `k`.","date":"Jan 21 2021","objectID":"/dcp-1/","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. The Question Given a list of numbers and a number k, return whether any two numbers from the list add up to k. Examples [1, 2, 3], k = 4 Yes, since 1+3 = 4 [10, 15, 3, 7], k=17 Yes, since 10+7 = 17 [5, 4, 7, 12, 1], k = 2 No Solutions ","date":"Jan 21 2021","objectID":"/dcp-1/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":"Brute force A simple solution would be to iterate over all possible pairs in the array and checking if a pair adds up to k. for i from 0 to n-1: for j from i+1 to n-1: if a[i] + a[j] == k: return true return false This will involve n(n+1)/2 steps, so the time complexity will be O(n^2), and O(1) space complexity. ","date":"Jan 21 2021","objectID":"/dcp-1/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":"Sorting and two-pointer approach We can sort the array and use two pointers, front (starting from 0) and end (starting from n-1): If the elements pointed to currently sum up to k, then return true If the sum is less than k, increment the front pointer, since we need to increase the sum and the array is sorted. Symmetrically, if the sum is more than k, decrement the end pointer. We repeat this until front and end cross each other. sort(a) front = 0, end = n-1 while front \u003c end: if a[front] + a[end] == k: return true else if a[front] + a[end] \u003c k: front = front + 1 else end = end - 1 return false Since we are sorting an array (O(nlogn)) and looping with the front and end pointers (O(n)), the overall time complexity of this solution is (O(nlogn)). The space complexity is (O(1)). You can find the implementation of this solution here If we are required to return the indices, the sorting approach cannot be used directly. We will have to make an array of pairs of (val, index) and then sort this array. ","date":"Jan 21 2021","objectID":"/dcp-1/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":"Using a set or map We can iterate through the array and keep adding the elements to a set (or hashset, map or hashmap), and for every element, check if the set contains (k-a[i]). If we find this condition to be true, then there exists a pair that adds up to k: the current a[i] and the entry in the set, k-a[i]. set m for i from 0 to n-1: if m.has(k-a[i]): return true m.add(a[i]) return false We are making a single pass through the array, finding whether a number exists in the set, and adding an element to the set. If we are using a BST implementation of set (C++ set or map) then the time complexity will be O(nlogn), since every insert/find operation takes O(logn) time. If we use a hashset or hashmap (C++ unordered_set or unordered_map) then the time complexity will be O(n), since insert/find operation can be done in constant time. You can find the implementation of this solution here If we are required to return indices of these elements, then need to use a map or hashmap, with the key-value pairs as (value, index). ","date":"Jan 21 2021","objectID":"/dcp-1/:3:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"}]