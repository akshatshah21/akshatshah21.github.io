[{"categories":["coding-problems"],"content":"LeetCode 75. Two problems a day. Part 1.","date":"Apr 27 2024","objectID":"/lc75-1/","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Intent Confession: I’ve never been comfortable with DSA, Coding Problems or Competitive Programming. And so this is one more attempt to change that. LeetCode 75. Two problems a day, starting April 25, 2024. To further motivate consistency and completion of this, I’ve decided I will do write-ups for all of these problems and perhaps publish them on my blog. Let’s see. This is Part 1 - Array/String. 1.1 Merge Strings Alternately Problem on LeetCode ","date":"Apr 27 2024","objectID":"/lc75-1/:0:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Question Given two strings, merge them such that the characters in the result string are alternately from each string. If one string is exhausted, append the remainder of the other string to the result. ","date":"Apr 27 2024","objectID":"/lc75-1/:1:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Solutions This is like the simple merge operation from Merge Sort! class Solution { public: string mergeAlternately(string word1, string word2) { string ret = \"\"; int len1 = word1.length(); int len2 = word2.length(); int p1 = 0, p2 = 0; while (p1 \u003c len1 \u0026\u0026 p2 \u003c len2) { ret += word1[p1++]; ret += word2[p2++]; } while (p1 \u003c len1) { ret += word1[p1++]; } while (p2 \u003c len2) { ret += word2[p2++]; } return ret; } }; 1.2 Greatest Common Divisor of Strings Problem on LeetCode ","date":"Apr 27 2024","objectID":"/lc75-1/:2:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Question String t is said to ‘divide’ string s if the s = t + t + t + ... + t (t concatenated one or more times) With this definition of division, find the GCD of two given strings str1 and str2 (the largest string that divides both) Example 1: Input: str1 = \"ABCABC\", str2 = \"ABC\" Output: \"ABC\" Example 2: Input: str1 = \"ABABAB\", str2 = \"ABAB\" Output: \"AB\" Example 3: Input: str1 = \"LEET\", str2 = \"CODE\" Output: \"\" ","date":"Apr 27 2024","objectID":"/lc75-1/:3:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Solutions ","date":"Apr 27 2024","objectID":"/lc75-1/:4:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Observations Consider cyclically traversing both strings together one character at a time. If at any point we see a mismatch, then the GCD string must be empty This further reveals that we probably need to use that one repeating substring (evident in above examples as “AB” or “ABC” ","date":"Apr 27 2024","objectID":"/lc75-1/:4:1","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Initial Solution After trying out some test cases on paper and submitting some naive solution, an interesting test case was revealed. Consider the following test case: Input: str1 = \"ABABABABABABABAB, str2 = \"ABABAB\" Basically str1 is “AB” 8 times, while str2 is “AB” 3 times. My naive solution involved checking whether the smaller string (potentially the GCD) matches cyclically with the larger string, but that’s not correct as the above example shows. The correct output is just “AB”, not “ABABAB”. This is interesting since the GCD of 3 and 8 is 1. So here’s an idea: the GCD of the two strings is the repeating substring, concatenated g times, where g is the GCD of number of instances of that repeating substring in each string. To find that repeating substring component, we try all possible prefixes of a string and check whether it divides the entire string. We take the smallest such prefix, and call it the divisor, and also count the number of concatenations it takes to get the complete string (~the quotient). We then try finding the quotient for the other string, and then calculate the GCD of the two quotients, which is g as defined above. If at any point, there is a character mismatch (while traversing one string - start to end - and a potential divisor - cyclically), this means that the GCD string must be empty. class Solution { private: pair\u003cstring, int\u003e getSmallestDivisor(const string\u0026 s) { string prefix = \"\"; int n = s.length(); for (int i = 0; i \u003c n; i++) { prefix += s[i]; int p = 0; int quotient = 0; bool match = true; for (const char\u0026 c : s) { if (c != prefix[p]) { match = false; break; } p = (p + 1) % (i + 1); // cyclic traveral, i = prefixLength if (p == 0) quotient++; } if (match \u0026\u0026 p == 0) return { prefix, quotient }; } return { s, 1 }; // no divisor except self } public: string gcdOfStrings(string str1, string str2) { auto p = getSmallestDivisor(str1); string divisor = p.first; int q1 = p.second; int p2 = 0; int q2 = 0; int divisorLen = divisor.length(); for (const char\u0026 c : str2) { if (c != divisor[p2]) { return \"\"; } p2 = (p2 + 1) % divisorLen; // cyclic traversal if (p2 == 0) q2++; } if (p2 != 0) return \"\"; string ret = \"\"; int g = gcd(q1, q2); for (int i = 0; i \u003c g; i++) { ret += divisor; } return ret; } }; The time complexity of this solution is O(N^2 + M), where N = length of str1, M = length of str2. N^2 because we try all prefixes of str1 and traverse str1 for each of them, and +M because we traverse str2 with the smallest divisor of str1. One simple optimization would be to to call the getSmallestDivisor function for the smaller of the two given strings. Another one is to check length divisibility before traversing to check for divisibility of the strings. The auxiliary space is O(N). The brute force solution on LeetCode is similar to this solution. ","date":"Apr 27 2024","objectID":"/lc75-1/:4:2","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Optimal Solution The optimal solution given on LeetCode is amazing, and uses the fact that the length of the GCD string will be the same as the GCD of the length of the two strings, assuming that the two are made of a common repeating substring. (In the above brute force solution, we dealed in terms of the GCD of number of repeating instances, which can be transformed to length by multiplying the number of instances with the length of the repeating substring). There are two parts to it: Do these two strings have a non-empty GCD string? If they do, then the length of the GCD string must be the same as the GCD of the length of the two strings. And we can simply take the prefix of any string with that length - this prefix is common repeating substring (called base in the LeetCode solution) repeated GCD(len1, len2) times. The clever way of checking whether there exists a non-empty GCD string is to check if str1 + str2 == str2 + str. This extends from the fact that if there is a common repeating substring that forms both strings, these two concatenations would be the same. For example: ABAB and ABABAB. Here since they have AB as the common repeating substring - (ABAB)(ABABAB) == (ABABAB)(ABAB) class Solution { public: string gcdOfStrings(string str1, string str2) { if (str1 + str2 != str2 + str1) return \"\"; int l1 = str1.length(), l2 = str2.length(); int g = gcd(l1, l2); return str1.substr(0, g); } }; 1.3 Kids With the Greatest Number of Candies Problem on LeetCode ","date":"Apr 27 2024","objectID":"/lc75-1/:4:3","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Question Given an array of n numbers and a number x, return a boolean array with true values at those indices where, upon adding x to the element and leaving all other elements unchanged, the current element will be a maximum. There can be multiple maximums. ","date":"Apr 27 2024","objectID":"/lc75-1/:5:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Solutions Find the maximum number in the input array, and map each element to true if its value plus x is greater than or equal to the maximum ","date":"Apr 27 2024","objectID":"/lc75-1/:6:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"C++ class Solution { public: vector\u003cbool\u003e kidsWithCandies(vector\u003cint\u003e\u0026 candies, int extraCandies) { int max = *max_element(candies.begin(), candies.end()); vector\u003cbool\u003e res; for (const int \u0026i: candies) { res.emplace_back(i + extraCandies \u003e= max); } return res; } }; ","date":"Apr 27 2024","objectID":"/lc75-1/:6:1","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Java class Solution { public List\u003cBoolean\u003e kidsWithCandies(int[] candies, int extraCandies) { int max = Arrays.stream(candies).max().getAsInt(); return Arrays.stream(candies).map(i -\u003e i + extraCandies \u003e= max).getAsBoolean();i } } ","date":"Apr 27 2024","objectID":"/lc75-1/:6:2","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Python class Solution: def kidsWithCandies(self, candies: List[int], extraCandies: int) -\u003e List[bool]: max_candies = max(candies) return [i + extraCandies \u003e= max_candies for i in candies] ","date":"Apr 27 2024","objectID":"/lc75-1/:6:3","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"JavaScript /** * @param {number[]} candies * @param {number} extraCandies * @return {boolean[]} */ var kidsWithCandies = function(candies, extraCandies) { const maxCandies = Math.max(...candies); return candies.map(i =\u003e i + extraCandies \u003e= maxCandies); }; ","date":"Apr 27 2024","objectID":"/lc75-1/:6:4","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"C# public class Solution { public IList\u003cbool\u003e KidsWithCandies(int[] candies, int extraCandies) { var maxCandies = candies.Max(); return candies.Select(i =\u003e i + extraCandies \u003e= maxCandies).ToList(); } } 1.4 Can Place Flowers Problem on LeetCode ","date":"Apr 27 2024","objectID":"/lc75-1/:6:5","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Question Given a binary array, return whether it is possible to add x 1s in the array without there being two adjacent 1s. ","date":"Apr 27 2024","objectID":"/lc75-1/:7:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Solutions Traverse the array, and try placing a 1 wherever possible (~greedily). It will be possible to place a 1 if i-1 and i+1 have 0s or are out of bounds. ","date":"Apr 27 2024","objectID":"/lc75-1/:8:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"C++ class Solution { public: bool canPlaceFlowers(vector\u003cint\u003e\u0026 flowerbed, int n) { int l = flowerbed.size(); for (int i=0;n \u003e 0 \u0026\u0026 i \u003c l; i++) { if (flowerbed[i] == 1) continue; if ((i == 0 || flowerbed[i-1] == 0) \u0026\u0026 (i == l-1 || flowerbed[i+1] == 0)) { flowerbed[i] = 1; n--; } } return n == 0; } }; ","date":"Apr 27 2024","objectID":"/lc75-1/:8:1","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Java class Solution { public boolean canPlaceFlowers(int[] flowerbed, int n) { final int l = flowerbed.length; for (int i = 0; n \u003e 0 \u0026\u0026 i \u003c l; i++) { if (flowerbed[i] == 1) continue; if ((i == 0 || flowerbed[i-1] == 0) \u0026\u0026 (i == l-1 || flowerbed[i+1] == 0)) { flowerbed[i] = 1; n--; } } return n == 0; } } 1.5 Reverse Vowels of a String [Problem on LeetCode](https://leetcode.com/problems/reverse-vowels-of-a-string ","date":"Apr 27 2024","objectID":"/lc75-1/:8:2","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Question Given a string, reverse the order of vowels that appear in it. For example, hello becomes holle. The string can contain ASCII-printable characters. ","date":"Apr 27 2024","objectID":"/lc75-1/:9:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Solution An immediate solution is to store a list of vowels as they appear in the string, then replace them in reverse order with the list. The next logical step is to realize you can use two pointers and swap vowels only, skipping other characters (much like how you reverse a string with two pointers). A subtle thing to note here is that the vowels can be lower as well as upper case class Solution { private: const set\u003cchar\u003e VOWELS = { 'a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U' }; bool isVowel(const char \u0026c) { return VOWELS.count(c); } public: string reverseVowels(string s) { int l = 0, r = s.length() - 1; while (l \u003c r) { if (!isVowel(s[l])) { l++; continue; } if (!isVowel(s[r])) { r--; continue; } swap(s[l], s[r]); l++; r--; } return s; } }; 1.6 Reverse Words in a String Problem on LeetCode ","date":"Apr 27 2024","objectID":"/lc75-1/:10:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Question Given a string, reverse the words in it. Also remove any extra whitespaces - leading, trailing and between the words. Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space? ","date":"Apr 27 2024","objectID":"/lc75-1/:11:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Solutions Ah, so easy to do if you have the right functions available… Check out the following solutions in decreasing order of simplicity - Python and Java. Both these languages have a convenient standard split function, as well as a function to trim or strip whitespaces. For an online assessment (or real life, lol), this would be the way to go. But if an interviewer is asking you this question, they’re not looking for these solutions. Plus, look at the follow-up. ","date":"Apr 27 2024","objectID":"/lc75-1/:12:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Python class Solution: def reverseWords(self, s: str) -\u003e str: s = s.strip() words = s.split() words.reverse() return ' '.join(words) Questions like these remind you that it’s helpful to be fluent in multiple languages for coding problems ","date":"Apr 27 2024","objectID":"/lc75-1/:12:1","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Java class Solution { public String reverseWords(String s) { String[] words = s.trim().split(\"\\\\s+\"); StringBuilder stringBuilder = new StringBuilder(); int n = words.length; for (int i=n-1; i\u003e0; i--) { System.out.println(words[i]); stringBuilder.append(words[i]); stringBuilder.append(' '); } stringBuilder.append(words[0]); return stringBuilder.toString(); } } Notice how using Java’s split method here is different from using Python’s: you need to trim the string in Java first, in Python you don’t. Ah, language subtleties. ","date":"Apr 27 2024","objectID":"/lc75-1/:12:2","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Solving this in-place Reverse the entire string Then reverse each word in the reversed string (remember, words are delimited by one or more spaces). This would reverse the order of words in the string. Try it out, and this isn’t too difficult to come up with intuitively :-). As a final step, we would need to get rid of extra whitespaces (leading, trailing and between words). For this we need to keep two pointers - a read pointer and a write pointer, and write the entire string again in the same buffer, with decisioning to ignore the extra spaces. The challenge here would be to write this parsing and writing logic elegantly. Refer to the C++ code below to see how I did it (likely not the best way). And now for the big one. class Solution { public: string reverseWords(string s) { reverse(s.begin(), s.end()); int n = s.length(); for (int i=0; i\u003cn; i++) { if (s[i] == ' ') continue; int start = i; while (i \u003c n \u0026\u0026 s[i] != ' ') i++; int end = i; reverse(s.begin() + start, s.begin() + end); } // collapse spaces int write = 0; bool endWord = false; for (int read = 0; read \u003c n; read++) { if (endWord) { s[write++] = ' '; endWord = false; } if (s[read] != ' ') { s[write++] = s[read]; if (read \u003c n \u0026\u0026 s[read+1] == ' ') endWord = true; } } if (s[write-1] == ' ') write--; return s.substr(0, write); } }; 1.7 Product of Array Except Self Problem on LeetCode ","date":"Apr 27 2024","objectID":"/lc75-1/:12:3","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Question Given an input array, return an array where each element of the result array holds the product of the entire input array except the element at that position in the input array. You cannot use the division operation Do it in O(N) time Follow-up: Do it in O(1) auxiliary space ","date":"Apr 27 2024","objectID":"/lc75-1/:13:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Solutions The most direct way of doing this is calculating the product of the entire array and then dividing it by each element to get the result array. This needs to handle 0s in the array: If there are two or more 0s, then the entire result array would be 0s (at least one 0 would be part of every product) If there is exactly one 0, then only that position will have the entire product (without 0) and the rest of the array would hold 0s (since this 0 would be in every other product) class Solution { public: vector\u003cint\u003e productExceptSelf(vector\u003cint\u003e\u0026 nums) { int n = nums.size(); int product = 1; int zeroes = 0; int zeroIdx = -1; for (int i=0; i\u003cn; i++) { if (nums[i] == 0) { zeroes++; zeroIdx = i; } else product *= nums[i]; } vector\u003cint\u003e res(n, 0); if (zeroes \u003e 1) { return res; } if (zeroes == 1) { res[zeroIdx] = product; return res; } for (int i=0; i\u003cn; i++) { res[i] = product / nums[i]; } return res; } }; This is an O(N) time, O(1) solution, but it uses the division operator, which is not allowed according to the question. The brute force way of solving this would be to calculate for each element, the product of the other elements - an O(N^2) solution. From this solution, we can observe that we’re repeating a lot of calculations. What would help here are prefix and suffix products. So here’s what we can do: Calculate a prefix product array: `pref[i] = nums[0] * nums[1] * … * nums[i-1]; pref[0] = 1 Calculate a suffix product array: suff[i] = nums[i+1] * nums[i+2] * ... * nums[n-1]; suff[n-1] = 1 Then, the result array is simply: res[i] = pref[i] * suff[i] class Solution { public: vector\u003cint\u003e productExceptSelf(vector\u003cint\u003e\u0026 a) { int n = a.size(); int pre[n], suf[n]; pre[0] = 1; suf[n-1] = 1; for(int i=1; i\u003cn; i++) { pre[i] = pre[i-1] * a[i-1]; } for(int i=n-2; i\u003e=0; i--) { suf[i] = suf[i+1] * a[i+1]; } vector\u003cint\u003e ans(n); for(int i=0; i\u003cn; i++) { ans[i] = pre[i] * suf[i]; } return ans; } }; This is an O(N) time solution, but it takes O(N) space for the prefix and suffix array. Observation: We’re going from 0 to n-1 again for calculating the result array. Instead of keeping an array of prefix products, we can keep a single prefix product variable, use it for the result calculation and update the same variable (we don’t need the previous prefix products). This takes saves creating and maintaining one array. But we still need the suffix array since we’re going from 0 to n-1. class Solution { public: vector\u003cint\u003e productExceptSelf(vector\u003cint\u003e\u0026 nums) { int n = nums.size(); vector\u003cint\u003e suffixProduct(n, 1); for (int i=n-2; i\u003e=0; i--) { suffixProduct[i] = suffixProduct[i+1] * nums[i+1]; } int prefixProduct = 1; vector\u003cint\u003e res(n, 1); for (int i=0; i\u003cn; i++) { res[i] = prefixProduct * suffixProduct[i]; prefixProduct *= nums[i]; } return res; } }; Now, we need to have O(1) auxiliary space. This is usually a hint for using the input array and modifying it in-place. But in this case, we can instead use the result array itself! We can initially store suffix products in the result array, and then using the prefix product, update each element as we go from 0 to n-1. This reduces our auxiliary space to O(1) - the result array is not auxiliary, and apart from that we just have single variables. class Solution { public: vector\u003cint\u003e productExceptSelf(vector\u003cint\u003e\u0026 nums) { int n = nums.size(); // first, fill the result with suffix product vector\u003cint\u003e res(n, 1); for (int i=n-2; i\u003e=0; i--) { res[i] = nums[i+1] * res[i+1]; } // then multiply prefix product int prefixProduct = nums[0]; for (int i=1; i\u003cn; i++) { res[i] = res[i] * prefixProduct; prefixProduct *= nums[i]; } return res; } }; 1.8 Increasing Triplet Subsequence Problem on LeetCode ","date":"Apr 27 2024","objectID":"/lc75-1/:14:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Question Given an array of integers, return true if there exist distinct indices i, j, k such that i \u003c j \u003c k and nums[i] \u003c nums[j] \u003c nums[k] ","date":"Apr 27 2024","objectID":"/lc75-1/:15:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Solutions The brute force way of doing this is to find a pair (i, k, j) among all such unordered pairs where the conditions hold true. This solution has O(N^3) time complexity. Intuition leads us to think in terms of minimum values. One way of thinking about this is that we need to find some local minimum i, after which there exists another local minimum j that is greater than the number at i, after which there should exist at least one number that’s greater than the one at j. The way to do this in linear time would be to store the two lowest values encountered so far - min and min2. min = INT_MAX, min2 = INT_MAX for(int i: nums) { if (i \u003c= min) min = i if (i \u003c min2) min2 = i if (i \u003e min2) return true } return false min is a potential `nums[i] min2 is a potential nums[j], but it doesn’t necessarily store one corresponding to min being nums[i]. Rather, it can also store a potential nums[j] corresponding to a previous value of min (a potential nums[i] that was encountered previously but is now replaced with another). The reason for min2's definition can be understood with the following test case: [9, 10, 5, 11, 10, 9, 8] This is how we update min and min2. Initially, both hold INT_MAX: At i = 0, nums[i] = 9: min = 9, min2 = INT_MAX* At i = 1, nums[i] = 10: min = 9, min2 = 10 At i = 2, nums[i] = 5: min = 5, min2 = 10. Note that here we do not update min2 to 9 (j \u003e i), but neither do we reset it (I reset it in an earlier version, which won’t work - we’ll see why) At i = 3, nums[i] = 11: min = 5, min2 = 10. Now we finally encounter a value that is greater than min2 (k \u003e j and nums[k] \u003e nums[j]) And we also observe that we do indeed have an answer: (9, 10, 11). Note that min is holding 5, but it’s not part of the current (nums[i], nums[j], nums[k]) tuple that we have as the match - nums[i] is actually 9, even though we replaced min. But it’s min2 storing 10 is what tells us that we have encountered some number before it such that it’s lower than 10. 10 is actually corresponding to 9 as its pair, not 5. This really is that one pivot of the solution. Let’s say we reset min2 each time we encounter a number lower than the current min, with this same test case. This is how it would turn out: At i = 0, nums[i] = 9: min = 9, min2 = INT_MAX* At i = 1, nums[i] = 10: min = 9, min2 = 10 At i = 2, nums[i] = 5: min = 5, min2 = INT_MAX. Note that here we do reset it At i = 3, nums[i] = 11: min = 5, min2 = 11 At i = 4, nums[i] = 10: min = 5, min2 = 10 At i = 5, nums[i] = 9: min = 5, min2 = 9 At i = 6, nums[i] = 8: min = 5, min2 = 8 We reach the end, and return false, even though we do have a possible answer: (9, 10, 11). This is why resetting min2 will not work. The fact that min2 has already been replaced, means that there exists a min (before min2 and less than min2) before it, even though the current value of min might be different. I found this in the comments in one of the solutions: updating min1 simply prepares to form a new pair of min\u003cmin2. The existing min2 represents the older min1 \u003c min2 pair class Solution { public: bool increasingTriplet(vector\u003cint\u003e\u0026 nums) { int min = INT_MAX, min2 = INT_MAX; for (const int \u0026i: nums) { if (i \u003c= min) min = i; // prepares for new min, min2 pair. min2 still represents older min, min2 pair!! else if (i \u003c min2) min2 = i; else if (i \u003e min2) return true; } return false; } }; Effectively just three lines, wow. 1.9 String Compression Problem on LeetCode ","date":"Apr 27 2024","objectID":"/lc75-1/:16:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Question Given an array of characters, compress it such that each subarray of the same character is replaced with the character followed by the length of that subarray. If the length of the subarray is 1, skip the length, just place the character. Modify the input in-place. Examples: [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] -\u003e [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] ['a'] -\u003e ['a'] ","date":"Apr 27 2024","objectID":"/lc75-1/:17:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["coding-problems"],"content":"Solutions Classic read-write pointers approach. Traverse the array and maintain a currentChar and currentCharCount, and for each new character encountered, write the currentChar and currentCharCount to the array. class Solution { private: void appendNumberToCharArray(const int \u0026num, vector\u003cchar\u003e \u0026chars, int \u0026write) { string s = to_string(num); for (const char \u0026c: s) { chars[write++] = c; } } void appendCharCount(const int \u0026num, const char \u0026c, vector\u003cchar\u003e \u0026chars, int \u0026write) { chars[write++] = c; if (num \u003e 1) { appendNumberToCharArray(num, chars, write); } } public: int compress(vector\u003cchar\u003e\u0026 chars) { char currentChar = chars[0]; int write = 0; int currentCharCount = 1; int n = chars.size(); for (int i=1; i\u003cn; i++) { if (chars[i] != currentChar) { appendCharCount(currentCharCount, currentChar, chars, write); currentCharCount = 0; currentChar = chars[i]; } currentCharCount++; } appendCharCount(currentCharCount, currentChar, chars, write); return write; } }; Looking at my previous submissions from June 2020 to Feb 2024 to now, I’ve gone from repeating code (not using functions) and using terrible one-letter variables for everything to good(?) variable names and helper functions. Progress? ","date":"Apr 27 2024","objectID":"/lc75-1/:18:0","tags":["data-structures","algorithms","coding-problems"],"title":"LeetCode 75 - Part 1 - Array/String","uri":"/lc75-1/"},{"categories":["engineering"],"content":"The Circuit Breaker pattern - fail fast when it’s likely that an operation will fail based on its previous invocations.","date":"Jun 18 2023","objectID":"/circuit-breaker/","tags":["design-patterns","resilience","fault-tolerance","software","engineering"],"title":"Circuit Breaker - Hope is not a Design Method","uri":"/circuit-breaker/"},{"categories":["engineering"],"content":"TLDR The Circuit Breaker pattern - fail fast when it’s likely that an operation will fail based on its previous invocations. Context Say you’re placing an order on a groceries app. You make the payment and you’re waiting for that happy payment confirmation screen with its melodious chime that almost always appears immediately. However, this time, it does not. You wait thirty long, painful seconds and are eventually annoyed to see a “Could not confirm payment” message. Now let’s say this is what normally happens when you make a payment: the app on your phone polls an order service hosted somewhere remote, which in turn polls a dedicated payment confirmation service. The example situation - a groceries app, with an order service and a payment confirmation serviceThe example situation - a groceries app, with an order service and a payment confirmation service \" The example situation - a groceries app, with an order service and a payment confirmation service Let’s say that the payment confirmation service is down due to some reason. In a distributed system such as this, where there are multiple remote service calls to serve a transaction, failures can be broadly categorized into two types, based on their duration: Transient failures: these are resolved automatically after a short time interval (seconds). Reasons for these may include timeouts due to slow network connections, high load on the server, or any temporary issue. These can be handled by retrying the call. Failures that will take longer to fix: for example, the complete failure of a service or broken network connectivity. These are the type of failures that we’ll look at. What Happens When a Dependency Fails Let’s say we handle all failures of this frequently executed operation with a retry mechanism. The calling application (order service in the example above) will continually retry the remote call (a specified number of times). But we know that the retries will not succeed since the failure at the dependency (payment confirmation service in the above example) is not transient. What are the consequences? The transaction is blocked on this operation. It is using up resources - memory, threads, database connections and CPU cycles that are involved with this transaction. This is especially impactful to the overall performance of the calling application if the number of transactions that involve the dependency is high in volume or frequency - like grocery orders! Blocked transactions and holding resources wastefully will cause failures to cascade further to possibly unrelated parts of the system that might need to use the same resources. And this is not just at the calling service level where memory, threads, DB connections et cetera are being held. The service itself could be a resource to other remote components, which might also get affected since the calling service is not behaving as usual. In the grocery order payment example, resources on the user’s phone are being used by the app polling the order service. Continuous retries to the already failing dependency might put further load on it and perhaps prevent it from recovering And, in the example above, you have a lot of annoyed users that waited a long thirty seconds! Great, Now What? Quote “Hope is not a design method.\" ~ Michael T. Nygard, Release It!: Design and Deploy Production-Ready Software The key point to note here is that non-transient failures of a dependency shouldn’t be handled the same way as transient failures. We need a way of detecting that a failure is non-transient and acting accordingly. Another thing to note is that there’s nothing special about a remote service call here; any operation that is going to fail for a while can benefit from such a preventive arrangement. Let’s think through what we could do in such a scenario and lay down some requirements: Detect that the failing operation is probably going to keep failing for a while - it’s not a transient failure Fail fast - don’t waste resources a","date":"Jun 18 2023","objectID":"/circuit-breaker/:0:0","tags":["design-patterns","resilience","fault-tolerance","software","engineering"],"title":"Circuit Breaker - Hope is not a Design Method","uri":"/circuit-breaker/"},{"categories":["engineering"],"content":"What it Does Simply said, a circuit breaker acts as a proxy for the operation that might fail. This proxy monitors the number of recent failures and decides whether to attempt the operation next time it is triggered or return an exception directly, skipping the operation. It tries the operation after some time and decides whether to switch back to invoking the operation normally that it is acting as a proxy for. Info How the failing operation recovers is handled externally, possibly by restoring or restarting a failed component or repairing a network connection. ","date":"Jun 18 2023","objectID":"/circuit-breaker/:1:0","tags":["design-patterns","resilience","fault-tolerance","software","engineering"],"title":"Circuit Breaker - Hope is not a Design Method","uri":"/circuit-breaker/"},{"categories":["engineering"],"content":"States of the Circuit Breaker Overall, we can guess that the circuit breaker has three states. And the naming of these states is where the “circuit” analogy comes into play: The Three States of the Circuit Breaker PatternThe Three States of the Circuit Breaker Pattern \" The Three States of the Circuit Breaker Pattern Closed: The circuit is closed, so the request to the circuit breaker is routed to the operation which returns a response - the normal flow, so to speak. The operation can fail here, and the circuit breaker tracks these failures Open: The circuit is open, which means the request to the circuit breaker will not be routed to the operation. Instead, the circuit breaker will return an exception Half-open: This is the state in which the circuit breaker is ‘testing the water’; it allows a limited number of requests it receives to invoke the operation, to check whether the problem with the operation has been fixed ","date":"Jun 18 2023","objectID":"/circuit-breaker/:2:0","tags":["design-patterns","resilience","fault-tolerance","software","engineering"],"title":"Circuit Breaker - Hope is not a Design Method","uri":"/circuit-breaker/"},{"categories":["engineering"],"content":"State transitions Let’s look at how the circuit breaker goes from one state to another: State Transitions of a Circuit BreakerState Transitions of a Circuit Breaker \" State Transitions of a Circuit Breaker Closed $\\rightarrow$ Open: While in the closed state, the circuit breaker maintains a count of the recent failures in invoking the operation If this count (with recency kept in consideration) exceeds the failureThreshold, the circuit breaker transitions to the open state Open $\\rightarrow$ Half-Open: While in the open state, a timer is set for breakDuration During this time, the operation is not invoked at all, and the circuit breaker responds with an exception. This is also the time during which the fault is expected to be fixed When the timer expires, the circuit breaker switches to the half-open state Half-Open $\\rightarrow$ Open: Implementations can differ here, but here’s one of the simpler ones: the next requests to the circuit breaker when it’s in the half-open state are routed to the operation. If these invocations succeed, depending on the successThreshold, the circuit breaker will eventually go to the closed state However, if there is any failure before successThreshold is reached, the circuit breaker reverts to the open state Another implementation might allow a fraction of the incoming requests to invoke the operation to decide whether to switch to the closed state. This can be helpful, for example, if a remote service being called is recovering and we wouldn’t want to flood it immediately with the regular volume of requests. ","date":"Jun 18 2023","objectID":"/circuit-breaker/:2:1","tags":["design-patterns","resilience","fault-tolerance","software","engineering"],"title":"Circuit Breaker - Hope is not a Design Method","uri":"/circuit-breaker/"},{"categories":["engineering"],"content":"Usage In code, the circuit breaker acts as a wrapper around the operation under consideration. So, any calls to the said operation go through the circuit breaker proxy. The Circuit Breaker as a Proxy for the OperationThe Circuit Breaker as a Proxy for the Operation \" The Circuit Breaker as a Proxy for the Operation ","date":"Jun 18 2023","objectID":"/circuit-breaker/:3:0","tags":["design-patterns","resilience","fault-tolerance","software","engineering"],"title":"Circuit Breaker - Hope is not a Design Method","uri":"/circuit-breaker/"},{"categories":["engineering"],"content":"Parameters Different implementations require different parameters to be configured, but here are the core ones: failureThreshold: The threshold (count or percentage) for failures after which the circuit breaks. Some advanced implementations also couple this with a minimumThroughput, so the failure threshold only takes effect when there’s a minimum amount of traffic breakDuration: This specifies how long the circuit remains open before switching to the half-open state. Too low and there will be more failed invocations, while too high would mean a lot of failed transactions unless there’s a fallback successThreshold: The threshold (count or percentage) for successful invocations when in the half-open state for switching to the closed state These values should be tuned by looking at existing traffic patterns and expected recovery time for non-transient failures. It’s difficult trying to estimate optimum values without this information. Extras ","date":"Jun 18 2023","objectID":"/circuit-breaker/:3:1","tags":["design-patterns","resilience","fault-tolerance","software","engineering"],"title":"Circuit Breaker - Hope is not a Design Method","uri":"/circuit-breaker/"},{"categories":["engineering"],"content":"Handling the Exception When the Circuit is Open In the open state, the circuit breaker will return an exception. This exception can be handled according to the application. Here are some options: Report it appropriately to the user, asking them to try later. In the grocery app example, perhaps informing the user immediately that there was a problem in confirming their payment might be a little less annoying than making them wait for… thirty long seconds (okay, last time!) Try an alternative operation, like a fallback. Perhaps using a different way to confirm the payment, or users could be shown alternative payment options on their app Temporarily degrade the functionality of the system proactively instead of users getting an error at all, like making a payment method unavailable while the circuit is open ","date":"Jun 18 2023","objectID":"/circuit-breaker/:4:0","tags":["design-patterns","resilience","fault-tolerance","software","engineering"],"title":"Circuit Breaker - Hope is not a Design Method","uri":"/circuit-breaker/"},{"categories":["engineering"],"content":"Break the Circuit Based on the Type of Exception Most circuit breaker implementations allow the specification of the types of exceptions or results that should be considered when breaking a circuit. For example, exceptions arising from valid business logic conditions can be ignored by the circuit breaker while still tracking service unavailability exceptions. In the case of HTTP calls, perhaps some 4xx response codes (client error) could be ignored while 5xx codes could be tracked. ","date":"Jun 18 2023","objectID":"/circuit-breaker/:5:0","tags":["design-patterns","resilience","fault-tolerance","software","engineering"],"title":"Circuit Breaker - Hope is not a Design Method","uri":"/circuit-breaker/"},{"categories":["engineering"],"content":"Log Circuit Events Quote Circuit breakers are a valuable place for monitoring. Any change in breaker state should be logged and breakers should reveal details of their state for deeper monitoring. Breaker behaviour is often a good source of warnings about deeper troubles in the environment. ~ Martin Fowler, in his blog about circuit breakers As an example, the circuit breakers offered by Polly and resilience4j provide hooks into their state transitions, where you could log useful information. These logs could be tied to alerts for monitoring and observability. Conclusion Circuit breaker is a pattern to prevent an application from invoking an operation if it is highly likely to fail. This helps save resources, offer better response times and increase the stability of a system when it is in an error state or recovering from one. However, it’s not the best one to use in all cases. Using a circuit breaker isn’t recommended for handling access to local private resources in an application like in-memory data structures, since it will add a lot of overhead in this case. As mentioned above, retries are more suitable for transient failures. In fact, circuit breakers can be combined with retries to counter both types. It can also not be used as a substitute for handling business logic exceptions - it’s a fault tolerance and resilience pattern. References and Further Reading Circuit Breaker pattern - Azure Architecture Center CircuitBreaker - Martin Fowler App-vNext/Polly - GitHub Circuit breaker design pattern - Wikipedia ","date":"Jun 18 2023","objectID":"/circuit-breaker/:6:0","tags":["design-patterns","resilience","fault-tolerance","software","engineering"],"title":"Circuit Breaker - Hope is not a Design Method","uri":"/circuit-breaker/"},{"categories":["coding-problems"],"content":"Given an array, return an array where each element is the product of the all elements except the current one.","date":"Jul 3 2022","objectID":"/dcp-2/","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. ","date":"Jul 3 2022","objectID":"/dcp-2/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":"The Question Given an array of integers, return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i. Follow-up: What if the division operation is not allowed? ","date":"Jul 3 2022","objectID":"/dcp-2/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":"Examples [1, 2, 3, 4, 5] Result: [120, 60, 40, 30, 24] [3, 2, 1] Result: [2, 3, 6] What’s interesting about this question is if there are 0s in the array: [1, 2, 3, 0] Result: [0, 0, 0, 6] [1, 2, 0, 3, 4, 0, 5] Result: [0, 0, 0, 0, 0, 0, 0] ","date":"Jul 3 2022","objectID":"/dcp-2/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":"Solutions ","date":"Jul 3 2022","objectID":"/dcp-2/:3:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":"Division of Overall Product The most intuitive solution is to first calculate the overall product of the array, P and then for each element in the given array, divide P by it to get the corresponding number in the result array. Dividing P by every element can be a problem if one of the elements is 0, since we’ll get a runtime error for dividing by 0. However, if there is indeed a 0 in the array, then P will also be 0. So we realize that we need to handle zeroes carefully in this solution. Trying out some test cases (see Examples above), we realize that there are three cases when it comes to 0s in the array: No zeroes: We can follow our simple solution above One zero, at index z: All positions in the result array except z will be 0, while z will hold the product of all numbers in the given array without the 0 More than one zeroes: All positions in the result array will hold 0. Hence, we need to keep track of the number of zeroes and construct the result accordingly. We can simply keep a running count of zeroes and firstZeroIndex for this, and calculate P accordingly. P = 1 zcount = 0 firstZeroIndex = -1 for i=0 to n-1: if a[i] == 0: if zcount == 0: firstZeroIndex = i zcount++ else: P = P * a[i] if zcount \u003e 1: break if zcount \u003e 1: result = [0, 0, ..., 0] of size n else if zcount == 1: result = [0, 0, ..., 0] of size n result[firstZeroIndex] = P else: result = [] for i=0 to n-1: result[i] = P / a[i] return result return result The time complexity of this solution is O(n) with two passes required, and auxilliary space complexity is O(1). Take care of overflow! Care must be taken that the variable P does not overflow. Use a larger integer type, or use modular arithmetic if allowable. ","date":"Jul 3 2022","objectID":"/dcp-2/:3:1","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["coding-problems"],"content":"Product Prefix and Suffix To address the follow-up of disallowing use of the division operation, we can calculate prefix and suffix product arrays and use the two to construct the final result array. These arrays hold the product of the prefix / suffix of the array without including the current element. Prefix array: pref[i] = a[0] * ... a[i-1], pref[0] = 1 Suffix array: suff[i] = a[i+1] * ... a[n-1], suff[n-1] = 1 To then construct the final result array, we simply multiply these two arrays elementwise. That is, result[i] = pref[i] * suff[i]. This works because pref[i] and suff[i] together hold the product of every element in the prefix and the suffix respectively, accounting for the whole array except a[i], which is the required result. A nice thing about this solution is that we do not need to handle 0s separately. However it does take three passes. We can skip two passes in case of zeroes, but even without that, the solution is correct. pref = [] pref[0] = 1 for i=1 to n-1: pref[i] = pref[i-1] * a[i-1] suff = [] suff[n-1] = 1 for i=n-2 to 0: suff[i] = suff[i+1] * a[i+1] result = [] for i=0 to n-1: result[i] = pref[i] * suff[i] return result The time complexity of this solution is O(n) and it takes three passes, while the auxilliary space complexity is O(n) for the prefix and suffix product arrays. ","date":"Jul 3 2022","objectID":"/dcp-2/:3:2","tags":["data-structures","algorithms"],"title":"Coding Problem: Array of Product Except Self","uri":"/dcp-2/"},{"categories":["productivity"],"content":"Software Development with collaboration is hard, here are some of my learnings","date":"Jan 14 2022","objectID":"/project-pandemonium/","tags":["projects","productivity","experience","thoughts","collaboration"],"title":"Project Pandemonium","uri":"/project-pandemonium/"},{"categories":["productivity"],"content":" This blog was originally published by me as part of a blog series by Google Student Developer Clubs, VJTI. A few days ago, during a lazy afternoon, while rummaging through my muddle of a cupboard, I found a notebook that had, unsurprisingly, my name scrawled on it. I opened the book somewhere in the middle, but those pages were blank. Then, opening the first page, I smiled, sheepish and nostalgic. Written on the first twenty or so pages of this notebook, was the account of one of my first projects as an engineering student. I immediately took a trip down memory lane. I perused those logs, consisting of long paragraphs of technical details, diagrams and outlines of activities carried out each day. But what stood out were the number of questions and exclamations. Occasionally, a few lines lamented on the roadblocks and failures that were faced, the uncertainty of whether things will work out and whether we were getting anywhere with the project. ","date":"Jan 14 2022","objectID":"/project-pandemonium/:0:0","tags":["projects","productivity","experience","thoughts","collaboration"],"title":"Project Pandemonium","uri":"/project-pandemonium/"},{"categories":["productivity"],"content":"About the project Along with three friends, I was part of a project that aimed to develop a WiFi Positioning System, or more specifically, an Indoor Positioning System. Fundamentally, this system would determine the location of a device using wireless access points that are in its vicinity. This project was under Eklavya, a mentorship program of the Society of Robotics and Automation, VJTI. I would have loved to tell you that despite the misgivings in my memoirs, we managed to accomplish our goals. We didn’t. And that’s what this blog is about. A project can be very chaotic. A number of things can go wrong, and every action to correct those mistakes can cascade into a wave of defects. In the end (if there is one), you are left with a good solution, a bad solution, a good solution that is not required, or several other variants. I’m no software engineering expert or a project management expert. I’m a final year undergraduate and I want to share some things I’ve learned after doing some projects in the last four years. In no way are these things guaranteed to be relevant or useful or even correct. But they’re food for thought! But what’s the problem? Define the problem. We hear this all the time but seldom do we really put it into effect, or at least with the required level of sincerity, specificity and clarity. “I want to make a chatting application” might seem self-explanatory as the definition of the required solution, but it’s not. The necessity for a clear understanding of the requirements, the scope and priorities, and the assumptions of a solution cannot be emphasized enough. Indeed, this is one of the major reasons why my WiFi Positioning System project was, in subtle terms, a letdown. I vividly remember not being sure about what we were making. To quote the very first line in my logs: “After days of ambiguity, our group was able to decide firmly about the project idea - Localization using Triangulation.\" Except of course, the ambiguity wasn’t gone, and to the keen reader, it must be apparent that the topic mentioned in this excerpt is not what we ended up doing. Is that what we had decided? It’s important to get most requirements or goals clear and sorted out in the beginning. I say “most” because getting the requirements perfect the first time is extremely difficult, if at all possible. If there are stakeholders of the project, it will indubitably prove difficult to solicit and analyze specific and clear requirements from them at the very beginning of the project - one of the biggest drawbacks of the Waterfall model of software development. Invariably, some form of an iterative process involving prototyping and feedback is part of the trade. But the sooner these requirements get clear, the sooner a project will reach completion, and lesser time will be spent pursuing features or improvements that are not required. It’s common knowledge that brainstorming in a group can help a lot with this part, because more aspects of the problem and solution will be explored, uncovering more and more questions that will hopefully be answered later on. What’s not common knowledge is that all these (likely diverging) lines of thought should be combined to a single, coherent one early enough, otherwise the benefits of collaboration may turn futile. Yes, we can! Can we though? Another important aspect of planning is feasibility. Gauging the feasibility of a solution is, admittedly, difficult. It requires experience, which I definitely didn’t have then, and no one can have enough. However, research can help here. If it’s a research project or maybe a data science project, a literature review is helpful, and in most cases, expected. Published work like papers, blogs, source code repositories can help one understand the work that others pursuing similar goals have done, as well as an understanding of the technical difficulty, skills and resources required, and therefore, the feasibility of the project. Did we do a literature review for WiFi","date":"Jan 14 2022","objectID":"/project-pandemonium/:1:0","tags":["projects","productivity","experience","thoughts","collaboration"],"title":"Project Pandemonium","uri":"/project-pandemonium/"},{"categories":["reading"],"content":"A list of articles, courses, books, videos  and any other things that I found personally interesting","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"Here’s a list of articles, courses, books, videos, and any other things that I found personally interesting and went through them: ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:0","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"Productivity Methods I stumbled across the following posts by Devi Parikh while going through this repo: Calendar. Not to-do lists: This post discusses some principles for time management. it makes the argument for using calendar to manage your time and tasks, not to-do lists. According to Parikh, to-do lists are too disorganized (especially in the time dimension, which is what we’re trying to optimize). She then goes on to explain her method of using calendars, which involves making everything you do - not just work, but things like eating, sleeping, doing nothing - an entry on your calendar. She then discusses other principles - I found the calibration multiplier fascinating! Checking Email → inbox Zero: This is something I’d heard about before, in the form of other terms like Touching every email once. This post outlines the motivation for being strict with your inbox, and dissuades procrastinating emails. Do what you need to do with that email whenever you open it, don’t put it off for a later time. ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:1","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"The Confessions of Marcus Hutchins, the Hacker Who Saved the Internet I love this article. It is a very well written story of Marcus Hutchins, the hacker who was responsible for stopping the WannaCry ransomware attack in 2017. Apart from the cool hacker element, this article also remarkably addresses the real-world implications of cybersecurity, and the serious repercussions it can have on people and property. It delves into the grey world of Cybersecurity, and it made me think that there really isn’t a stark line between cybercriminals and cybersecurity experts. They’re really the same kind of people who study the same things, but are on different teams, with different intentions. This 70-90 minutes read is worth every second. ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:2","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"Dropout: A Simple Way to Prevent Neural Networks from Overfitting This is the original paper on Dropout, a technique that is commonly used while training deep neural networks today. I knew the concept of dropout, but the way that the authors present it instilled a new way of thinking about dropout and how it curbs prevents overfitting, with the intuition tending more towards gradient-boosted machines and genetic algorithms than the simple principle of “disallowing the network to get dependent on certain pathways”. ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:3","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"The YOLO papers Many are aware that the creator of YOLO has written quite humorous papers for it. YOLO (You Only Look Once) transformed the field of object detection when it was published in 2016. It was much faster, used less computation and was at par with the state of the art. Apart from the surprise of how simple the model is, the papers really entertain their readers with subtle humour placed here and there. More versions of YOLO have been released since, but the initial versions were written by the same author: Joseph Chet Redmon, and these papers are fun. You Only Look Once: Unified, Real-Time Object Detection YOLO9000: Better, Faster, Stronger # YOLOv3: An Incremental Improvement I never thought that research papers could be written like these. Brilliant! ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:4","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["reading"],"content":"How to plan and execute your ML and DL projects This blog on FloydHub by Sayak Paul outlines good practices and tooling for machine learning projects, with a focus on reproducibility, versioning and low technical debt. ","date":"Nov 1 2021","objectID":"/reading-list-oct-2021/:0:5","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: October 2021","uri":"/reading-list-oct-2021/"},{"categories":["blockchain"],"content":"Implementing the ERC20 standard to make a simple fungible token on Ethereum","date":"Oct 13 2021","objectID":"/erc20/","tags":["ethereum","blockchain","solidity"],"title":"Making a Simple ERC20 Token","uri":"/erc20/"},{"categories":["blockchain"],"content":"In this blog post, I’ll walk through creating a simple ERC20 token on Ethereum. This was one of my lab assignments this semester, and I thought I better make a blog post about this, because I want to write consistently over here why not? A token in general is basically simply a digital representation of potentially anything. For example, a token can represent: reputation points in an online platform skills of a character in a game lottery tickets financial assets like a share in a company a fiat currency like USD an ounce of gold A token can also represent access rights to a blockchain or blockchain app, and tokens can also be used to automate \"friction points\" in various industries. Utility tokens, are tokens that have a specific \"use\" on the blockchain or an app based on that. Utility tokens are also called \"app coins\" because they are explicitly designed for a certain app or blockchain. ERC20 Standard The ERC-20 (Ethereum Request for Comments 20), proposed by Fabian Vogelsteller in November 2015, is a Token Standard that implements an API for tokens within Smart Contracts. The motivation for this EIP was to make \"a standard interface allows any tokens on Ethereum to be re-used by other applications: from wallets to decentralized exchanges.\" It provides functionalities like transfering tokens from one account to another, to get the current token balance of an account and also the total supply of the token available on the network. Besides these it can allow an owner of some tokens to approve spending those tokens by a third party account. ","date":"Oct 13 2021","objectID":"/erc20/:0:0","tags":["ethereum","blockchain","solidity"],"title":"Making a Simple ERC20 Token","uri":"/erc20/"},{"categories":["blockchain"],"content":"Methods and Events Defined in ERC20 function name() public view returns (string) function symbol() public view returns (string) function decimals() public view returns (uint8) function totalSupply() public view returns (uint256) function balanceOf(address _owner) public view returns (uint256 balance) function transfer(address _to, uint256 _value) public returns (bool success) function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) function approve(address _spender, uint256 _value) public returns (bool success) function allowance(address _owner, address _spender) public view returns (uint256 remaining) The name, symbol, decimals are state constants that identify the ERC20 token and the number of decimal places used for user representation. The totalSupply function returns the total supply of the ERC20 token. The balanceOf function returns the balance of the address passed as a argument. The transfer function transfers specified number of tokens from the sender to the specified receiver, provided the sender has sufficient balance. The approve function is used by the owner of some tokens (specified by the _from argument) to approve a delegate account to withdraw and spend some allowed number of tokens. The allowance function returns the current approved number of tokens by an owner to a specific delegate, as set in the approve function. The transferFrom function allows a delegate approved for withdrawal to transfer owner funds, provided the funds specified are less than or equal to the allowance of the delegate, and less than or equal to the owner’s balance. For our implementation of the ERC20 token, we add some features apart from the standard: The burn function allows the sender to burn some specified number of tokens, provided they have sufficient balance. Successful burning of tokens emits a Transfer event to address 0x000...000. The burnFrom function allows a delegate to burn some specified number of tokens from an account they have sufficient allowance from. Successful burning of tokens emits a Transfer event to address 0x000...000. The isMinter function allows anyone to check if the specified address has minting privileges (or has the minter role). The addMinter function allows the creator of the token to add an address as a minter. Successful addition emits a MinterAdded event. The removeMinter function allows the creator of the token to remove an address from the minter role. Successful removal emits a MinterRemoved event. The renounce function allows a minter to renounce their minting privileges. Successful renunciation emits a MinterRemoved event. The mint function allows a minter to mint an arbitrary amount of tokens and take ownership of those tokens. Successful minting emits a Transfer event with 0x000...000 as the from address. The _isMinter mapping maintains a mapping to identify whether an address has minting privileges or not. Implementation We make this contract in Solidity, and a simple way to start writing Ethereum contracts in Solidity is to use the Remix IDE It’s browser-based, no setup required. ","date":"Oct 13 2021","objectID":"/erc20/:1:0","tags":["ethereum","blockchain","solidity"],"title":"Making a Simple ERC20 Token","uri":"/erc20/"},{"categories":["blockchain"],"content":"Token Contract pragma solidity \u003e=0.7.0 \u003c0.9.0; import {SafeMath} from \"../lib/SafeMath.sol\"; contract AkshatToken { string public constant name = \"Akshat's Token\"; string public constant symbol = \"AKT\"; uint8 public constant decimals = 18; address public creator; uint256 _totalSupply; mapping(address =\u003e uint256) _balances; mapping(address =\u003e mapping(address =\u003e uint256)) _allowed; mapping(address =\u003e bool) _isMinter; event Transfer(address indexed from, address indexed to, uint256 indexed tokens); event Approval(address indexed owner, address indexed delegate, uint256 indexed tokens); event MinterAdded(address indexed minter, address indexed addedBy); event MinterRemoved(address indexed minter, address indexed removedBy); using SafeMath for uint256; modifier onlyCreator { require( msg.sender == creator, \"Only creator can call this function\" ); _; } modifier onlyMiner { require( msg.sender == creator || _isMinter[msg.sender], \"Only a minter or the creator can call this function\" ); _; } constructor(uint256 total) { _totalSupply = total; _balances[msg.sender] = total; creator = msg.sender; } function totalSupply() public view returns (uint256) { return _totalSupply; } function balanceOf(address owner) public view returns (uint256) { return _balances[owner]; } function allowance(address owner, address delegate) public view returns (uint256) { return _allowed[owner][delegate]; } function transfer(address to, uint256 tokens) public returns (bool) { require(tokens \u003c= _balances[msg.sender], \"Insufficient tokens\"); _balances[msg.sender] = _balances[msg.sender].sub(tokens); _balances[to] = _balances[to].add(tokens); emit Transfer(msg.sender, to, tokens); return true; } function approve(address delegate, uint256 tokens) public returns (bool) { _allowed[msg.sender][delegate] = tokens; emit Approval(msg.sender, delegate, tokens); return true; } function transferFrom(address from, address to, uint256 tokens) public returns (bool) { require(tokens \u003c= _allowed[from][msg.sender], \"Insufficient tokens approved for delegation\"); require(tokens \u003c= _balances[from], \"Insufficient tokens\"); _balances[from] = _balances[from].sub(tokens); _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokens); _balances[to] = _balances[to].add(tokens); emit Transfer(from, to, tokens); return true; } function burn(uint256 tokens) public returns (bool) { require(tokens \u003c= _balances[msg.sender], \"Insufficient tokens\"); _balances[msg.sender] = _balances[msg.sender].sub(tokens); _totalSupply = _totalSupply.sub(tokens); emit Transfer(msg.sender, address(0), tokens); return true; } function burnFrom(address from, uint256 tokens) public returns (bool) { require(tokens \u003c= _allowed[from][msg.sender], \"Insufficient tokens approved for delegation\"); require(tokens \u003c= _balances[from], \"Insufficient tokens\"); _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokens); _balances[from] = _balances[from].sub(tokens); _totalSupply = _totalSupply.sub(tokens); emit Transfer(from, address(0), tokens); return true; } function isMinter(address _address) public view returns (bool) { return _isMinter[_address]; } function addMinter(address _address) public onlyCreator returns (bool) { require(_isMinter[_address] == false, \"Already a minter\"); _isMinter[_address] = true; emit MinterAdded(_address, msg.sender); return true; } function removeMinter(address _address) public onlyCreator returns (bool) { require(_isMinter[_address] == true, \"Already not a minter\"); _isMinter[_address] = false; emit MinterRemoved(_address, msg.sender); return true; } function renounceMinter() public onlyMiner returns (bool) { _isMinter[msg.sender] = false; emit MinterRemoved(msg.sender, msg.sender); return true; } function mint(uint256 tokens) public onlyMiner returns (bool) { _balances[msg.sender] = _balances[msg.sender].add(tokens); _totalSupply = _totalSupply.add(tokens); emit Transfer(address(0), msg.sender, tokens); return true; } } ","date":"Oct 13 2021","objectID":"/erc20/:2:0","tags":["ethereum","blockchain","solidity"],"title":"Making a Simple ERC20 Token","uri":"/erc20/"},{"categories":["blockchain"],"content":"Token Vendor Contract To allow buying and selling tokens (for ether), we create a Vendor contract, that allows buyers and sellers of the tokens to call functions for the same. The payable buyTokens function allows the sender to send some ether in exchange for tokens. The sellTokens function allows the sender to sell the tokens for ether. Successful sale of tokens will require that the sender has delegated a minimum of that amount of tokens to the contract account using the approve function defined in the token contract, so that the Vendor contract can transfer the specified number of tokens on the sender’s behalf. pragma solidity \u003e=0.7.0 \u003c0.9.0; import {AkshatToken} from \"./AkshatToken.sol\"; import {SafeMath} from \"../lib/SafeMath.sol\"; contract AkshatTokenVendor { AkshatToken token; uint256 public tokensPerEth = 100; event BuyTokens(address buyer, uint256 eth, uint256 tokens); event SellTokens(address seller, uint256 eth, uint256 tokens); using SafeMath for uint256; constructor (address tokenAddress) { token = AkshatToken(tokenAddress); } receive() external payable {} function buyTokens() public payable returns (uint256) { require(msg.value \u003e 0, \"Insufficient ether sent\"); uint256 eth = msg.value / (1 ether); uint256 tokens = eth.mul(tokensPerEth); require(token.balanceOf(address(this)) \u003e= tokens, \"Vendor contract has insufficient tokens\"); bool sent = token.transfer(msg.sender, tokens); require(sent, \"Failure in transferring tokens\"); emit BuyTokens(msg.sender, msg.value, tokens); return tokens; } // requires delegation approval function sellTokens(uint256 tokens) public returns (bool) { require(tokens \u003e 0, \"Need to sell non-zero tokens\"); require(token.balanceOf(msg.sender) \u003e= tokens, \"Insufficient tokens\"); uint256 eth = tokens.div(tokensPerEth) * (1 ether); require(address(this).balance \u003e= eth, \"Vendor contract has insufficient ether\"); bool sent = token.transferFrom(msg.sender, address(this), tokens); require(sent, \"Failure in transferring tokens, check approval\"); (sent, ) = msg.sender.call{value: eth}(\"\"); require(sent, \"Failure in transferring ether\"); return true; } } We define arithmetic operations explicitly to secure our ERC20 Token from integer overflow attacks. We check for integer overflows while performing these operations. This logic is implemented in a separate library called SafeMath. pragma solidity \u003e=0.7.0 \u003c0.9.0; library SafeMath { function sub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b \u003c= a); return a - b; } function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c \u003e= a); return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, \"SafeMath: multiplication overflow\"); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { require(b \u003e 0); uint256 c = a / b; // assert(a == b * c + a % b); // There is no case in which this doesn't hold return c; } } Execution The following steps show how the contracts can be deployed, following a demonstration of the different functionalities coded in the contracts. We run a local Geth client running a private blockchain, and use the Remix IDE to call the contracts. First, we initialize a local test ethereum network using the genesis block given below, and start the node, allowing RPC CORS from Remix. Attach a console to the running geth client via IPC. Create three accounts, and start mining with one so that we can deploy a contract using that account. { \"config\": { \"chainId\": 2021, \"homesteadBlock\": 0, \"eip150Block\": 0, \"eip150Hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"eip155Block\": 0, \"eip158Block\": 0, \"byzantiumBlock\": 0, \"constantinopleBlock\": 0, \"petersburgBlock\": 0, \"istanbulBlock\": 0 }, \"nonce\": \"0x0000000000000042\", \"timestamp\": \"0x00\", \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"extraData\": \"0x00\", \"gasLimit\": \"0x4c4b4","date":"Oct 13 2021","objectID":"/erc20/:3:0","tags":["ethereum","blockchain","solidity"],"title":"Making a Simple ERC20 Token","uri":"/erc20/"},{"categories":["reading"],"content":"A list of articles, courses, books, videos  and any other things that I found personally interesting","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Here’s a list of articles, courses, books, videos, and any other things that I found personally interesting and went through them: ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:0","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Articles on Finance on Tickertape.in Call it a temporary whim, but I’ve been looking into Finance and Economics stuff (pardon me, I’ve never given it much attention before). Tickertape has a series of educational articles, directed towards concepts in economics and finance, and aims to provide a foundation for getting started in equity market investing. This series has four modules, and I’ve read the first one, Elementary Economics, which consists of the following articles: Intro to Macroeconomics Interest Rates \u0026 Forex Circular Flow Monetary Policy Deficits \u0026 Balance of Payments Fiscal Policy Now this is most likely very fundamental for most people, but frankly, it’s quite new for me, and I’m finding it really interesting so far! ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:1","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"MLOps Articles by Tezan Sahu I’ve been exploring Machine Learning and DevOps separately for the past few months, and I’ve heard about the buzz around MLOps, a field which brings the practice of Machine Learning into real-world production systems and processes. This series of articles seems very promising in teaching the principles of MLOps, by first explaining what the DevOps culture and principles are, relating them to MLOps, and also outlining what’s different. It then explains the ML workflow, and the principles that MLOps in particular advocates. A Gentle Introduction to MLOps ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:2","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Authentication system using Ethereum This article is a part of a trilogy of articles that introduce Ethereum and Smart Contracts, written by Sebastian Peyrott. Besides being a great introduction to Ethereum and Blockchain in general, it also has small projects that demonstrate the prospects of Blockchain, which includes an authentication system uses Ethereum to verify an individual’s identity. I came across this series thanks to a college assignment. However, the series is from 2017, so some of the code is deprecated. An Introduction to Ethereum and Smart Contracts: an Authentication Solution It’s also available as a PDF. ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:3","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Natural Language Processing As part of my Final Year project, I am currently studying NLP, and I went through these articles/courses, and found them worth sharing: The Illustrated Transformer by Jay Alammar: This article explains the Transformer model for sequence-to-sequence tasks NLP For You, a course by Lena Voita: A text-based course on the fundamental concepts on NLP, including Word Embeddings, Text Classification, Language Modeling, Seq2seq, Attention, Transformer and Transfer Learning - this is a treasure! CS224N: Natural Language Processing with Deep Learning is a MOOC with lectures available on YouTube Thanks to my friends Arnav Shah and Saharsh Jain for suggesting these resources! ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:4","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"A Project of One’s Own Probably a classic now, I came across this article by Paul Graham. Go ahead and read it for yourself! ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:5","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"How to Remember What You Read This great article by Farnam Street is something that I was thinking about for a long time before I actually googled this question and came across this article. ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:6","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["tools"],"content":"A guide to install TeX on Linux","date":"Sep 28 2021","objectID":"/tex-install-linux/","tags":["latex","linux","tools"],"title":"A Guide to Install TeX on Linux","uri":"/tex-install-linux/"},{"categories":["tools"],"content":"The Story Recently, I wanted to install a TeX system on my Ubuntu 20.04 PC. I tried installing MiKTeX after someone recommended it to me (thrice…), but I found myself unable to update TeX packages because of a cryptic SSL peer certificate error. I reported this in an issue to the MiKTeX repo, but was instead told that my system did not support MiKTeX. Great. Next, I tried to install TeX Live. It seemed simple enough, with a sudo apt install texlive. Can’t get any easier than this, right? So it turns out that the apt package for TeX Live is still the 2019 version. Now unfortunately, this meant that I again could not update packages, since tlmgr, TeX Live’s package manager could not verify the signature for a repository. I tried following this post on TeX Stack Exchange, but this didn’t work out. So I decided to ditch APT, and tried following the TeX Live Quick Install docs (which is probably I should have done first). But even in this method, the default mirror which was chosen was too slow, and for some reason, the default, recommended scheme to install TeX Live (called full scheme) installs around 5GB of TeX software - fonts, packages, et cetera. For someone beginning with TeX, this did not sit well with me. Enough with this rant, let me list down the steps that I followed to install TeX Live on my system. Note that there are most likely better methods/choices that one could use, but these steps worked for me. What is TeX? Simply said, TeX is a popular typesetting system, especially in academia, that enables one to write documents that involve a lot of formatting, mathematical equations, tables et cetera. It was made by ACM Turing Awardee Donald Knuth (who is a legend, by the way). TeX Live Installation TeX Live is a software distribution for TeX, and includes some programs, macros, packages and fonts. It has a package manager specifically for TeX packages, called tlmgr, that is used to install and update TeX packages. Download install-tl (the latest one, yay!) using this link. In case this gets changed, you can find the link in the docs (Do read the docs once before installing). Extract the contents from the .tar.gz file. Here’s how the contents look: Contents of the install-tl directoryContents of the install-tl directory \" Contents of the install-tl directory Run the install-tl Perl script as root. Note that the script does not require root permissions, but requires write access to the directory where it’s going to install, which by default is /usr/local. You can change the directory by looking at the prompts of the script. Note that you can run the installer in GUI mode by the -gui flag (which I would recommend if you’re doing this for the first time, but it requires Tcl to be installed). The --repository option specifies an explicit mirror to use. Try specifying some other mirrors if the default mirror seems too slow. In my case, the mirror provided by NUS (and I stay in Mumbai) was much better than the default one. sudo perl install-tl [-gui] [--repository \u003cURL\u003e] In case you get some error related to 'tlpdb' I came across the following error when I tried using an explicit mirror: install-tl: TLPDB::from_file could not initialize from: https://mirrors.dotsrc.org/ctan/tlpkg/texlive.tlpdb install-tl: Maybe the repository setting should be changed. install-tl: More info: https://tug.org/texlive/acquire.html Try appending systems/texlive/tlnet to the mirror URL when running the install-tl script. For example, sudo perl install-tl --repository https://download.nus.edu.sg/mirror/ctan/systems/texlive/tlnet After a few seconds, something similar to the following will be visible: install-tl script optionsinstall-tl script options \" install-tl script options If you scroll up, you can see the scheme selected by default for installation: \u003cS\u003e set installation scheme: scheme-full. Below that, you can see the number of collections and the space they’ll take: \u003cC\u003e set installation collections: 40 collections out of 41, disk space require","date":"Sep 28 2021","objectID":"/tex-install-linux/:0:0","tags":["latex","linux","tools"],"title":"A Guide to Install TeX on Linux","uri":"/tex-install-linux/"},{"categories":null,"content":"Akshat Shah That’s me!\" That’s me! With a keen interest in programming and software, I am looking forward to improve my skills and work on projects and problems in the fields of Full Stack Web Development, DevOps and Machine Learning. Besides these, you’ll find me active on competitive programming websites and venturing into the sport of CTFs. You can see some of my projects here. I graduated with a Bachelors in Technology (Information Technology) from VJTI, Mumbai, in June 2022. I’m currently a Software Engineer at Wells Fargo, Bengaluru. In my free time, I like to read, write and listen to my unvarying playlist of music. I’m always in for a good, meaningful movie or TV show, and I like to try my luck at badminton and carrom! You can view my resume by clicking here. Experience ","date":"Aug 28 2021","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Wells Fargo Software Engineer, July 2023 - Present Program Associate (Technology), July 2022 - July 2023 Part of the Auto Lending Technology Division under Consumer Technology Working in key modernization and resiliency initiatives involving microservices architecture Contributing to key POCs involving ML-based automation Working with .NET Core, Python, MongoDB, Helm-Kubernetes ","date":"Aug 28 2021","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Wells Fargo Intern, April - July 2021 Constructed a microservice architecture involving Node (Express), Python (Flask), Elasticsearch with a team Built a client interface using React Worked on functionality requiring NLP ","date":"Aug 28 2021","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"CoE - CNDS Intern, April - May 2021 Worked on the front end of a Capture The Flag website using React ","date":"Aug 28 2021","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Community of Coders, VJTI Member, 2019 - Present React Website Contributor Magazine Contributor and Curator Workshop Instructor for Web Workshop 2020 and CLI Workshop 2020 Project Mentor as part of Inheritance, CoC’s Summer Project program for First Year students ","date":"Aug 28 2021","objectID":"/about/:4:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Society of Robotics and Automation, VJTI Member, 2018-2020 Workshop Instructor for the Wall-E Workshop 2019 Education ","date":"Aug 28 2021","objectID":"/about/:5:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Veermata Jijabai Technological Institute August 2018 - May 2022, Mumbai Bachelor of Technology (BTech) in Information Technology CGPA: 9.21 ","date":"Aug 28 2021","objectID":"/about/:6:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Kishinchand Chellaram College July 2016 - May 2018, Mumbai Higher Secondary Education (HSC) in Science with Bifocal Computer Science Score: 95.69% aggregate Stood at the first rank across all streams in the college ","date":"Aug 28 2021","objectID":"/about/:7:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Bright Start Fellowship International School April 2006 - May 2016, Mumbai International General Certificate of Secondary Education (IGCSE) Grades: 7 A*, 1 A Stood at the first rank in school Skills and Tech My academic courses included the core subjects of Computer Science, like Data Structures and Algorithms, Operating Systems, Database Management Systems and Computer Networks. Along with these, notable courses include System Administration, Machine Learning, Blockchain Technology, Software Engineering and Object Oriented Analysis and Design. I’m proficient in C++, JavaScript and Python, and familiar with Java. Having done many projects in Web Development, I’m fluent in languages and web frameworks, including HTML, CSS, JavaScript, NodeJS, ReactJS, TailwindCSS, Flask and Express JS. I have worked with SQL databases like PostgreSQL, as well as with NoSQL databases like MongoDB, Firebase Realtime Database and Neo4J. Apart from Web Development, I have done a few native Android Development projects using Java and Kotlin, and have had a stint of dabbling in Robotics in my First Year. In the past year I have studied Machine Learning, Deep Learning and Natural Language Processing, practising on problems using Scikit-learn and PyTorch. Currently, I am learning about the design and development of applications using .NET Core and related tools, focusing on the principles of software development and clean and maintainable code. ","date":"Aug 28 2021","objectID":"/about/:8:0","tags":null,"title":"About","uri":"/about/"},{"categories":["coding-problems"],"content":"Given an array of integers, find the first missing positive integer in linear time and constant space.","date":"Mar 1 2021","objectID":"/dcp-4/","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. ","date":"Mar 1 2021","objectID":"/dcp-4/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"The Question Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well. You can solve this question on LeetCode. ","date":"Mar 1 2021","objectID":"/dcp-4/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Solutions ","date":"Mar 1 2021","objectID":"/dcp-4/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Use a set to mark presence A simple way (albeit requiring linear auxiliary space) is to traverse through the given array, and mark all the positive number present in the array as present using an ordered set. Then we iterate through the ordered set or from 1 to n, the size of the array and report the first missing number. If there is no missing number found by the time we finish, then the first missing positive integer is the n + 1. The following pseudocode assumes 1-based indexing. set = an ordered set for i in a { if i \u003e 0 set.insert(i) } j = 1 for i in set { if i != j return j j = j + 1 } return j This is a O(nlogn) time solution, and has O(n) space complexity. ","date":"Mar 1 2021","objectID":"/dcp-4/:2:1","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Sort the array The need for finding the first missing positive integer hints that sorting can be useful here. We can simply sort the array and then find the first positive element. We start traversing from 1 until we find a break in the natural numbers sequence, or we reach the end of the array, ultimately finding the required integer. sort(a) i = 0 while (i \u003c n \u0026\u0026 nums[i] \u003c= 0) { i = i + 1 } if i == n { return 1 } j = 1 while (i \u003c n \u0026\u0026 j \u003c= n) { if (nums[i] \u003e j) { return j } while (i \u003c n \u0026\u0026 nums[i] == j) { i = i + 1 } j = j + 1 } return j The time complexity of this solution is O(nlogn), while the space complexity is O(1). ","date":"Mar 1 2021","objectID":"/dcp-4/:2:2","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Put elements where they belong The question mentions that we can modify the array in place! And since we have to find the first missing positive integer, we can simply follow the same principle of “marking presence” but use the given array itself, instead of the set. To see why this would work, say the first missing positive integer is x. To find x, we need all elements from 1 to x-1 to be placed in their correct positions. For any “large” numbers (that is, numbers greater than the size of the array), we can simply ignore them, because x has to be in the range [1, n+1]. Think about it. So when we encounter some element of the array that is positive and less than or equal to n, we put it at its correct place, that’s the position indexed by the element. So we place 1 at 1, 2 at 2, and so on. If an element y is already at position y, then we simply move forward, else we try to move it to position y. But this would mean replacing other elements. Note that if the elements getting replaced are negative, zero or more than n, then we don’t need to worry about them. However, if the element that will be replaced is a valid number, then we can swap the two elements instead of replacing them, and not moving forward for this case, since we need to process the swapped element too. For handling duplicates, we change y to -1 (or any other invalid number) if there’s already a y at position y, so that it can be potentially replaced by another number that should be at the current position. The conditions are a little tricky, so make note of them. For finding the first missing positive integer, we simply iterate through the array again and check for the first position that doesn’t match the value at that position. for i from 1 to n { if a[i] \u003c= 0 or a[i] \u003e n a[i] = -1 else if a[i] == i continue else if a[a[i]] == a[i] a[i] = -1 else { swap(a[i], a[a[i]]) i = i - 1 } } for i from 1 to n { if a[i] != i return i } return n+1 This solution has O(n) time complexity and O(1) extra space (it modifies the input array). You can find the C++ implementation here. ","date":"Mar 1 2021","objectID":"/dcp-4/:2:3","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Design an algorithm to serialize and deserialize a binary tree.","date":"Mar 1 2021","objectID":"/dcp-3/","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. ","date":"Mar 1 2021","objectID":"/dcp-3/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"The Question Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. You can solve this question on LeetCode ","date":"Mar 1 2021","objectID":"/dcp-3/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"Solutions ","date":"Mar 1 2021","objectID":"/dcp-3/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"Recursion! We can use preorder traversal of a tree to encode it as a string. We start with the root, encode it, and then move on to the left subtree and serialize it, then move on to the right tree and serialize it. The base case will be when we call the recursive function for a child of a leaf node, we can encode it as “null”. fun serialize(root) if root is null then return \"null\" return str(root-\u003eval) + \",\" + serialize(root-\u003eleft) + \",\" + serialize(root-\u003eright) For deserializing a string of the type formed by serialize, we can again make use of the preorder traversal, since we know that is the order in which the serialized string was built. First, we can split the string by its delimiter (a comma, in this case) to get a list of nodes (including null nodes) and then traverse the list, while we build the tree in preorder traversal. We do this by keeping the pointer of the list common across all recursive calls, and each recursive call builds a subtree, in preorder. Whenever we hit a null element in the list, we simply return null. fun deserialize(tree) nodes = tree.split(\",\") i = 0 root = buildTree(nodes, i) return root fun buildTree(nodes, i) if nodes[i] == \"null\" then return null else root = Node(int(root)) i = i + 1 root.left = buildTree(nodes, i) i = i + 1 root.right = buildTree(nodes, i) return root You can find the Python implementation here. This can be implemented in C++ easily too, but right now I’m a little lazy to write out the split function :-). ","date":"Mar 1 2021","objectID":"/dcp-3/:2:1","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"Given a list of numbers and a number `k`, return whether any two numbers from the list add up to `k`.","date":"Jan 21 2021","objectID":"/dcp-1/","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. The Question Given a list of numbers and a number k, return whether any two numbers from the list add up to k. Examples [1, 2, 3], k = 4 Yes, since 1+3 = 4 [10, 15, 3, 7], k=17 Yes, since 10+7 = 17 [5, 4, 7, 12, 1], k = 2 No Solutions ","date":"Jan 21 2021","objectID":"/dcp-1/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":"Brute force A simple solution would be to iterate over all possible pairs in the array and checking if a pair adds up to k. for i from 0 to n-1: for j from i+1 to n-1: if a[i] + a[j] == k: return true return false This will involve n(n+1)/2 steps, so the time complexity will be O(n^2), and O(1) space complexity. ","date":"Jan 21 2021","objectID":"/dcp-1/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":"Sorting and two-pointer approach We can sort the array and use two pointers, front (starting from 0) and end (starting from n-1): If the elements pointed to currently sum up to k, then return true If the sum is less than k, increment the front pointer, since we need to increase the sum and the array is sorted. Symmetrically, if the sum is more than k, decrement the end pointer. We repeat this until front and end cross each other. sort(a) front = 0, end = n-1 while front \u003c end: if a[front] + a[end] == k: return true else if a[front] + a[end] \u003c k: front = front + 1 else end = end - 1 return false Since we are sorting an array (O(nlogn)) and looping with the front and end pointers (O(n)), the overall time complexity of this solution is (O(nlogn)). The space complexity is (O(1)). You can find the implementation of this solution here If we are required to return the indices, the sorting approach cannot be used directly. We will have to make an array of pairs of (val, index) and then sort this array. ","date":"Jan 21 2021","objectID":"/dcp-1/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":"Using a set or map We can iterate through the array and keep adding the elements to a set (or hashset, map or hashmap), and for every element, check if the set contains (k-a[i]). If we find this condition to be true, then there exists a pair that adds up to k: the current a[i] and the entry in the set, k-a[i]. set m for i from 0 to n-1: if m.has(k-a[i]): return true m.add(a[i]) return false We are making a single pass through the array, finding whether a number exists in the set, and adding an element to the set. If we are using a BST implementation of set (C++ set or map) then the time complexity will be O(nlogn), since every insert/find operation takes O(logn) time. If we use a hashset or hashmap (C++ unordered_set or unordered_map) then the time complexity will be O(n), since insert/find operation can be done in constant time. You can find the implementation of this solution here If we are required to return indices of these elements, then need to use a map or hashmap, with the key-value pairs as (value, index). ","date":"Jan 21 2021","objectID":"/dcp-1/:3:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"}]