<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>blockchain - Category - Akshat Shah</title><link>http://akshatshah21.github.io/categories/blockchain/</link><description>blockchain - Category - Akshat Shah</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>akshatshah_21@yahoo.in (Akshat Shah)</managingEditor><webMaster>akshatshah_21@yahoo.in (Akshat Shah)</webMaster><lastBuildDate>Wed, 13 Oct 2021 22:07:20 +0530</lastBuildDate><atom:link href="http://akshatshah21.github.io/categories/blockchain/" rel="self" type="application/rss+xml"/><item><title>Making a Simple ERC20 Token</title><link>http://akshatshah21.github.io/erc20/</link><pubDate>Wed, 13 Oct 2021 22:07:20 +0530</pubDate><author>Author</author><guid>http://akshatshah21.github.io/erc20/</guid><description><![CDATA[<p>In this blog post, I&rsquo;ll walk through creating a simple ERC20 token on Ethereum. This was one of my lab assignments this semester, and I thought I better make a blog post about this, because <del>I want to write consistently over here</del> why not?</p>
<p>A token in general is basically simply a digital representation of
potentially anything. For example, a token can represent:</p>
<ul>
<li>
<p>reputation points in an online platform</p>
</li>
<li>
<p>skills of a character in a game</p>
</li>
<li>
<p>lottery tickets</p>
</li>
<li>
<p>financial assets like a share in a company</p>
</li>
<li>
<p>a fiat currency like USD</p>
</li>
<li>
<p>an ounce of gold</p>
</li>
</ul>
<p>A token can also represent access rights to a blockchain or blockchain
app, and tokens can also be used to automate &quot;friction points&quot; in
various industries.</p>
<p>Utility tokens, are tokens that have a specific &quot;use&quot; on the
blockchain or an app based on that. Utility tokens are also called &quot;app
coins&quot; because they are explicitly designed for a certain app or
blockchain.</p>
<h1 id="erc20-standard">ERC20 Standard</h1>
<p>The ERC-20 (<a href="https://eips.ethereum.org/EIPS/eip-20" target="_blank" rel="noopener noreffer">Ethereum Request for Comments 20</a>), proposed by Fabian
Vogelsteller in November 2015, is a Token Standard that implements an
API for tokens within Smart Contracts. The motivation for this EIP was
to make &quot;a standard interface allows any tokens on Ethereum to be
re-used by other applications: from wallets to decentralized
exchanges.&quot;</p>
<p>It provides functionalities like transfering tokens from one account to
another, to get the current token balance of an account and also the
total supply of the token available on the network. Besides these it can allow an owner of some tokens to approve spending those tokens by a third party account.</p>
<h2 id="methods-and-events-defined-in-erc20">Methods and Events Defined in ERC20</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="kd">function</span> <span class="nf">name</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span>

<span class="kd">function</span> <span class="nf">symbol</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span>

<span class="kd">function</span> <span class="nf">decimals</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint8</span><span class="p">)</span>

<span class="kd">function</span> <span class="nf">totalSupply</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span>

<span class="kd">function</span> <span class="nf">balanceOf</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="nb">balance</span><span class="p">)</span>

<span class="kd">function</span> <span class="nf">transfer</span><span class="p">(</span><span class="kt">address</span> <span class="n">_to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_value</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span> <span class="n">success</span><span class="p">)</span>

<span class="kd">function</span> <span class="nf">transferFrom</span><span class="p">(</span><span class="kt">address</span> <span class="n">_from</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_value</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span> <span class="n">success</span><span class="p">)</span>

<span class="kd">function</span> <span class="nf">approve</span><span class="p">(</span><span class="kt">address</span> <span class="n">_spender</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_value</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span> <span class="n">success</span><span class="p">)</span>

<span class="kd">function</span> <span class="nf">allowance</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">,</span> <span class="kt">address</span> <span class="n">_spender</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="n">remaining</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>The <code>name</code>, <code>symbol</code>, <code>decimals</code> are state
constants that identify the ERC20 token and the number of decimal
places used for user representation.</p>
</li>
<li>
<p>The <code>totalSupply</code> function returns the total supply of the
ERC20 token.</p>
</li>
<li>
<p>The <code>balanceOf</code> function returns the balance of the address
passed as a argument.</p>
</li>
<li>
<p>The <code>transfer</code> function transfers specified number of tokens
from the sender to the specified receiver, provided the sender has
sufficient balance.</p>
</li>
<li>
<p>The <code>approve</code> function is used by the owner of some tokens
(specified by the <code>_from</code> argument) to approve a delegate
account to withdraw and spend some allowed number of tokens.</p>
</li>
<li>
<p>The <code>allowance</code> function returns the current approved number
of tokens by an owner to a specific delegate, as set in the approve
function.</p>
</li>
<li>
<p>The <code>transferFrom</code> function allows a delegate approved for
withdrawal to transfer owner funds, provided the funds specified are
less than or equal to the allowance of the delegate, and less than
or equal to the owner&rsquo;s balance.</p>
</li>
</ul>
<p>For our implementation of the ERC20 token, we add some features apart
from the standard:</p>
<ul>
<li>
<p>The <code>burn</code> function allows the sender to burn some specified
number of tokens, provided they have sufficient balance. Successful
burning of tokens emits a <code>Transfer</code> event to address
0x000...000.</p>
</li>
<li>
<p>The <code>burnFrom</code> function allows a delegate to burn some
specified number of tokens from an account they have sufficient
allowance from. Successful burning of tokens emits a
<code>Transfer</code> event to address 0x000...000.</p>
</li>
<li>
<p>The <code>isMinter</code> function allows anyone to check if the
specified address has minting privileges (or has the minter role).</p>
</li>
<li>
<p>The <code>addMinter</code> function allows the creator of the token to
add an address as a minter. Successful addition emits a
<code>MinterAdded</code> event.</p>
</li>
<li>
<p>The <code>removeMinter</code> function allows the creator of the token
to remove an address from the minter role. Successful removal emits
a <code>MinterRemoved</code> event.</p>
</li>
<li>
<p>The <code>renounce</code> function allows a minter to renounce their
minting privileges. Successful renunciation emits a
<code>MinterRemoved</code> event.</p>
</li>
<li>
<p>The <code>mint</code> function allows a minter to mint an arbitrary
amount of tokens and take ownership of those tokens. Successful
minting emits a <code>Transfer</code> event with 0x000...000 as the
from address.</p>
</li>
<li>
<p>The <code>_isMinter</code> mapping maintains a mapping to identify
whether an address has minting privileges or not.</p>
</li>
</ul>
<h1 id="implementation">Implementation</h1>
<p>We make this contract in <a href="https://soliditylang.org/" target="_blank" rel="noopener noreffer">Solidity</a>, and a simple way to start writing Ethereum contracts in Solidity is to use the <a href="https://remix.ethereum.org" target="_blank" rel="noopener noreffer">Remix IDE</a> It&rsquo;s browser-based, no setup required.</p>
<h2 id="token-contract">Token Contract</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="k">pragma solidity</span> <span class="o">&gt;=</span><span class="mi">0</span><span class="p">.</span><span class="mi">7</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
<span class="kn">import</span> <span class="p">{</span><span class="n">SafeMath</span><span class="p">}</span> <span class="k">from</span> <span class="s">&#34;../lib/SafeMath.sol&#34;</span><span class="p">;</span>

<span class="kd">contract</span> <span class="nc">AkshatToken</span> <span class="p">{</span>
    
    <span class="kt">string</span> <span class="k">public</span> <span class="k">constant</span> <span class="nb">name</span> <span class="o">=</span> <span class="s">&#34;Akshat&#39;s Token&#34;</span><span class="p">;</span>
    <span class="kt">string</span> <span class="k">public</span> <span class="k">constant</span> <span class="n">symbol</span> <span class="o">=</span> <span class="s">&#34;AKT&#34;</span><span class="p">;</span>
    <span class="kt">uint8</span> <span class="k">public</span> <span class="k">constant</span> <span class="n">decimals</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
    <span class="kt">address</span> <span class="k">public</span> <span class="n">creator</span><span class="p">;</span>
    
    <span class="kt">uint256</span> <span class="n">_totalSupply</span><span class="p">;</span>
    <span class="kd">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">uint256</span><span class="p">)</span> <span class="n">_balances</span><span class="p">;</span>
    <span class="kd">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kd">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">uint256</span><span class="p">))</span> <span class="n">_allowed</span><span class="p">;</span>
    <span class="kd">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">bool</span><span class="p">)</span> <span class="n">_isMinter</span><span class="p">;</span>
    
    <span class="kd">event</span> <span class="nc">Transfer</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="k">from</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">tokens</span><span class="p">);</span>
    <span class="kd">event</span> <span class="nc">Approval</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="n">owner</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">delegate</span><span class="p">,</span> <span class="kt">uint256</span> <span class="k">indexed</span> <span class="n">tokens</span><span class="p">);</span>
    <span class="kd">event</span> <span class="nc">MinterAdded</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="n">minter</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">addedBy</span><span class="p">);</span>
    <span class="kd">event</span> <span class="nc">MinterRemoved</span><span class="p">(</span><span class="kt">address</span> <span class="k">indexed</span> <span class="n">minter</span><span class="p">,</span> <span class="kt">address</span> <span class="k">indexed</span> <span class="n">removedBy</span><span class="p">);</span>
    
    <span class="kn">using</span> <span class="n">SafeMath</span> <span class="k">for</span> <span class="kt">uint256</span><span class="p">;</span>
    
    <span class="kd">modifier</span> <span class="nf">onlyCreator</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span>
            <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span> <span class="o">==</span> <span class="n">creator</span><span class="p">,</span>
            <span class="s">&#34;Only creator can call this function&#34;</span>
        <span class="p">);</span>
        <span class="k">_</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">modifier</span> <span class="nf">onlyMiner</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span>
            <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span> <span class="o">==</span> <span class="n">creator</span> <span class="o">||</span> <span class="n">_isMinter</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">],</span>
            <span class="s">&#34;Only a minter or the creator can call this function&#34;</span>
        <span class="p">);</span>
        <span class="k">_</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">constructor</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">total</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_totalSupply</span> <span class="o">=</span> <span class="n">total</span><span class="p">;</span>
        <span class="n">_balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">total</span><span class="p">;</span>
        <span class="n">creator</span> <span class="o">=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">totalSupply</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_totalSupply</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">balanceOf</span><span class="p">(</span><span class="kt">address</span> <span class="n">owner</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_balances</span><span class="p">[</span><span class="n">owner</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">allowance</span><span class="p">(</span><span class="kt">address</span> <span class="n">owner</span><span class="p">,</span> <span class="kt">address</span> <span class="n">delegate</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_allowed</span><span class="p">[</span><span class="n">owner</span><span class="p">][</span><span class="n">delegate</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">transfer</span><span class="p">(</span><span class="kt">address</span> <span class="n">to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">tokens</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">tokens</span> <span class="o">&lt;=</span> <span class="n">_balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">],</span> <span class="s">&#34;Insufficient tokens&#34;</span><span class="p">);</span>
        <span class="n">_balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">_balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">].</span><span class="n">sub</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">_balances</span><span class="p">[</span><span class="n">to</span><span class="p">]</span> <span class="o">=</span> <span class="n">_balances</span><span class="p">[</span><span class="n">to</span><span class="p">].</span><span class="n">add</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">emit</span> <span class="n">Transfer</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">tokens</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">approve</span><span class="p">(</span><span class="kt">address</span> <span class="n">delegate</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">tokens</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_allowed</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">][</span><span class="n">delegate</span><span class="p">]</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">;</span>
        <span class="n">emit</span> <span class="n">Approval</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">,</span> <span class="n">delegate</span><span class="p">,</span> <span class="n">tokens</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">transferFrom</span><span class="p">(</span><span class="kt">address</span> <span class="k">from</span><span class="p">,</span> <span class="kt">address</span> <span class="n">to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">tokens</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">tokens</span> <span class="o">&lt;=</span> <span class="n">_allowed</span><span class="p">[</span><span class="k">from</span><span class="p">][</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">],</span> <span class="s">&#34;Insufficient tokens approved for delegation&#34;</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">tokens</span> <span class="o">&lt;=</span> <span class="n">_balances</span><span class="p">[</span><span class="k">from</span><span class="p">],</span> <span class="s">&#34;Insufficient tokens&#34;</span><span class="p">);</span>
        <span class="n">_balances</span><span class="p">[</span><span class="k">from</span><span class="p">]</span> <span class="o">=</span> <span class="n">_balances</span><span class="p">[</span><span class="k">from</span><span class="p">].</span><span class="n">sub</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">_allowed</span><span class="p">[</span><span class="k">from</span><span class="p">][</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">_allowed</span><span class="p">[</span><span class="k">from</span><span class="p">][</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">].</span><span class="n">sub</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">_balances</span><span class="p">[</span><span class="n">to</span><span class="p">]</span> <span class="o">=</span> <span class="n">_balances</span><span class="p">[</span><span class="n">to</span><span class="p">].</span><span class="n">add</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">emit</span> <span class="n">Transfer</span><span class="p">(</span><span class="k">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">tokens</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">burn</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">tokens</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">tokens</span> <span class="o">&lt;=</span> <span class="n">_balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">],</span> <span class="s">&#34;Insufficient tokens&#34;</span><span class="p">);</span>
        <span class="n">_balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">_balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">].</span><span class="n">sub</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">_totalSupply</span> <span class="o">=</span> <span class="n">_totalSupply</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">emit</span> <span class="n">Transfer</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">,</span> <span class="kt">address</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">tokens</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">burnFrom</span><span class="p">(</span><span class="kt">address</span> <span class="k">from</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">tokens</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">tokens</span> <span class="o">&lt;=</span> <span class="n">_allowed</span><span class="p">[</span><span class="k">from</span><span class="p">][</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">],</span> <span class="s">&#34;Insufficient tokens approved for delegation&#34;</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">tokens</span> <span class="o">&lt;=</span> <span class="n">_balances</span><span class="p">[</span><span class="k">from</span><span class="p">],</span> <span class="s">&#34;Insufficient tokens&#34;</span><span class="p">);</span>
        <span class="n">_allowed</span><span class="p">[</span><span class="k">from</span><span class="p">][</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">_allowed</span><span class="p">[</span><span class="k">from</span><span class="p">][</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">].</span><span class="n">sub</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">_balances</span><span class="p">[</span><span class="k">from</span><span class="p">]</span> <span class="o">=</span> <span class="n">_balances</span><span class="p">[</span><span class="k">from</span><span class="p">].</span><span class="n">sub</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">_totalSupply</span> <span class="o">=</span> <span class="n">_totalSupply</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">emit</span> <span class="n">Transfer</span><span class="p">(</span><span class="k">from</span><span class="p">,</span> <span class="kt">address</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">tokens</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">isMinter</span><span class="p">(</span><span class="kt">address</span> <span class="n">_address</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_isMinter</span><span class="p">[</span><span class="n">_address</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">addMinter</span><span class="p">(</span><span class="kt">address</span> <span class="n">_address</span><span class="p">)</span> <span class="k">public</span> <span class="n">onlyCreator</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">_isMinter</span><span class="p">[</span><span class="n">_address</span><span class="p">]</span> <span class="o">==</span> <span class="kc">false</span><span class="p">,</span> <span class="s">&#34;Already a minter&#34;</span><span class="p">);</span>
        <span class="n">_isMinter</span><span class="p">[</span><span class="n">_address</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="n">emit</span> <span class="n">MinterAdded</span><span class="p">(</span><span class="n">_address</span><span class="p">,</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">removeMinter</span><span class="p">(</span><span class="kt">address</span> <span class="n">_address</span><span class="p">)</span> <span class="k">public</span> <span class="n">onlyCreator</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">_isMinter</span><span class="p">[</span><span class="n">_address</span><span class="p">]</span> <span class="o">==</span> <span class="kc">true</span><span class="p">,</span> <span class="s">&#34;Already not a minter&#34;</span><span class="p">);</span>
        <span class="n">_isMinter</span><span class="p">[</span><span class="n">_address</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="n">emit</span> <span class="n">MinterRemoved</span><span class="p">(</span><span class="n">_address</span><span class="p">,</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">renounceMinter</span><span class="p">()</span> <span class="k">public</span> <span class="n">onlyMiner</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_isMinter</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="n">emit</span> <span class="n">MinterRemoved</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">,</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">mint</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">tokens</span><span class="p">)</span> <span class="k">public</span> <span class="n">onlyMiner</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">_balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">].</span><span class="n">add</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">_totalSupply</span> <span class="o">=</span> <span class="n">_totalSupply</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">tokens</span><span class="p">);</span>
        <span class="n">emit</span> <span class="n">Transfer</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">,</span> <span class="n">tokens</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="token-vendor-contract">Token Vendor Contract</h2>
<p>To allow buying and selling tokens (for ether), we create a Vendor
contract, that allows buyers and sellers of the tokens to call functions
for the same.</p>
<ul>
<li>
<p>The payable <code>buyTokens</code> function allows the sender to send
some ether in exchange for tokens.</p>
</li>
<li>
<p>The <code>sellTokens</code> function allows the sender to sell the
tokens for ether. Successful sale of tokens will require that the
sender has delegated a minimum of that amount of tokens to the
contract account using the <code>approve</code> function defined in the
token contract, so that the Vendor contract can transfer the
specified number of tokens on the sender&rsquo;s behalf.</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="k">pragma solidity</span> <span class="o">&gt;=</span><span class="mi">0</span><span class="p">.</span><span class="mi">7</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="kn">import</span> <span class="p">{</span><span class="n">AkshatToken</span><span class="p">}</span> <span class="k">from</span> <span class="s">&#34;./AkshatToken.sol&#34;</span><span class="p">;</span>
<span class="kn">import</span> <span class="p">{</span><span class="n">SafeMath</span><span class="p">}</span> <span class="k">from</span> <span class="s">&#34;../lib/SafeMath.sol&#34;</span><span class="p">;</span>

<span class="kd">contract</span> <span class="nc">AkshatTokenVendor</span> <span class="p">{</span>
    <span class="n">AkshatToken</span> <span class="n">token</span><span class="p">;</span>
    <span class="kt">uint256</span> <span class="k">public</span> <span class="n">tokensPerEth</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    
    <span class="kd">event</span> <span class="nc">BuyTokens</span><span class="p">(</span><span class="kt">address</span> <span class="n">buyer</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">eth</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">tokens</span><span class="p">);</span>
    <span class="kd">event</span> <span class="nc">SellTokens</span><span class="p">(</span><span class="kt">address</span> <span class="n">seller</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">eth</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">tokens</span><span class="p">);</span>
    
    <span class="kn">using</span> <span class="n">SafeMath</span> <span class="k">for</span> <span class="kt">uint256</span><span class="p">;</span>
    
    <span class="kd">constructor</span> <span class="p">(</span><span class="kt">address</span> <span class="n">tokenAddress</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">token</span> <span class="o">=</span> <span class="n">AkshatToken</span><span class="p">(</span><span class="n">tokenAddress</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="n">receive</span><span class="p">()</span> <span class="k">external</span> <span class="k">payable</span> <span class="p">{}</span>
    
    <span class="kd">function</span> <span class="nf">buyTokens</span><span class="p">()</span> <span class="k">public</span> <span class="k">payable</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">value</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;Insufficient ether sent&#34;</span><span class="p">);</span>
        <span class="kt">uint256</span> <span class="n">eth</span> <span class="o">=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">value</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="kc">ether</span><span class="p">);</span>
        <span class="kt">uint256</span> <span class="n">tokens</span> <span class="o">=</span> <span class="n">eth</span><span class="p">.</span><span class="n">mul</span><span class="p">(</span><span class="n">tokensPerEth</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">token</span><span class="p">.</span><span class="n">balanceOf</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="n">tokens</span><span class="p">,</span> <span class="s">&#34;Vendor contract has insufficient tokens&#34;</span><span class="p">);</span>
        <span class="kt">bool</span> <span class="n">sent</span> <span class="o">=</span> <span class="n">token</span><span class="p">.</span><span class="nb">transfer</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">,</span> <span class="n">tokens</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">sent</span><span class="p">,</span> <span class="s">&#34;Failure in transferring tokens&#34;</span><span class="p">);</span>
        <span class="n">emit</span> <span class="n">BuyTokens</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">,</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">value</span><span class="p">,</span> <span class="n">tokens</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">tokens</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="c1">// requires delegation approval
</span><span class="c1"></span>    <span class="kd">function</span> <span class="nf">sellTokens</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">tokens</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">tokens</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;Need to sell non-zero tokens&#34;</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">token</span><span class="p">.</span><span class="n">balanceOf</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">tokens</span><span class="p">,</span> <span class="s">&#34;Insufficient tokens&#34;</span><span class="p">);</span>
        <span class="kt">uint256</span> <span class="n">eth</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">.</span><span class="n">div</span><span class="p">(</span><span class="n">tokensPerEth</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="kc">ether</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">).</span><span class="nb">balance</span> <span class="o">&gt;=</span> <span class="n">eth</span><span class="p">,</span> <span class="s">&#34;Vendor contract has insufficient ether&#34;</span><span class="p">);</span>
        <span class="kt">bool</span> <span class="n">sent</span> <span class="o">=</span> <span class="n">token</span><span class="p">.</span><span class="n">transferFrom</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">,</span> <span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">),</span> <span class="n">tokens</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">sent</span><span class="p">,</span> <span class="s">&#34;Failure in transferring tokens, check approval&#34;</span><span class="p">);</span>
        <span class="p">(</span><span class="n">sent</span><span class="p">,</span> <span class="p">)</span> <span class="o">=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">.</span><span class="nb">call</span><span class="p">{</span><span class="nb">value</span><span class="o">:</span> <span class="n">eth</span><span class="p">}(</span><span class="s">&#34;&#34;</span><span class="p">);</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">sent</span><span class="p">,</span> <span class="s">&#34;Failure in transferring ether&#34;</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>We define arithmetic operations explicitly to secure our ERC20 Token
from integer overflow attacks. We check for integer overflows while
performing these operations. This logic is implemented in a separate
library called <code>SafeMath</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="k">pragma solidity</span> <span class="o">&gt;=</span><span class="mi">0</span><span class="p">.</span><span class="mi">7</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="kd">library</span> <span class="n">SafeMath</span> <span class="p">{</span>
    <span class="kd">function</span> <span class="nf">sub</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">a</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">b</span><span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">assert</span><span class="p">(</span><span class="n">b</span> <span class="o">&lt;=</span> <span class="n">a</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">a</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">b</span><span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">uint256</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
        <span class="nb">assert</span><span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="n">a</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">mul</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">a</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">b</span><span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kt">uint256</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">c</span> <span class="o">/</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">,</span> <span class="s">&#34;SafeMath: multiplication overflow&#34;</span><span class="p">);</span>

        <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kd">function</span> <span class="nf">div</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">a</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">b</span><span class="p">)</span> <span class="k">internal</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">require</span><span class="p">(</span><span class="n">b</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
        <span class="kt">uint256</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span><span class="p">;</span>
        <span class="c1">// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold
</span><span class="c1"></span>
        <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><h1 id="execution">Execution</h1>
<p>The following steps show how the contracts can be deployed, following a
demonstration of the different functionalities coded in the contracts.
We run a local <a href="https://geth.ethereum.org/" target="_blank" rel="noopener noreffer">Geth</a> client running a private blockchain, and use the Remix IDE to call the contracts.</p>
<ol>
<li>
<p>First, we initialize a local test ethereum network using the genesis
block given below, and start the node, allowing RPC CORS from Remix.
Attach a console to the running geth client via IPC. Create three
accounts, and start mining with one so that we can deploy a contract
using that account.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span> 
    <span class="nt">&#34;config&#34;</span><span class="p">:</span> <span class="p">{</span> 
        <span class="nt">&#34;chainId&#34;</span><span class="p">:</span> <span class="mi">2021</span><span class="p">,</span> 
        <span class="nt">&#34;homesteadBlock&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> 
        <span class="nt">&#34;eip150Block&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> 
        <span class="nt">&#34;eip150Hash&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span><span class="p">,</span>
        <span class="nt">&#34;eip155Block&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> 
        <span class="nt">&#34;eip158Block&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;byzantiumBlock&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;constantinopleBlock&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;petersburgBlock&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;istanbulBlock&#34;</span><span class="p">:</span> <span class="mi">0</span>
    <span class="p">},</span> 
    <span class="nt">&#34;nonce&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000042&#34;</span><span class="p">,</span> 
    <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;0x00&#34;</span><span class="p">,</span> 
    <span class="nt">&#34;parentHash&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span><span class="p">,</span>
    <span class="nt">&#34;extraData&#34;</span><span class="p">:</span> <span class="s2">&#34;0x00&#34;</span><span class="p">,</span>
    <span class="nt">&#34;gasLimit&#34;</span><span class="p">:</span> <span class="s2">&#34;0x4c4b40&#34;</span><span class="p">,</span>
    <span class="nt">&#34;difficulty&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0004&#34;</span><span class="p">,</span>
    <span class="nt">&#34;mixhash&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span><span class="p">,</span>
    <span class="nt">&#34;coinbase&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000&#34;</span><span class="p">,</span>
    <span class="nt">&#34;alloc&#34;</span><span class="p">:</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ geth --datadir .ethereum/net init genesis.json
$ geth --rpc --rpccorsdomain <span class="s2">&#34;https://remix.ethereum.org&#34;</span> --datadir .ethereum/net --allow-insecure-unlock
$ geth attach ipc:&lt;DATADIR&gt;/geth.ipc
</code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/erc20/img/geth-init.png" title="Initializing the local test ethereum network" data-thumbnail="/erc20/img/geth-init.png" data-sub-html="<h2>Initializing the local test ethereum network</h2><p>Initializing the local test ethereum network</p>">
        
    </a><figcaption class="image-caption">Initializing the local test ethereum network</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">newAccount</span><span class="p">()</span>  <span class="c1">// to create an account
</span><span class="c1"></span>    <span class="o">&gt;</span> <span class="nx">miner</span><span class="p">.</span><span class="nx">start</span><span class="p">()</span>  <span class="c1">// to start mining
</span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/erc20/img/accounts-mining.png" title="Create accounts and start mining" data-thumbnail="/erc20/img/accounts-mining.png" data-sub-html="<h2>Create accounts and start mining</h2><p>Create accounts and start mining</p>">
        
    </a><figcaption class="image-caption">Create accounts and start mining</figcaption>
    </figure>
</li>
<li>
<p>In Remix IDE, switch to the <em>Deploy &amp; run transactions</em> window.
Select <em>Web3 Provider</em> as the <em>Environment</em>. When the Remix IDE
connects to the Geth client, the three addresses should be visible
in the <em>Account</em> input.</p>
<figure><a class="lightgallery" href="/erc20/img/remix-ready.png" title="Remix IDE connected to local test network" data-thumbnail="/erc20/img/remix-ready.png" data-sub-html="<h2>Remix IDE connected to local test network</h2><p>Remix IDE connected to local test network</p>">
        
    </a><figcaption class="image-caption">Remix IDE connected to local test network</figcaption>
    </figure>
</li>
<li>
<p>We can now deploy the contract by selecting the contract, providing
the <code>total</code> argument. We select 1000 tokens as the initial
supply. Unlock an account which has some ether using the geth
console by running
<code>personal. unlockAccount(eth.accounts[0])</code>. Click on
<em>Deploy</em>. After we deploy the contract, the contract will appear
under <em>Deployed Contracts</em>, with functions available to use.</p>
<figure><a class="lightgallery" href="/erc20/img/deployed-1.png" title="The Token Contract, deployed" data-thumbnail="/erc20/img/deployed-1.png" data-sub-html="<h2>The Token Contract, deployed</h2><p>The Token Contract, deployed</p>">
        
    </a><figcaption class="image-caption">The Token Contract, deployed</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/deployed-2.png" title="The Token Contract, deployed. These are the view functions." data-thumbnail="/erc20/img/deployed-2.png" data-sub-html="<h2>The Token Contract, deployed. These are the view functions.</h2><p>The Token Contract, deployed. These are the view functions.</p>">
        
    </a><figcaption class="image-caption">The Token Contract, deployed. These are the <em>view</em> functions.</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/deployed-3.png" title="Transaction receipt of deploying the contract" data-thumbnail="/erc20/img/deployed-3.png" data-sub-html="<h2>Transaction receipt of deploying the contract</h2><p>Transaction receipt of deploying the contract</p>">
        
    </a><figcaption class="image-caption">Transaction receipt of deploying the contract</figcaption>
    </figure>
</li>
<li>
<p>Try running the different <em>view</em> functions first, and check whether
the output is as expected. For example, the <code>balanceOf</code>
function with the contract creator&rsquo;s address should return 1000
tokens initially. The <code>name</code>, <code>symbol</code>,
<code>decimals</code>, <code>creator</code> and <code>isMinter</code> functions
should similarly return expected values.</p>
<figure><a class="lightgallery" href="/erc20/img/view-1.png" title="The view functions return values as expected" data-thumbnail="/erc20/img/view-1.png" data-sub-html="<h2>The view functions return values as expected</h2><p>The view functions return values as expected</p>">
        
    </a><figcaption class="image-caption">The <em>view</em> functions return values as expected</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/view-2.png" title="The view functions return values as expected" data-thumbnail="/erc20/img/view-2.png" data-sub-html="<h2>The view functions return values as expected</h2><p>The view functions return values as expected</p>">
        
    </a><figcaption class="image-caption">The <em>view</em> functions return values as expected</figcaption>
    </figure>
</li>
<li>
<p>If we try minting from the second account, an error will be
returned, since the second account does not have minting privileges.</p>
<figure><a class="lightgallery" href="/erc20/img/mint-fail.png" title="Trying to mint from an address that does not have minting privileges. Remix shows the *require* error while gas estimation." data-thumbnail="/erc20/img/mint-fail.png" data-sub-html="<h2>Trying to mint from an address that does not have minting privileges. Remix shows the require error while gas estimation.</h2><p>Trying to mint from an address that does not have minting privileges. Remix shows the *require* error while gas estimation.</p>">
        
    </a><figcaption class="image-caption">Trying to mint from an address that does not have minting privileges. Remix shows the <em>require</em> error while gas estimation.</figcaption>
    </figure>
</li>
<li>
<p>Now we can try adding the second account as a minter using the
<code>addMinter</code> method from the creator&rsquo;s account.</p>
<figure><a class="lightgallery" href="/erc20/img/addMinter.png" title="Call to addMinter function specifying address" data-thumbnail="/erc20/img/addMinter.png" data-sub-html="<h2>Call to addMinter function specifying address</h2><p>Call to addMinter function specifying address</p>">
        
    </a><figcaption class="image-caption">Call to <code>addMinter</code> function specifying address</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/isMinter.png" title="Checking if the address now has minter privileges returns true" data-thumbnail="/erc20/img/isMinter.png" data-sub-html="<h2>Checking if the address now has minter privileges returns true</h2><p>Checking if the address now has minter privileges returns true</p>">
        
    </a><figcaption class="image-caption">Checking if the address now has minter privileges returns true</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/MinterAddedEvent.png" title="MinterAdded event emitted, specifying who added whom as a minter" data-thumbnail="/erc20/img/MinterAddedEvent.png" data-sub-html="<h2>MinterAdded event emitted, specifying who added whom as a minter</h2><p>MinterAdded event emitted, specifying who added whom as a minter</p>">
        
    </a><figcaption class="image-caption"><code>MinterAdded</code> event emitted, specifying who added whom as a minter</figcaption>
    </figure>
</li>
<li>
<p>If we now call the <code>isMinter</code> method from the second account,
we&rsquo;ll get true as the return value.</p>
</li>
<li>
<p>We can try minting some tokens from the second account by (first
changing the account in Remix) calling <code>mint</code> method.</p>
<figure><a class="lightgallery" href="/erc20/img/mint.png" title="Call to mint function" data-thumbnail="/erc20/img/mint.png" data-sub-html="<h2>Call to mint function</h2><p>Call to mint function</p>">
        
    </a><figcaption class="image-caption">Call to <code>mint</code> function</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/mint-transfer.png" title="Transfer event of 500 tokens from 0x000...000" data-thumbnail="/erc20/img/mint-transfer.png" data-sub-html="<h2>Transfer event of 500 tokens from 0x000...000</h2><p>Transfer event of 500 tokens from 0x000...000</p>">
        
    </a><figcaption class="image-caption">Transfer event of 500 tokens from <code>0x000...000</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/mint-balance.png" title="New balance of minter" data-thumbnail="/erc20/img/mint-balance.png" data-sub-html="<h2>New balance of minter</h2><p>New balance of minter</p>">
        
    </a><figcaption class="image-caption">New balance of minter</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/mint-totalsupply.png" title="New total supply of tokens" data-thumbnail="/erc20/img/mint-totalsupply.png" data-sub-html="<h2>New total supply of tokens</h2><p>New total supply of tokens</p>">
        
    </a><figcaption class="image-caption">New total supply of tokens</figcaption>
    </figure>
</li>
<li>
<p>We can transfer tokens from second account to third account by
calling the <code>transfer</code> method from the second account.</p>
<figure><a class="lightgallery" href="/erc20/img/transfer-call.png" title="Call to transfer function" data-thumbnail="/erc20/img/transfer-call.png" data-sub-html="<h2>Call to transfer function</h2><p>Call to transfer function</p>">
        
    </a><figcaption class="image-caption">Call to <code>transfer</code> function</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/TransferEvent.png" title="Transfer event of 200 tokens with from and to addresses" data-thumbnail="/erc20/img/TransferEvent.png" data-sub-html="<h2>Transfer event of 200 tokens with from and to addresses</h2><p>Transfer event of 200 tokens with from and to addresses</p>">
        
    </a><figcaption class="image-caption">Transfer event of 200 tokens with from and to addresses</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/Transfer-sender-balance.png" title="New balance of sender (500 → 300)" data-thumbnail="/erc20/img/Transfer-sender-balance.png" data-sub-html="<h2>New balance of sender (500 → 300)</h2><p>New balance of sender (500 → 300)</p>">
        
    </a><figcaption class="image-caption">New balance of sender (500 → 300)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/Transfer-receiver-balance.png" title="New balance of receiver (0 → 200)" data-thumbnail="/erc20/img/Transfer-receiver-balance.png" data-sub-html="<h2>New balance of receiver (0 → 200)</h2><p>New balance of receiver (0 → 200)</p>">
        
    </a><figcaption class="image-caption">New balance of receiver (0 → 200)</figcaption>
    </figure>
</li>
<li>
<p>Let&rsquo;s approve the third account for delegation of 50 tokens by
calling the <code>approve</code> method from the second account. We can
then check the allowance by calling the <code>allowance</code> method.</p>
</li>
</ol>
<figure><a class="lightgallery" href="/erc20/img/approve.png" title="Call to approve function" data-thumbnail="/erc20/img/approve.png" data-sub-html="<h2>Call to approve function</h2><p>Call to approve function</p>">
        
    </a><figcaption class="image-caption">Call to <code>approve</code> function</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/allowance.png" title="Subsequent call to `allowance` function" data-thumbnail="/erc20/img/allowance.png" data-sub-html="<h2>Subsequent call to allowance function</h2><p>Subsequent call to `allowance` function</p>">
        
    </a><figcaption class="image-caption">Subsequent call to <code>allowance</code> function</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/ApprovalEvent.png" title="Approval event emitted, specifying the owner, delegate and the allowance" data-thumbnail="/erc20/img/ApprovalEvent.png" data-sub-html="<h2>Approval event emitted, specifying the owner, delegate and the allowance</h2><p>Approval event emitted, specifying the owner, delegate and the allowance</p>">
        
    </a><figcaption class="image-caption">Approval event emitted, specifying the owner, delegate and the allowance</figcaption>
    </figure>
<ol>
<li>
<p>Let&rsquo;s transfer 20 tokens belonging to the second address to the
first address from by calling <code>transferFrom</code> method from the
third account.</p>
<figure><a class="lightgallery" href="/erc20/img/transferFrom.png" title="Call to transferFrom function" data-thumbnail="/erc20/img/transferFrom.png" data-sub-html="<h2>Call to transferFrom function</h2><p>Call to transferFrom function</p>">
        
    </a><figcaption class="image-caption">Call to <code>transferFrom</code> function</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/transferFrom-updated-allowance.png" title="Updated allowance from 0x1a8b3b to 0x08b16E (50 → 30)" data-thumbnail="/erc20/img/transferFrom-updated-allowance.png" data-sub-html="<h2>Updated allowance from 0x1a8b3b to 0x08b16E (50 → 30)</h2><p>Updated allowance from 0x1a8b3b to 0x08b16E (50 → 30)</p>">
        
    </a><figcaption class="image-caption">Updated allowance from <code>0x1a8b3b</code> to <code>0x08b16E</code> (50 → 30)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/transferFrom-updated-sender-balance.png" title="Updated balance of sender 0x1a8b3b" data-thumbnail="/erc20/img/transferFrom-updated-sender-balance.png" data-sub-html="<h2>Updated balance of sender 0x1a8b3b</h2><p>Updated balance of sender 0x1a8b3b</p>">
        
    </a><figcaption class="image-caption">Updated balance of sender <code>0x1a8b3b</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/transferFrom-updated-receiver-balance.png" title="Updated balance of receiver 0x02138 (1000 → 1020)" data-thumbnail="/erc20/img/transferFrom-updated-receiver-balance.png" data-sub-html="<h2>Updated balance of receiver 0x02138 (1000 → 1020)</h2><p>Updated balance of receiver 0x02138 (1000 → 1020)</p>">
        
    </a><figcaption class="image-caption">Updated balance of receiver <code>0x02138</code> (1000 → 1020)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/transferFrom-TransferEvent.png" title="Transfer Event with from, to and tokens transferred" data-thumbnail="/erc20/img/transferFrom-TransferEvent.png" data-sub-html="<h2>Transfer Event with from, to and tokens transferred</h2><p>Transfer Event with from, to and tokens transferred</p>">
        
    </a><figcaption class="image-caption">Transfer Event with from, to and tokens transferred</figcaption>
    </figure>
</li>
<li>
<p>Let&rsquo;s burn 200 tokens from creator&rsquo;s account.</p>
<figure><a class="lightgallery" href="/erc20/img/burn.png" title="Call to burn function with 200 tokens" data-thumbnail="/erc20/img/burn.png" data-sub-html="<h2>Call to burn function with 200 tokens</h2><p>Call to burn function with 200 tokens</p>">
        
    </a><figcaption class="image-caption">Call to <code>burn</code> function with 200 tokens</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/burn-sender-balance.png" title="Updated balance of account (1020 → 820)" data-thumbnail="/erc20/img/burn-sender-balance.png" data-sub-html="<h2>Updated balance of account (1020 → 820)</h2><p>Updated balance of account (1020 → 820)</p>">
        
    </a><figcaption class="image-caption">Updated balance of account (1020 → 820)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/burn-totalsupply.png" title="Updated total supply (1500 → 1300)" data-thumbnail="/erc20/img/burn-totalsupply.png" data-sub-html="<h2>Updated total supply (1500 → 1300)</h2><p>Updated total supply (1500 → 1300)</p>">
        
    </a><figcaption class="image-caption">Updated total supply (1500 → 1300)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/burn-TransferEvent.png" title="Transfer Event of 200 tokens to address 0x000...000" data-thumbnail="/erc20/img/burn-TransferEvent.png" data-sub-html="<h2>Transfer Event of 200 tokens to address 0x000&hellip;000</h2><p>Transfer Event of 200 tokens to address 0x000...000</p>">
        
    </a><figcaption class="image-caption">Transfer Event of 200 tokens to address 0x000&hellip;000</figcaption>
    </figure>
</li>
<li>
<p>Let&rsquo;s burn the remaining 30 tokens from the allowance delegated from
second address to the third address.</p>
<figure><a class="lightgallery" href="/erc20/img/burnFrom.png" title="Call to burnFrom function with 30 tokens, delegated from 0x1a8b3b to 0x08b16E" data-thumbnail="/erc20/img/burnFrom.png" data-sub-html="<h2>Call to burnFrom function with 30 tokens, delegated from 0x1a8b3b to 0x08b16E</h2><p>Call to burnFrom function with 30 tokens, delegated from 0x1a8b3b to 0x08b16E</p>">
        
    </a><figcaption class="image-caption">Call to <code>burnFrom</code> function with 30 tokens, delegated from 0x1a8b3b to 0x08b16E</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/burnFrom-sender-balance.png" title="Updated balance of account `0x1a8b3b` (280 →250)" data-thumbnail="/erc20/img/burnFrom-sender-balance.png" data-sub-html="<h2>Updated balance of account 0x1a8b3b (280 →250)</h2><p>Updated balance of account `0x1a8b3b` (280 →250)</p>">
        
    </a><figcaption class="image-caption">Updated balance of account <code>0x1a8b3b</code> (280 →250)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/burnFrom-totalsupply.png" title="Updated total supply (1300 → 1270)" data-thumbnail="/erc20/img/burnFrom-totalsupply.png" data-sub-html="<h2>Updated total supply (1300 → 1270)</h2><p>Updated total supply (1300 → 1270)</p>">
        
    </a><figcaption class="image-caption">Updated total supply (1300 → 1270)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/burnFrom-TransferEvent.png" title="Transfer Event of 30 tokens to address 0x000...000" data-thumbnail="/erc20/img/burnFrom-TransferEvent.png" data-sub-html="<h2>Transfer Event of 30 tokens to address 0x000...000</h2><p>Transfer Event of 30 tokens to address 0x000...000</p>">
        
    </a><figcaption class="image-caption">Transfer Event of 30 tokens to address <code>0x000...000</code></figcaption>
    </figure>
</li>
<li>
<p>Now let&rsquo;s deploy the Token Vendor contract in the same manner as we
deployed the Token contract. We will create the vendor contract from
the creator address again, and then send some ether to the contract
(using Metamask, any other wallet or even the geth console) for its
funds, so that it can buy tokens from some address who sells tokens
to it for ether. Select the token vendor contract and deploy it,
with the address of the token contract as a parameter to the
constructor.</p>
<figure><a class="lightgallery" href="/erc20/img/vendor-contract-creation.png" title="Deploying the Token Vendor contract. The functions available to call are shown on the left" data-thumbnail="/erc20/img/vendor-contract-creation.png" data-sub-html="<h2>Deploying the Token Vendor contract. The functions available to call are shown on the left</h2><p>Deploying the Token Vendor contract. The functions available to call are shown on the left</p>">
        
    </a><figcaption class="image-caption">Deploying the Token Vendor contract. The functions available to call are shown on the left</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/ether-to-vendo.png" title="Sending 1000 ETH to the Vendor contract using Metamask" data-thumbnail="/erc20/img/ether-to-vendo.png" data-sub-html="<h2>Sending 1000 ETH to the Vendor contract using Metamask</h2><p>Sending 1000 ETH to the Vendor contract using Metamask</p>">
        
    </a><figcaption class="image-caption">Sending 1000 ETH to the Vendor contract using Metamask</figcaption>
    </figure>
</li>
<li>
<p>If we now try selling some tokens to the contract, we will get an
error, since we first have to delegate that amount of tokens to the
Vendor contract to allow it to transfer those tokens to itself.
Hence, first approve some amount of tokens to the vendor contract,
and then call the <code>sellTokens</code> function with some tokens less
than or equal to the allowance.</p>
<figure><a class="lightgallery" href="/erc20/img/sell-tokens-delegation-fail.png" title="Trying to sell tokens without approval of those tokens to the vendor contract" data-thumbnail="/erc20/img/sell-tokens-delegation-fail.png" data-sub-html="<h2>Trying to sell tokens without approval of those tokens to the vendor contract</h2><p>Trying to sell tokens without approval of those tokens to the vendor contract</p>">
        
    </a><figcaption class="image-caption">Trying to sell tokens without approval of those tokens to the vendor contract</figcaption>
    </figure>
</li>
<li>
<p>After approving the vendor contract, we can successfully sell
tokens. The image below shows the second account selling 100 tokens,
for which it gets back 1ETH, since the exchange rate (defined as a
constant) is 100 tokens per ether.</p>
<figure><a class="lightgallery" href="/erc20/img/sell-tokens.png" title="Call to `sellTokens` function with 100 tokens" data-thumbnail="/erc20/img/sell-tokens.png" data-sub-html="<h2>Call to sellTokens function with 100 tokens</h2><p>Call to `sellTokens` function with 100 tokens</p>">
        
    </a><figcaption class="image-caption">Call to <code>sellTokens</code> function with 100 tokens</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/sell-tokens-sender-balance-tokens.png" title="Updated balance of account 0x1a8b3b (250 → 150)" data-thumbnail="/erc20/img/sell-tokens-sender-balance-tokens.png" data-sub-html="<h2>Updated balance of account 0x1a8b3b (250 → 150)</h2><p>Updated balance of account 0x1a8b3b (250 → 150)</p>">
        
    </a><figcaption class="image-caption">Updated balance of account <code>0x1a8b3b</code> (250 → 150)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/sell-tokens-contract-balance.png" title="Updated balance of vendor contract (0 → 100)" data-thumbnail="/erc20/img/sell-tokens-contract-balance.png" data-sub-html="<h2>Updated balance of vendor contract (0 → 100)</h2><p>Updated balance of vendor contract (0 → 100)</p>">
        
    </a><figcaption class="image-caption">Updated balance of vendor contract (0 → 100)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/sell-tokens-TransferEvent.png" title="Transfer Event of 100 tokens" data-thumbnail="/erc20/img/sell-tokens-TransferEvent.png" data-sub-html="<h2>Transfer Event of 100 tokens</h2><p>Transfer Event of 100 tokens</p>">
        
    </a><figcaption class="image-caption">Transfer Event of 100 tokens</figcaption>
    </figure>
</li>
<li>
<p>For buying tokens, we simply need to call the <code>buyTokens</code>
function and send some ether along with it. According to the token
exchange rate, some number of tokens will be bought.</p>
<figure><a class="lightgallery" href="/erc20/img/buyTokens-eth-value.png" title="Call to buyTokens function with 1 ether value" data-thumbnail="/erc20/img/buyTokens-eth-value.png" data-sub-html="<h2>Call to buyTokens function with 1 ether value</h2><p>Call to buyTokens function with 1 ether value</p>">
        
    </a><figcaption class="image-caption">Call to <code>buyTokens</code> function with 1 ether value</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/buyTokens-contract-balance.png" title="Updated balance of vendor contract (100 → 0)" data-thumbnail="/erc20/img/buyTokens-contract-balance.png" data-sub-html="<h2>Updated balance of vendor contract (100 → 0)</h2><p>Updated balance of vendor contract (100 → 0)</p>">
        
    </a><figcaption class="image-caption">Updated balance of vendor contract (100 → 0)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/buyTokens-buyer-balance.png" title="Updated balance of buyer 0x1a8b3b (150 → 250)" data-thumbnail="/erc20/img/buyTokens-buyer-balance.png" data-sub-html="<h2>Updated balance of buyer 0x1a8b3b (150 → 250)</h2><p>Updated balance of buyer 0x1a8b3b (150 → 250)</p>">
        
    </a><figcaption class="image-caption">Updated balance of buyer <code>0x1a8b3b</code> (150 → 250)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/buyTokens-TransferEvent.png" title="Transfer Event of 100 tokens" data-thumbnail="/erc20/img/buyTokens-TransferEvent.png" data-sub-html="<h2>Transfer Event of 100 tokens</h2><p>Transfer Event of 100 tokens</p>">
        
    </a><figcaption class="image-caption">Transfer Event of 100 tokens</figcaption>
    </figure>
</li>
<li>
<p>We can also use a wallet like Metamask to deal with ERC20 tokens.
Click on <em>Add Token</em> in Metamask. Fill in the token address, and
Metamask will retrieve the symbol and decimals of the token. Click
on <em>Next</em> and then <em>Add Token</em>.</p>
<figure><a class="lightgallery" href="/erc20/img/metamask-add-token.png" title="Adding the AKT token in Metamask" data-thumbnail="/erc20/img/metamask-add-token.png" data-sub-html="<h2>Adding the AKT token in Metamask</h2><p>Adding the AKT token in Metamask</p>">
        
    </a><figcaption class="image-caption">Adding the AKT token in Metamask</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/metamask-akt-18.png" title="Balance of AKT in an account. The representation is 18 decimal places" data-thumbnail="/erc20/img/metamask-akt-18.png" data-sub-html="<h2>Balance of AKT in an account. The representation is 18 decimal places</h2><p>Balance of AKT in an account. The representation is 18 decimal places</p>">
        
    </a><figcaption class="image-caption">Balance of AKT in an account. The representation is 18 decimal places</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/metamask-transfer.png" title="Transferring AKT tokens using Metamask" data-thumbnail="/erc20/img/metamask-transfer.png" data-sub-html="<h2>Transferring AKT tokens using Metamask</h2><p>Transferring AKT tokens using Metamask</p>">
        
    </a><figcaption class="image-caption">Transferring AKT tokens using Metamask</figcaption>
    </figure>
<figure><a class="lightgallery" href="/erc20/img/metamask-kat-transfer-receipt.png" title="Transfer Event of 100 tokens" data-thumbnail="/erc20/img/metamask-kat-transfer-receipt.png" data-sub-html="<h2>Transfer Event of 100 tokens</h2><p>Transfer Event of 100 tokens</p>">
        
    </a><figcaption class="image-caption">Transfer Event of 100 tokens</figcaption>
    </figure>
</li>
</ol>
<h1 id="conclusion">Conclusion</h1>
<p>We saw how an Ethereum smart contract can be used to
implement a fungible token using the ERC20 standard, along with some
extensions to allow burning and minting tokens. Then, we developed a
Vendor contract to allow users to buy and sell tokens. Remix IDE was
used to develop and test the contracts, Geth client was used to simulate
a test blockchain locally, and Remix and Metamask was used to deal with
tokens.</p>
<p>ERC20 is somewhat limited by its simplicity, even though we added on the minting and burning functions. A newer standard for fungible tokens, <a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-777/" target="_blank" rel="noopener noreffer">ERC777</a> (<a href="https://eips.ethereum.org/EIPS/eip-777" target="_blank" rel="noopener noreffer">EIP</a>) has a lot more functionality, and is backward compatible with ERC20. For non-fungible tokens, there&rsquo;s the <a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-721/" target="_blank" rel="noopener noreffer">ERC721</a> standard, often used for collectibles and games.</p>
<h1 id="references">References</h1>
<ul>
<li><a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-20/" target="_blank" rel="noopener noreffer">ERC-20 Token Standard | ethereum.org</a></li>
<li><a href="https://docs.openzeppelin.com/contracts/3.x/api/token/erc20" target="_blank" rel="noopener noreffer">ERC 20 - OpenZeppelin Docs</a></li>
<li><a href="https://www.toptal.com/ethereum/create-erc20-token-tutorial" target="_blank" rel="noopener noreffer">ERC20 Token Tutorial by Gilad Halmov</a></li>
</ul>
]]></description></item></channel></rss>