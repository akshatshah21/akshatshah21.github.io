<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>algorithms - Tag - Akshat Shah</title><link>http://akshatshah21.github.io/tags/algorithms/</link><description>algorithms - Tag - Akshat Shah</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>akshatshah_21@yahoo.in (Akshat Shah)</managingEditor><webMaster>akshatshah_21@yahoo.in (Akshat Shah)</webMaster><lastBuildDate>Sat, 27 Apr 2024 19:30:30 +0000</lastBuildDate><atom:link href="http://akshatshah21.github.io/tags/algorithms/" rel="self" type="application/rss+xml"/><item><title>LeetCode 75 - Part 1 - Array/String</title><link>http://akshatshah21.github.io/lc75-1/</link><pubDate>Sat, 27 Apr 2024 19:30:30 +0000</pubDate><author>Akshat Shah</author><guid>http://akshatshah21.github.io/lc75-1/</guid><description><![CDATA[<h1 id="intent">Intent</h1>
<p><strong>Confession</strong>: I&rsquo;ve never been comfortable with DSA, Coding Problems or Competitive Programming.<br>
And so this is one more attempt to change that.<br>
LeetCode 75. Two problems a day, starting April 25, 2024.<br>
To further motivate consistency and completion of this, I&rsquo;ve decided I will do write-ups for all of these problems and perhaps publish them on my blog. Let&rsquo;s see.</p>
<p>This is Part 1 - Array/String.</p>
<h1 id="11-merge-strings-alternately">1.1 Merge Strings Alternately</h1>
<p><a href="https://leetcode.com/problems/merge-strings-alternately" target="_blank" rel="noopener noreffer ">Problem on LeetCode</a></p>
<h2 id="question">Question</h2>
<p>Given two strings, merge them such that the characters in the result string are alternately from each string. If one string is exhausted, append the remainder of the other string to the result.</p>
<h2 id="solutions">Solutions</h2>
<p>This is like the simple merge operation from Merge Sort!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">string</span> <span class="n">mergeAlternately</span><span class="p">(</span><span class="n">string</span> <span class="n">word1</span><span class="p">,</span> <span class="n">string</span> <span class="n">word2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">string</span> <span class="n">ret</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">len1</span> <span class="o">=</span> <span class="n">word1</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">len2</span> <span class="o">=</span> <span class="n">word2</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">p1</span> <span class="o">&lt;</span> <span class="n">len1</span> <span class="o">&amp;&amp;</span> <span class="n">p2</span> <span class="o">&lt;</span> <span class="n">len2</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ret</span> <span class="o">+=</span> <span class="n">word1</span><span class="p">[</span><span class="n">p1</span><span class="o">++</span><span class="p">];</span>
            <span class="n">ret</span> <span class="o">+=</span> <span class="n">word2</span><span class="p">[</span><span class="n">p2</span><span class="o">++</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">p1</span> <span class="o">&lt;</span> <span class="n">len1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ret</span> <span class="o">+=</span> <span class="n">word1</span><span class="p">[</span><span class="n">p1</span><span class="o">++</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">p2</span> <span class="o">&lt;</span> <span class="n">len2</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ret</span> <span class="o">+=</span> <span class="n">word2</span><span class="p">[</span><span class="n">p2</span><span class="o">++</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="12-greatest-common-divisor-of-strings">1.2 Greatest Common Divisor of Strings</h1>
<p><a href="https://leetcode.com/problems/greatest-common-divisor-of-strings" target="_blank" rel="noopener noreffer ">Problem on LeetCode</a></p>
<h2 id="question-1">Question</h2>
<ul>
<li>String <code>t</code> is said to <em>&lsquo;divide&rsquo;</em> string <code>s</code> if the <code>s = t + t + t + ... + t</code> (<code>t</code> concatenated one or more times)</li>
<li>With this definition of <code>division</code>, find the <code>GCD</code> of two given strings <code>str1</code> and <code>str2</code> (the largest string that divides both)</li>
</ul>
<blockquote>
<p><strong>Example 1:</strong>
<strong>Input:</strong> <code>str1 = &quot;ABCABC&quot;, str2 = &quot;ABC&quot;</code>
<strong>Output:</strong> <code>&quot;ABC&quot;</code></p>
</blockquote>
<blockquote>
<p><strong>Example 2:</strong>
<strong>Input:</strong> <code>str1 = &quot;ABABAB&quot;, str2 = &quot;ABAB&quot;</code>
<strong>Output:</strong> <code>&quot;AB&quot;</code></p>
</blockquote>
<blockquote>
<p><strong>Example 3:</strong>
<strong>Input:</strong> <code>str1 = &quot;LEET&quot;, str2 = &quot;CODE&quot;</code>
<strong>Output:</strong> <code>&quot;&quot;</code></p>
</blockquote>
<h2 id="solutions-1">Solutions</h2>
<h3 id="observations">Observations</h3>
<ul>
<li>Consider cyclically traversing both strings together one character at a time. If at any point we see a mismatch, then the GCD string must be empty</li>
<li>This further reveals that we probably need to use that one repeating substring (evident in above examples as &ldquo;AB&rdquo; or &ldquo;ABC&rdquo;</li>
</ul>
<h3 id="initial-solution">Initial Solution</h3>
<p>After trying out some test cases on paper and submitting some naive solution, an interesting test case was revealed. Consider the following test case:</p>
<blockquote>
<p>Input: <code>str1 = &quot;ABABABABABABABAB, str2 = &quot;ABABAB&quot;</code></p>
</blockquote>
<p>Basically str1 is &ldquo;AB&rdquo; 8 times, while str2 is &ldquo;AB&rdquo; 3 times.</p>
<p>My naive solution involved checking whether the smaller string (potentially the GCD) matches cyclically with the larger string, but that&rsquo;s not correct as the above example shows. The correct output is just &ldquo;AB&rdquo;, not &ldquo;ABABAB&rdquo;. This is interesting since the GCD of 3 and 8 is 1.</p>
<p>So here&rsquo;s an idea: the GCD of the two strings is the repeating substring, concatenated <code>g</code> times, where g is the GCD of number of instances of that repeating substring in each string.</p>
<p>To find that <em>repeating substring</em> component, we try all possible prefixes of a string and check whether it <em>divides</em> the entire string. We take the smallest such prefix, and call it the <code>divisor</code>, and also count the number of concatenations it takes to get the complete string (~the <em>quotient</em>).</p>
<p>We then try finding the quotient for the other string, and then calculate the GCD of the two quotients, which is <code>g</code> as defined above.</p>
<p>If at any point, there is a character mismatch (while traversing one string - start to end -  and a potential divisor - cyclically), this means that the GCD string must be empty.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">pair</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">getSmallestDivisor</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">string</span> <span class="n">prefix</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">prefix</span> <span class="o">+=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">quotient</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="kt">bool</span> <span class="n">match</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">&amp;</span> <span class="nl">c</span> <span class="p">:</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">!=</span> <span class="n">prefix</span><span class="p">[</span><span class="n">p</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">match</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>
				<span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1">// cyclic traveral, i = prefixLength
</span><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                    <span class="n">quotient</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">match</span> <span class="o">&amp;&amp;</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="k">return</span> <span class="p">{</span> <span class="n">prefix</span><span class="p">,</span> <span class="n">quotient</span> <span class="p">};</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span> <span class="n">s</span><span class="p">,</span> <span class="mi">1</span> <span class="p">};</span>  <span class="c1">// no divisor except self
</span><span class="c1"></span>    <span class="p">}</span>

<span class="k">public</span><span class="o">:</span>
    <span class="n">string</span> <span class="n">gcdOfStrings</span><span class="p">(</span><span class="n">string</span> <span class="n">str1</span><span class="p">,</span> <span class="n">string</span> <span class="n">str2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">auto</span> <span class="n">p</span> <span class="o">=</span> <span class="n">getSmallestDivisor</span><span class="p">(</span><span class="n">str1</span><span class="p">);</span>
        <span class="n">string</span> <span class="n">divisor</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">q1</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">q2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">divisorLen</span> <span class="o">=</span> <span class="n">divisor</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">&amp;</span> <span class="nl">c</span> <span class="p">:</span> <span class="n">str2</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">!=</span> <span class="n">divisor</span><span class="p">[</span><span class="n">p2</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">p2</span> <span class="o">=</span> <span class="p">(</span><span class="n">p2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">divisorLen</span><span class="p">;</span>  <span class="c1">// cyclic traversal
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">p2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">q2</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">p2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">;</span>
        <span class="n">string</span> <span class="n">ret</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">q1</span><span class="p">,</span> <span class="n">q2</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">g</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ret</span> <span class="o">+=</span> <span class="n">divisor</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>The time complexity of this solution is <code>O(N^2 + M)</code>, where N = length of str1, M = length of str2. <code>N^2</code> because we try all prefixes of str1 and traverse str1 for each of them, and <code>+M</code> because we traverse str2 with the smallest divisor of str1.</p>
<p>One simple optimization would be to to call the <code>getSmallestDivisor</code> function for the smaller of the two given strings. Another one is to check length divisibility before traversing to check for divisibility of the strings.</p>
<p>The auxiliary space is <code>O(N)</code>.</p>
<p>The brute force solution on LeetCode is similar to this solution.</p>
<h3 id="optimal-solution">Optimal Solution</h3>
<p>The optimal solution given on LeetCode is amazing, and uses the fact that the length of the GCD string will be the same as the GCD of the length of the two strings, assuming that the two are made of a common repeating substring. (In the above brute force solution, we dealed in terms of the GCD of number of repeating instances, which can be transformed to length by multiplying the number of instances with the length of the repeating substring).</p>
<p>There are two parts to it:</p>
<ol>
<li>Do these two strings have a non-empty GCD string?</li>
<li>If they do, then the length of the GCD string must be the same as the GCD of the length of the two strings. And we can simply take the prefix of any string with that length - this prefix is common repeating substring (called <code>base</code> in the  LeetCode solution) repeated GCD(len1, len2) times.</li>
</ol>
<p>The clever way of checking whether there exists a non-empty GCD string is to check if <code>str1 + str2 == str2 + str</code>. This extends from the fact that if there is a common repeating substring that forms both strings, these two concatenations would be the same.
For example: ABAB and ABABAB. Here since they have AB as the common repeating substring - (ABAB)(ABABAB) == (ABABAB)(ABAB)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">string</span> <span class="n">gcdOfStrings</span><span class="p">(</span><span class="n">string</span> <span class="n">str1</span><span class="p">,</span> <span class="n">string</span> <span class="n">str2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span> <span class="o">!=</span> <span class="n">str2</span> <span class="o">+</span> <span class="n">str1</span><span class="p">)</span> <span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">l1</span> <span class="o">=</span> <span class="n">str1</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">l2</span> <span class="o">=</span> <span class="n">str2</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">str1</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">g</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="13-kids-with-the-greatest-number-of-candies">1.3 Kids With the Greatest Number of Candies</h1>
<p><a href="https://leetcode.com/problems/kids-with-the-greatest-number-of-candies" target="_blank" rel="noopener noreffer ">Problem on LeetCode</a></p>
<h2 id="question-2">Question</h2>
<p>Given an array of <code>n</code> numbers and a number <code>x</code>, return a boolean array with true values at those indices where, upon adding <code>x</code> to the element and leaving all other elements unchanged, the current element will be a maximum.
There can be multiple maximums.</p>
<h2 id="solutions-2">Solutions</h2>
<p>Find the maximum number in the input array, and map each element to true if its value plus <code>x</code> is greater than or equal to the maximum</p>
<h3 id="c">C++</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">kidsWithCandies</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">candies</span><span class="p">,</span> <span class="kt">int</span> <span class="n">extraCandies</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="o">*</span><span class="n">max_element</span><span class="p">(</span><span class="n">candies</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">candies</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="nl">i</span><span class="p">:</span> <span class="n">candies</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">res</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">extraCandies</span> <span class="o">&gt;=</span> <span class="n">max</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="java">Java</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Boolean</span><span class="o">&gt;</span> <span class="nf">kidsWithCandies</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">candies</span><span class="o">,</span> <span class="kt">int</span> <span class="n">extraCandies</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">candies</span><span class="o">).</span><span class="na">max</span><span class="o">().</span><span class="na">getAsInt</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">candies</span><span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">+</span> <span class="n">extraCandies</span> <span class="o">&gt;=</span> <span class="n">max</span><span class="o">).</span><span class="na">getAsBoolean</span><span class="o">();</span><span class="n">i</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="python">Python</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">kidsWithCandies</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">candies</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">extraCandies</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">bool</span><span class="p">]:</span>
        <span class="n">max_candies</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">candies</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">extraCandies</span> <span class="o">&gt;=</span> <span class="n">max_candies</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">candies</span><span class="p">]</span>
        
</code></pre></td></tr></table>
</div>
</div><h3 id="javascript">JavaScript</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="cm">/**
</span><span class="cm"> * @param {number[]} candies
</span><span class="cm"> * @param {number} extraCandies
</span><span class="cm"> * @return {boolean[]}
</span><span class="cm"> */</span>
<span class="kd">var</span> <span class="nx">kidsWithCandies</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">candies</span><span class="p">,</span> <span class="nx">extraCandies</span><span class="p">)</span> <span class="p">{</span>
    <span class="kr">const</span> <span class="nx">maxCandies</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">candies</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">candies</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">i</span> <span class="p">=&gt;</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">extraCandies</span> <span class="o">&gt;=</span> <span class="nx">maxCandies</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="c-1">C#</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="n">KidsWithCandies</span><span class="p">(</span><span class="kt">int</span><span class="p">[]</span> <span class="n">candies</span><span class="p">,</span> <span class="kt">int</span> <span class="n">extraCandies</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">var</span> <span class="n">maxCandies</span> <span class="p">=</span> <span class="n">candies</span><span class="p">.</span><span class="n">Max</span><span class="p">();</span>
        <span class="k">return</span> <span class="n">candies</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span> <span class="p">+</span> <span class="n">extraCandies</span> <span class="p">&gt;=</span> <span class="n">maxCandies</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="14-can-place-flowers">1.4 Can Place Flowers</h1>
<p><a href="https://leetcode.com/problems/can-place-flowers" target="_blank" rel="noopener noreffer ">Problem on LeetCode</a></p>
<h2 id="question-3">Question</h2>
<p>Given a binary array, return whether it is possible to add <code>x</code> 1s in the array without there being two adjacent 1s.</p>
<h2 id="solutions-3">Solutions</h2>
<p>Traverse the array, and try placing a 1 wherever possible (~greedily). It will be possible to place a 1 if <code>i-1</code> and <code>i+1</code> have 0s or are out of bounds.</p>
<h3 id="c-2">C++</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">bool</span> <span class="n">canPlaceFlowers</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">flowerbed</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">flowerbed</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">l</span><span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span> 
                <span class="n">flowerbed</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                <span class="n">n</span><span class="o">--</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="java-1">Java</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">canPlaceFlowers</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">flowerbed</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">flowerbed</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="n">0</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">l</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">flowerbed</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">1</span><span class="o">)</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">((</span><span class="n">i</span> <span class="o">==</span> <span class="n">0</span> <span class="o">||</span> <span class="n">flowerbed</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="o">&amp;&amp;</span> 
                <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">l</span><span class="o">-</span><span class="n">1</span> <span class="o">||</span> <span class="n">flowerbed</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">0</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">flowerbed</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>
                    <span class="n">n</span><span class="o">--;</span>
                <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">n</span> <span class="o">==</span> <span class="n">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="15-reverse-vowels-of-a-string">1.5 Reverse Vowels of a String</h1>
<p>[Problem on LeetCode](<a href="https://leetcode.com/problems/reverse-vowels-of-a-string">https://leetcode.com/problems/reverse-vowels-of-a-string</a></p>
<h2 id="question-4">Question</h2>
<p>Given a string, reverse the order of vowels that appear in it.
For example, <code>hello</code> becomes <code>holle</code>.
The string can contain ASCII-printable characters.</p>
<h2 id="solution">Solution</h2>
<p>An immediate solution is to store a list of vowels as they appear in the string, then replace them in reverse order with the list.
The next logical step is to realize you can use two pointers and swap vowels only, skipping other characters (much like how you reverse a string with two pointers).</p>
<p>A subtle thing to note here is that the vowels can be lower as well as upper case</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">private</span><span class="o">:</span>
    <span class="k">const</span> <span class="n">set</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">VOWELS</span> <span class="o">=</span> <span class="p">{</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="sc">&#39;A&#39;</span><span class="p">,</span> <span class="sc">&#39;e&#39;</span><span class="p">,</span> <span class="sc">&#39;E&#39;</span><span class="p">,</span> <span class="sc">&#39;i&#39;</span><span class="p">,</span> <span class="sc">&#39;I&#39;</span><span class="p">,</span> <span class="sc">&#39;o&#39;</span><span class="p">,</span> <span class="sc">&#39;O&#39;</span><span class="p">,</span> <span class="sc">&#39;u&#39;</span><span class="p">,</span> <span class="sc">&#39;U&#39;</span> <span class="p">};</span>

    <span class="kt">bool</span> <span class="nf">isVowel</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">VOWELS</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
    <span class="p">}</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">string</span> <span class="n">reverseVowels</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        
        <span class="k">while</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isVowel</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">l</span><span class="p">]))</span> <span class="p">{</span>
                <span class="n">l</span><span class="o">++</span><span class="p">;</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isVowel</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">r</span><span class="p">]))</span> <span class="p">{</span>
                <span class="n">r</span><span class="o">--</span><span class="p">;</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">swap</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">r</span><span class="p">]);</span>
            <span class="n">l</span><span class="o">++</span><span class="p">;</span>
            <span class="n">r</span><span class="o">--</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="16-reverse-words-in-a-string">1.6 Reverse Words in a String</h1>
<p><a href="https://leetcode.com/problems/reverse-words-in-a-string" target="_blank" rel="noopener noreffer ">Problem on LeetCode</a></p>
<h2 id="question-5">Question</h2>
<p>Given a string, reverse the words in it. Also remove any extra whitespaces - leading, trailing and between the words.</p>
<p><strong>Follow-up</strong>: If the string data type is mutable in your language, can you solve it <strong>in-place</strong> with <code>O(1)</code> extra space?</p>
<h2 id="solutions-4">Solutions</h2>
<p>Ah, so easy to do if you have the right functions available&hellip; Check out the following solutions in decreasing order of simplicity - Python and Java. Both these languages have a convenient standard <code>split</code> function, as well as a function to <code>trim</code> or <code>strip</code> whitespaces. For an online assessment (or real life, lol), this would be the way to go. But if an interviewer is asking you this question, they&rsquo;re not looking for these solutions. Plus, look at the follow-up.</p>
<h3 id="python-1">Python</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reverseWords</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">words</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
        <span class="n">words</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>
        <span class="k">return</span> <span class="s1">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>Questions like these remind you that it&rsquo;s helpful to be fluent in multiple languages for coding problems</p>
<h3 id="java-2">Java</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">reverseWords</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">words</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&#34;\\s+&#34;</span><span class="o">);</span>
        <span class="n">StringBuilder</span> <span class="n">stringBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="n">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="n">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="n">stringBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="n">stringBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39; &#39;</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">stringBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">0</span><span class="o">]);</span>
        <span class="k">return</span> <span class="n">stringBuilder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Notice how using Java&rsquo;s <code>split</code> method here is different from using Python&rsquo;s: you need to trim the string in Java first, in Python you don&rsquo;t. Ah, language subtleties.</p>
<h3 id="solving-this-in-place">Solving this in-place</h3>
<ol>
<li>Reverse the entire string</li>
<li>Then reverse each word in the reversed string (remember, words are delimited by one or more spaces).
This would reverse the order of words in the string. Try it out, and this isn&rsquo;t too difficult to come up with intuitively :-).</li>
</ol>
<p>As a final step, we would need to get rid of extra whitespaces (leading, trailing and between words). For this we need to keep two pointers - a <code>read</code> pointer and a <code>write</code> pointer, and write the entire string again in the same buffer, with decisioning to ignore the extra spaces. The challenge here would be to write this parsing and writing logic elegantly. Refer to the C++ code below to see how I did it (likely not the best way).</p>
<p>And now for the big one.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">string</span> <span class="n">reverseWords</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">start</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">end</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// collapse spaces
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">write</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">bool</span> <span class="n">endWord</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">read</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">read</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">read</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">endWord</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">s</span><span class="p">[</span><span class="n">write</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
                <span class="n">endWord</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">read</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">s</span><span class="p">[</span><span class="n">write</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">read</span><span class="p">];</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">read</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">read</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="p">)</span> <span class="n">endWord</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">write</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="p">)</span> <span class="n">write</span><span class="o">--</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">write</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h1 id="17-product-of-array-except-self">1.7 Product of Array Except Self</h1>
<p><a href="https://leetcode.com/problems/product-of-array-except-self" target="_blank" rel="noopener noreffer ">Problem on LeetCode</a></p>
<h2 id="question-6">Question</h2>
<ul>
<li>Given an input array, return an array where each element of the result array holds the product of the entire input array except the element at that position in the input array.</li>
<li>You cannot use the division operation</li>
<li>Do it in O(N) time</li>
<li><strong>Follow-up</strong>: Do it in O(1) <em>auxiliary</em> space</li>
</ul>
<h2 id="solutions-5">Solutions</h2>
<p>The most direct way of doing this is calculating the product of the entire array and then dividing it by each element to get the result array. This needs to handle 0s in the array:</p>
<ul>
<li>If there are two or more 0s, then the entire result array would be 0s (at least one 0 would be part of every product)</li>
<li>If there is exactly one 0, then only that position will have the entire product (without 0) and the rest of the array would hold 0s (since this 0 would be in every other product)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">productExceptSelf</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">zeroes</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">zeroIdx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">zeroes</span><span class="o">++</span><span class="p">;</span>
                <span class="n">zeroIdx</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="n">product</span> <span class="o">*=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">zeroes</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">zeroes</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">res</span><span class="p">[</span><span class="n">zeroIdx</span><span class="p">]</span> <span class="o">=</span> <span class="n">product</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">product</span> <span class="o">/</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>This is an O(N) time, O(1) solution, but it uses the division operator, which is not allowed according to the question.</p>
<p>The brute force way of solving this would be to calculate for each element, the product of the other elements - an O(N^2) solution. From this solution, we can observe that we&rsquo;re repeating a lot of calculations. What would help here are prefix and suffix products. So here&rsquo;s what we can do:</p>
<ul>
<li>Calculate a prefix product array: `pref[i] = nums[0] * nums[1] * &hellip; * nums[i-1];        pref[0] = 1</li>
<li>Calculate a suffix product array: <code>suff[i] = nums[i+1] * nums[i+2] * ... * nums[n-1];    suff[n-1] = 1</code></li>
<li>Then, the result array is simply: <code>res[i] = pref[i] * suff[i]</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">productExceptSelf</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">pre</span><span class="p">[</span><span class="n">n</span><span class="p">],</span> <span class="n">suf</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
        <span class="n">pre</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">suf</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">pre</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">suf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">suf</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pre</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">suf</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>This is an O(N) time solution, but it takes O(N) space for the prefix and suffix array.</p>
<p>Observation: We&rsquo;re going from 0 to n-1 again for calculating the result array.
Instead of keeping an array of prefix products, we can keep a single prefix product variable, use it for the result calculation and update the same variable (we don&rsquo;t need the previous prefix products). This takes saves creating and maintaining one array. But we still need the suffix array since we&rsquo;re going from 0 to n-1.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">productExceptSelf</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">suffixProduct</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">suffixProduct</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">suffixProduct</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="kt">int</span> <span class="n">prefixProduct</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">prefixProduct</span> <span class="o">*</span> <span class="n">suffixProduct</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="n">prefixProduct</span> <span class="o">*=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>Now, we need to have O(1) auxiliary space. This is usually a hint for using the input array and modifying it in-place. But in this case, we can instead use the result array itself! We can initially store suffix products in the result array, and then using the prefix product, update each element as we go from 0 to n-1. This reduces our auxiliary space to O(1) - the result array is not auxiliary, and apart from that we just have single variables.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">productExceptSelf</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="c1">// first, fill the result with suffix product
</span><span class="c1"></span>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="c1">// then multiply prefix product
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">prefixProduct</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">prefixProduct</span><span class="p">;</span>
            <span class="n">prefixProduct</span> <span class="o">*=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

</code></pre></td></tr></table>
</div>
</div><h1 id="18-increasing-triplet-subsequence">1.8 Increasing Triplet Subsequence</h1>
<p><a href="https://leetcode.com/problems/increasing-triplet-subsequence" target="_blank" rel="noopener noreffer ">Problem on LeetCode</a></p>
<h2 id="question-7">Question</h2>
<p>Given an array of integers, return true if there exist distinct indices <code>i</code>, <code>j</code>, <code>k</code> such that <code>i &lt; j &lt; k</code> and <code>nums[i] &lt; nums[j] &lt; nums[k]</code></p>
<h2 id="solutions-6">Solutions</h2>
<p>The brute force way of doing this is to find a pair <code>(i, k, j)</code> among all such unordered pairs where the conditions hold true. This solution has O(N^3) time complexity.
Intuition leads us to think in terms of minimum values. One way of thinking about this is that we need to find some <em>local</em> minimum <code>i</code>, after which there exists another <em>local</em> minimum <code>j</code> that is greater than the number at <code>i</code>, after which there should exist at least one number that&rsquo;s greater than the one at <code>j</code>. The way to do this in linear time would be to store the two lowest values encountered so far - <code>min</code> and <code>min2</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">min = INT_MAX, min2 = INT_MAX
for(int i: nums) {
	if (i &lt;= min) min = i
	if (i &lt; min2) min2 = i
	if (i &gt; min2) return true
}
return false
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>min</code> is a potential `nums[i]</li>
<li><code>min2</code> is a potential <code>nums[j]</code>, but it doesn&rsquo;t necessarily store one corresponding to <code>min</code> being <code>nums[i]</code>. Rather, it can also store a potential <code>nums[j]</code> corresponding to a previous value of <code>min</code> (a potential <code>nums[i]</code> that was encountered previously but is now replaced with another).</li>
</ul>
<p>The reason for <code>min2</code>'s definition can be understood with the following test case:
<code>[9, 10, 5, 11, 10, 9, 8]</code>
This is how we update <code>min</code> and <code>min2</code>. Initially, both hold <code>INT_MAX</code>:</p>
<ul>
<li>At <code>i = 0</code>, <code>nums[i] = 9</code>: <code>min = 9, min2 = INT_MAX</code>*</li>
<li>At <code>i = 1</code>, <code>nums[i] = 10</code>: <code>min = 9, min2 = 10</code></li>
<li>At <code>i = 2</code>, <code>nums[i] = 5</code>: <code>min = 5, min2 = 10</code>. Note that here we do not update <code>min2</code> to 9 (<code>j &gt; i</code>), but neither do we reset it (I reset it in an earlier version, which won&rsquo;t work - we&rsquo;ll see why)</li>
<li>At <code>i = 3</code>, <code>nums[i] = 11</code>: <code>min = 5, min2 = 10</code>. Now we finally encounter a value that is greater than <code>min2</code> (<code>k &gt; j</code> and <code>nums[k] &gt; nums[j]</code>) And we also observe that we do indeed have an answer: (9, 10, 11). Note that <code>min</code> is holding <code>5</code>, but it&rsquo;s not part of the current <code>(nums[i], nums[j], nums[k])</code> tuple that we have as the match - <code>nums[i]</code> is actually 9, even though we replaced <code>min</code>. But it&rsquo;s <code>min2</code> storing <code>10</code> is what tells us that we have encountered some number before it such that it&rsquo;s lower than <code>10</code>. <code>10</code> is actually corresponding to <code>9</code> as its pair, not 5. This really is that one pivot of the solution.
Let&rsquo;s say we reset <code>min2</code> each time we encounter a number lower than the current <code>min</code>, with this same test case. This is how it would turn out:</li>
<li>At <code>i = 0</code>, <code>nums[i] = 9</code>: <code>min = 9, min2 = INT_MAX</code>*</li>
<li>At <code>i = 1</code>, <code>nums[i] = 10</code>: <code>min = 9, min2 = 10</code></li>
<li>At <code>i = 2</code>, <code>nums[i] = 5</code>: <code>min = 5, min2 = INT_MAX</code>. Note that here we <strong>do reset it</strong></li>
<li>At <code>i = 3</code>, <code>nums[i] = 11</code>: <code>min = 5, min2 = 11</code></li>
<li>At <code>i = 4</code>, <code>nums[i] = 10</code>: <code>min = 5, min2 = 10</code></li>
<li>At <code>i = 5</code>, <code>nums[i] = 9</code>: <code>min = 5, min2 = 9</code></li>
<li>At <code>i = 6</code>, <code>nums[i] = 8</code>: <code>min = 5, min2 = 8</code>
We reach the end, and return false, even though we do have a possible answer: (9, 10, 11). This is why resetting <code>min2</code> will not work.
The fact that <code>min2</code> has already been replaced, means that there exists a <code>min</code> (before <code>min2</code> and less than <code>min2</code>) before it, even though the current value of <code>min</code> might be different.</li>
</ul>
<p>I found this in the comments in one of the solutions:</p>
<blockquote>
<p>updating <code>min1</code> simply prepares to form a new pair of <code>min&lt;min2</code>. The existing <code>min2</code> represents the older <code>min1 &lt; min2</code> pair</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">bool</span> <span class="n">increasingTriplet</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">,</span> <span class="n">min2</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="nl">i</span><span class="p">:</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">min</span><span class="p">)</span>   <span class="n">min</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>        <span class="c1">// prepares for new min, min2 pair. min2 still represents older min, min2 pair!!
</span><span class="c1"></span>            <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">min2</span><span class="p">)</span>  <span class="n">min2</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">min2</span><span class="p">)</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>Effectively just three lines, wow.</p>
<h1 id="19-string-compression">1.9 String Compression</h1>
<p><a href="https://leetcode.com/problems/string-compression" target="_blank" rel="noopener noreffer ">Problem on LeetCode</a></p>
<h2 id="question-8">Question</h2>
<p>Given an array of characters, compress it such that each subarray of the same character is replaced with the character followed by the length of that subarray. If the length of the subarray is 1, skip the length, just place the character. Modify the input in-place.
Examples:</p>
<ul>
<li><code>[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;] -&gt; [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]</code></li>
<li><code>['a'] -&gt; ['a']</code></li>
</ul>
<h2 id="solutions-7">Solutions</h2>
<p>Classic read-write pointers approach. Traverse the array and maintain a <code>currentChar</code> and <code>currentCharCount</code>, and for each new character encountered, write the <code>currentChar</code> and <code>currentCharCount</code> to the array.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">private</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">appendNumberToCharArray</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">chars</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">write</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">to_string</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">&amp;</span><span class="nl">c</span><span class="p">:</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">chars</span><span class="p">[</span><span class="n">write</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kt">void</span> <span class="nf">appendCharCount</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">chars</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">write</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">chars</span><span class="p">[</span><span class="n">write</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">appendNumberToCharArray</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">chars</span><span class="p">,</span> <span class="n">write</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">compress</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&amp;</span> <span class="n">chars</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">currentChar</span> <span class="o">=</span> <span class="n">chars</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">write</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">currentCharCount</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">chars</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">chars</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">currentChar</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">appendCharCount</span><span class="p">(</span><span class="n">currentCharCount</span><span class="p">,</span> <span class="n">currentChar</span><span class="p">,</span> <span class="n">chars</span><span class="p">,</span> <span class="n">write</span><span class="p">);</span>
                <span class="n">currentCharCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="n">currentChar</span> <span class="o">=</span> <span class="n">chars</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="n">currentCharCount</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">appendCharCount</span><span class="p">(</span><span class="n">currentCharCount</span><span class="p">,</span> <span class="n">currentChar</span><span class="p">,</span> <span class="n">chars</span><span class="p">,</span> <span class="n">write</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">write</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>Looking at my previous submissions from June 2020 to Feb 2024 to now, I&rsquo;ve gone from repeating code (not using functions) and using terrible one-letter variables for everything to good(?) variable names and helper functions. Progress?</p>
]]></description></item><item><title>Coding Problem: Array of Product Except Self</title><link>http://akshatshah21.github.io/dcp-2/</link><pubDate>Sun, 03 Jul 2022 10:45:56 +0530</pubDate><author>Akshat Shah</author><guid>http://akshatshah21.github.io/dcp-2/</guid><description><![CDATA[<blockquote>
<p><a href="https://www.dailycodingproblem.com/" target="_blank" rel="noopener noreffer ">DailyCodingProblem</a> is a great website that sends coding problems to your inbox daily.</p>
</blockquote>
<h2 id="the-question">The Question</h2>
<blockquote>
<p>Given an array of integers, return a new array such that each element at index <code>i</code> of the new array is the product of all the numbers in the original array except the one at <code>i</code>.</p>
<p>Follow-up: What if the division operation is not allowed?</p>
</blockquote>
<h2 id="examples">Examples</h2>
<ol>
<li><code>[1, 2, 3, 4, 5]</code><br>
Result: <code>[120, 60, 40, 30, 24]</code></li>
<li><code>[3, 2, 1]</code><br>
Result: <code>[2, 3, 6]</code></li>
<li>What&rsquo;s interesting about this question is if there are 0s in the array: <code>[1, 2, 3, 0]</code><br>
Result: <code>[0, 0, 0, 6]</code></li>
<li><code>[1, 2, 0, 3, 4, 0, 5]</code><br>
Result: <code>[0, 0, 0, 0, 0, 0, 0]</code></li>
</ol>
<h2 id="solutions">Solutions</h2>
<h3 id="division-of-overall-product">Division of Overall Product</h3>
<ul>
<li>The most intuitive solution is to first calculate the overall product of the array, <code>P</code> and then for each element in the given array, divide <code>P</code> by it to get the corresponding number in the result array.</li>
<li>Dividing <code>P</code> by every element can be a problem if one of the elements is 0, since we&rsquo;ll get a runtime error for dividing by 0. However, if there is indeed a 0 in the array, then <code>P</code> will also be 0. So we realize that we need to handle zeroes carefully in this solution.</li>
<li>Trying out some test cases (see <em>Examples</em> above), we realize that there are three cases when it comes to 0s in the array:
<ol>
<li>No zeroes: We can follow our simple solution above</li>
<li>One zero, at index <code>z</code>: All positions in the result array except <code>z</code> will be 0, while <code>z</code> will hold the product of all numbers in the given array without the 0</li>
<li>More than one zeroes: All positions in the result array will hold 0.
Hence, we need to keep track of the number of zeroes and construct the result accordingly. We can simply keep a running count of zeroes and <code>firstZeroIndex</code> for this, and calculate <code>P</code> accordingly.</li>
</ol>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">P = 1
zcount = 0
firstZeroIndex = -1
for i=0 to n-1:
	if a[i] == 0:
		if zcount == 0:
			firstZeroIndex = i
		zcount++
	else:
		P = P * a[i]

	if zcount &gt; 1:
		break

if zcount &gt; 1:
	result = [0, 0, ..., 0] of size n
else if zcount == 1:
	result = [0, 0, ..., 0] of size n
	result[firstZeroIndex] = P
else:
	result = []
	for i=0 to n-1:
		result[i] = P / a[i]

return result

return result
</code></pre></td></tr></table>
</div>
</div><p>The time complexity of this solution is <code>O(n)</code> with two passes required, and auxilliary space complexity is <code>O(1)</code>.</p>
<div class="details admonition warning">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw" aria-hidden="true"></i>Take care of overflow!<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Care must be taken that the variable <code>P</code> does not overflow. Use a larger integer type, or use modular arithmetic if allowable.</div>
        </div>
    </div>
<h3 id="product-prefix-and-suffix">Product Prefix and Suffix</h3>
<p>To address the follow-up of disallowing use of the division operation, we can calculate prefix and suffix product arrays and use the two to construct the final result array. These arrays hold the product of the prefix / suffix of the array without including the current element.</p>
<ul>
<li>Prefix array: <code>pref[i] = a[0] * ... a[i-1]</code>,<br>
<code>pref[0] = 1</code></li>
<li>Suffix array: <code>suff[i] = a[i+1] * ... a[n-1]</code>,<br>
<code>suff[n-1] = 1</code>
To then construct the final result array, we simply multiply these two arrays elementwise. That is, <code>result[i] = pref[i] * suff[i]</code>. This works because <code>pref[i]</code> and <code>suff[i]</code> together hold the product of every element in the prefix and the suffix respectively, accounting for the whole array except <code>a[i]</code>, which is the required result.</li>
</ul>
<p>A nice thing about this solution is that we do not need to handle 0s separately. However it does take three passes. We can skip two passes in case of zeroes, but even without that, the solution is correct.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">pref = []
pref[0] = 1
for i=1 to n-1:
	pref[i] = pref[i-1] * a[i-1]

suff = []
suff[n-1] = 1
for i=n-2 to 0:
	suff[i] = suff[i+1] * a[i+1]

result = []
for i=0 to n-1:
	result[i] = pref[i] * suff[i]

return result
</code></pre></td></tr></table>
</div>
</div><p>The time complexity of this solution is <code>O(n)</code> and it takes three passes, while the auxilliary space complexity is <code>O(n)</code> for the prefix and suffix product arrays.</p>
]]></description></item><item><title>Coding Problem: First Missing Positive Integer</title><link>http://akshatshah21.github.io/dcp-4/</link><pubDate>Mon, 01 Mar 2021 18:07:55 +0000</pubDate><author>Akshat Shah</author><guid>http://akshatshah21.github.io/dcp-4/</guid><description><![CDATA[<blockquote>
<p><a href="https://www.dailycodingproblem.com/" target="_blank" rel="noopener noreffer ">DailyCodingProblem</a> is a great website that sends coding problems to your inbox daily.</p>
</blockquote>
<h2 id="the-question">The Question</h2>
<blockquote>
<p>Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.</p>
</blockquote>
<p>You can solve this question on <a href="https://leetcode.com/problems/first-missing-positive" target="_blank" rel="noopener noreffer ">LeetCode</a>.</p>
<h2 id="solutions">Solutions</h2>
<h3 id="use-a-set-to-mark-presence">Use a set to mark presence</h3>
<p>A simple way (albeit requiring linear auxiliary space) is to traverse through the given array, and mark all the positive number present in the array as <em>present</em> using an ordered set. Then we iterate through the ordered set or from 1 to <code>n</code>, the size of the array and report the first missing number. If there is no missing number found by the time we finish, then the first missing positive integer is the <code>n + 1</code>. The following pseudocode assumes 1-based indexing.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">set = an ordered set
for i in a {
	if i &gt; 0
		set.insert(i)
}

j = 1
for i in set {
	if i != j
		return j
	j = j + 1
}

return j
</code></pre></td></tr></table>
</div>
</div><p>This is a <code>O(nlogn)</code> time solution, and has <code>O(n)</code> space complexity.</p>
<h3 id="sort-the-array">Sort the array</h3>
<p>The need for finding the <em>first</em> missing positive integer hints that sorting can be useful here. We can simply sort the array and then find the first positive element. We start traversing from 1 until we find a break in the natural numbers sequence, or we reach the end of the array, ultimately finding the required integer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">sort(a)

i = 0
while (i &lt; n &amp;&amp; nums[i] &lt;= 0) {
	i = i + 1
}

if i == n {
	return 1
}

j = 1
while (i &lt; n &amp;&amp; j &lt;= n) {
	if (nums[i] &gt; j) {
		return j
	}
	while (i &lt; n &amp;&amp; nums[i] == j) {
		i = i + 1
	}
	j = j + 1
}

return j
</code></pre></td></tr></table>
</div>
</div><p>The time complexity of this solution is <code>O(nlogn)</code>, while the space complexity is <code>O(1)</code>.</p>
<h3 id="put-elements-where-they-belong">Put elements where they belong</h3>
<p>The question mentions that we can modify the array in place! And since we have to find the first missing positive integer, we can simply follow the same principle of &ldquo;marking presence&rdquo; but use the given array itself, instead of the set. To see why this would work, say the first missing positive integer is <code>x</code>. To find <code>x</code>, we need all elements from 1 to <code>x-1</code> to be placed in their correct positions. For any &ldquo;large&rdquo; numbers (that is, numbers greater than the size of the array), we can simply ignore them, because <code>x</code> <em>has</em> to be in the range <code>[1, n+1]</code>. Think about it.</p>
<p>So when we encounter some element of the array that is positive and less than or equal to <code>n</code>, we put it at its correct place, that&rsquo;s the position indexed by the element. So we place 1 at 1, 2 at 2, and so on.</p>
<p>If an element <code>y</code> is already at position <code>y</code>, then we simply move forward, else we try to move it to position <code>y</code>. But this would mean replacing other elements. Note that if the elements getting replaced are negative, zero or more than <code>n</code>, then we don&rsquo;t need to worry about them. However, if the element that will be replaced is a <em>valid</em> number, then we can swap the two elements instead of replacing them, and <em><strong>not moving forward</strong></em> for this case, since we need to process the swapped element too.</p>
<p>For handling duplicates, we change <code>y</code> to -1 (or any other <em>invalid</em> number) if there&rsquo;s already a <code>y</code> at position <code>y</code>, so that it can be potentially replaced by another number that should be at the current position.</p>
<p>The conditions are a little tricky, so make note of them. For finding the first missing positive integer, we simply iterate through the array again and check for the first position that doesn&rsquo;t match the value at that position.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">for i from 1 to n {
	if a[i] &lt;= 0 or a[i] &gt; n
		a[i] = -1
	else if a[i] == i
		continue
	else if a[a[i]] == a[i]
			a[i] = -1
	else {
		swap(a[i], a[a[i]])
		i = i - 1
	}
}

for i from 1 to n {
	if a[i] != i
		return i
}
return n+1
</code></pre></td></tr></table>
</div>
</div><p>This solution has <code>O(n)</code> time complexity and <code>O(1)</code> extra space (it modifies the input array).<br>
You can find the C++ implementation <a href="https://github.com/akshatshah21/Data-Structures-and-Algorithms/blob/master/C%2B%2B/Arrays/First_Missing_Positive_Int.cpp" target="_blank" rel="noopener noreffer ">here</a>.</p>
]]></description></item><item><title>Coding Problem: Serialize a Binary Tree</title><link>http://akshatshah21.github.io/dcp-3/</link><pubDate>Mon, 01 Mar 2021 18:03:44 +0000</pubDate><author>Akshat Shah</author><guid>http://akshatshah21.github.io/dcp-3/</guid><description><![CDATA[<blockquote>
<p><a href="https://www.dailycodingproblem.com/" target="_blank" rel="noopener noreffer ">DailyCodingProblem</a> is a great website that sends coding problems to your inbox daily.</p>
</blockquote>
<h2 id="the-question">The Question</h2>
<blockquote>
<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>
</blockquote>
<p>You can solve this question on <a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree" target="_blank" rel="noopener noreffer ">LeetCode</a></p>
<h2 id="solutions">Solutions</h2>
<h3 id="recursion">Recursion!</h3>
<p>We can use preorder traversal of a tree to encode it as a string. We start with the root, encode it, and then move on to the left subtree and serialize it, then move on to the right tree and serialize it. The base case will be when we call the recursive function for a child of a leaf node, we can encode it as &ldquo;null&rdquo;.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">fun serialize(root)
  if root is null then return &#34;null&#34;
  return str(root-&gt;val) + &#34;,&#34; + serialize(root-&gt;left) + &#34;,&#34; + serialize(root-&gt;right)
</code></pre></td></tr></table>
</div>
</div><p>For deserializing a string of the type formed by <code>serialize</code>, we can again make use of the preorder traversal, since we know that is the order in which the serialized string was built.</p>
<p>First, we can split the string by its delimiter (a comma, in this case) to get a list of nodes (including null nodes) and then traverse the list, while we build the tree in preorder traversal. We do this by keeping the pointer of the list common across all recursive calls, and each recursive call builds a subtree, in preorder. Whenever we hit a null element in the list, we simply return null.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">fun deserialize(tree)
  nodes = tree.split(&#34;,&#34;)
  i = 0
  root = buildTree(nodes, i)
  return root

fun buildTree(nodes, i)
  if nodes[i] == &#34;null&#34; then
    return null
  else
    root = Node(int(root))
    i = i + 1
    root.left = buildTree(nodes, i)
    i = i + 1
    root.right = buildTree(nodes, i)
    return root
</code></pre></td></tr></table>
</div>
</div><p>You can find the Python implementation <a href="https://github.com/akshatshah21/Data-Structures-and-Algorithms/blob/python/Python/BinaryTree/Serialize_Deserialize_Binary_Tree.py" target="_blank" rel="noopener noreffer ">here</a>.
This can be implemented in C++ easily too, but right now I&rsquo;m a little lazy to write out the split function :-).</p>
]]></description></item><item><title>Coding Problem: Two Sum</title><link>http://akshatshah21.github.io/dcp-1/</link><pubDate>Thu, 21 Jan 2021 17:30:51 +0000</pubDate><author>Akshat Shah</author><guid>http://akshatshah21.github.io/dcp-1/</guid><description><![CDATA[<blockquote>
<p><a href="https://www.dailycodingproblem.com/" target="_blank" rel="noopener noreffer ">DailyCodingProblem</a> is a great website that sends coding problems to your inbox daily.</p>
</blockquote>
<h1 id="the-question">The Question</h1>
<blockquote>
<p>Given a list of numbers and a number <code>k</code>, return whether any two numbers from the list add up to <code>k</code>.</p>
</blockquote>
<h1 id="examples">Examples</h1>
<ol>
<li><code>[1, 2, 3], k = 4</code></li>
</ol>
<p>Yes, since 1+3 = 4</p>
<ol start="2">
<li><code>[10, 15, 3, 7], k=17</code></li>
</ol>
<p>Yes, since 10+7 = 17</p>
<ol start="3">
<li><code>[5, 4, 7, 12, 1], k = 2</code></li>
</ol>
<p>No</p>
<h1 id="solutions">Solutions</h1>
<h2 id="brute-force">Brute force</h2>
<p>A simple solution would be to iterate over all possible pairs in the array and checking if a pair adds up to k.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">for i from 0 to n-1:
  for j from i+1 to n-1:
    if a[i] + a[j] == k:
      return true
return false
</code></pre></td></tr></table>
</div>
</div><p>This will involve <code>n(n+1)/2</code> steps, so the time complexity will be <code>O(n^2)</code>, and <code>O(1)</code> space complexity.</p>
<h2 id="sorting-and-two-pointer-approach">Sorting and two-pointer approach</h2>
<p>We can sort the array and use two pointers, <code>front</code> (starting from 0) and <code>end</code> (starting from n-1):</p>
<ol>
<li>If the elements pointed to currently sum up to <code>k</code>, then return true</li>
<li>If the sum is less than <code>k</code>, increment the <code>front</code> pointer, since we need to increase the sum and the array is sorted.</li>
<li>Symmetrically, if the sum is more than <code>k</code>, decrement the <code>end</code> pointer.
We repeat this until <code>front</code> and <code>end</code> cross each other.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">sort(a)
front = 0, end = n-1
while front &lt; end:
  if a[front] + a[end] == k:
    return true
  else if a[front] + a[end] &lt; k:
    front = front + 1
  else
    end = end - 1
return false
</code></pre></td></tr></table>
</div>
</div><p>Since we are sorting an array (<code>O(nlogn)</code>) and looping with the <code>front</code> and <code>end</code> pointers (<code>O(n)</code>), the overall time complexity of this solution is (<code>O(nlogn)</code>). The space complexity is (<code>O(1)</code>).</p>
<p>You can find the implementation of this solution <a href="https://github.com/akshatshah21/Data-Structures-and-Algorithms/blob/master/C%2B%2B/Arrays/Check_2_sum.cpp" target="_blank" rel="noopener noreffer ">here</a></p>
<p>If we are required to return the indices, the sorting approach cannot be used directly. We will have to make an array of pairs of <code>(val, index)</code> and then sort this array.</p>
<h2 id="using-a-set-or-map">Using a set or map</h2>
<p>We can iterate through the array and keep adding the elements to a set (or hashset, map or hashmap), and for every element, check if the set contains <code>(k-a[i])</code>. If we find this condition to be true, then there exists a pair that adds up to <code>k</code>: the current <code>a[i]</code> and the entry in the set, <code>k-a[i]</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">set m
for i from 0 to n-1:
  if m.has(k-a[i]):
    return true
  m.add(a[i])
return false
</code></pre></td></tr></table>
</div>
</div><p>We are making a single pass through the array, finding whether a number exists in the set, and adding an element to the set. If we are using a BST implementation of set (C++ <code>set</code> or <code>map</code>) then the time complexity will be <code>O(nlogn)</code>, since every insert/find operation takes <code>O(logn)</code> time. If we use a hashset or hashmap (C++ <code>unordered_set</code> or <code>unordered_map</code>) then the time complexity will be <code>O(n)</code>, since insert/find operation can be done in constant time.</p>
<p>You can find the implementation of this solution <a href="https://github.com/akshatshah21/Data-Structures-and-Algorithms/blob/master/C%2B%2B/Hashing%20or%20Maps/Check_Numbers_Add_Upto_k_in_Array.cpp" target="_blank" rel="noopener noreffer ">here</a></p>
<p>If we are required to return indices of these elements, then need to use a map or hashmap, with the key-value pairs as <code>(value, index)</code>.</p>
]]></description></item></channel></rss>