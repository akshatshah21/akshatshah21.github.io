[{"categories":null,"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. ","date":"2021-08-28","objectID":"/dcp-4/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":null,"content":"The Question Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well. You can solve this question on LeetCode. ","date":"2021-08-28","objectID":"/dcp-4/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":null,"content":"Solutions ","date":"2021-08-28","objectID":"/dcp-4/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":null,"content":"Use a “map” to mark presence A simple way (albeit requiring linear auxilliary space) is to traverse through the given array, and mark all the positive number present in the array as present using a simple boolean array of size equal to the maximum number present in the array. Then we iterate through the present array and report the first missing number. If there is no missing number, then the first missing positive integer is the maximum element + 1. The following pseudocode assumes 1-based indexing. present = boolean array of size max_element(a) for i in a: if i \u003e 0 then present[i] = true for i from 1 to max_element(a) if !present[i] then return i return max_element(a) + 1 This is a linear time solution, and has space complexity linear in terms of the maximum element present. And that presents a problem: what if the numbers are too large? ","date":"2021-08-28","objectID":"/dcp-4/:2:1","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":null,"content":"Put elements where they belong The question mentions that we can modify the array in place! And since we have to find the first missing positive integer, we can simply follow the same principle of “marking presence” but use the given array itself, instead of the auxilliary array. To see why this would work, say the first missing positive integer is x. To find x, we need all elements from 1 to x-1 to be placed in their correct positions. For any “large” numbers (that is, numbers greater than the size of the array), we can simply ignore them, because x_ has to be in the range [1, n+1]. Think about it. So when we encounter some element of the array that is positive and less than or equal to n, we put it at its correct place, that’s the position indexed by the element. So we place 1 at 1, 2 at 2, and so on. If an element y is already at position y, then we simply move forward, else we try to move it to position y. But this would mean replacing other elements. Note that if the elements getting replaced are negative, zero or more than n, then we don’t need to worry about them. However, if the element that will be replaced is a valid number, then we can swap the two elements instead of replacing them, and not moving forward for this case, since we need to process the swapped element too. For handling duplicates, we change y to 0 (or any other invalid number) if there’s already a y at position y, so that it can be potentially replaced by another number that should be at the current position. The conditions are a little tricky, so make note of them. For finding the first missing psoitive integer, we simply iterate through the array again and check for the first position that doesn’t match the value at that position. for i from 1 to n if a[i] \u003c= 0 or a[i] \u003e n or a[i] == i then continue else if a[a[i]] \u003c= 0 or a[a[i]] \u003e n then a[a[i]] = a[i] else if a[a[i]] == a[i] then a[i] = 0 else swap(a[i], a[a[i]]) i = i - 1 for i from 1 to n if a[i] != i then return i return n+1 You can find the C++ implementation here ","date":"2021-08-28","objectID":"/dcp-4/:2:2","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":null,"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. ","date":"2021-08-28","objectID":"/dcp-3/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":null,"content":"The Question Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. You can solve this question on LeetCode ","date":"2021-08-28","objectID":"/dcp-3/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":null,"content":"Solutions ","date":"2021-08-28","objectID":"/dcp-3/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":null,"content":"Recursion! We can use preorder traversal of a tree to encode it as a string. We start with the root, encode it, and then move on to the left subtree and serialize it, then move on to the right tree and serialize it. The base case will be when we call the recursive function for a child of a leaf node, we can encode it as “null”. fun serialize(root) if root is null then return \"null\" return str(root-\u003eval) + \",\" + serialize(root-\u003eleft) + \",\" + serialize(root-\u003eright) For deserializing a string of the type formed by serialize, we can again make use of the preorder traversal, since we know that is the order in which the serialized string was built. First, we can split the string by its delimiter (a comma, in this case) to get a list of nodes (including null nodes) and then traverse the list, while we build the tree in preorder traversal. We do this by keeping the pointer of the list common across all recursive calls, and each recursive call builds a subtree, in preorder. Whenever we hit a null element in the list, we simply return null. fun deserialize(tree) nodes = tree.split(\",\") i = 0 root = buildTree(nodes, i) return root fun buildTree(nodes, i) if nodes[i] == \"null\" then return null else root = Node(int(root)) i = i + 1 root.left = buildTree(nodes, i) i = i + 1 root.right = buildTree(nodes, i) return root You can find the Python implementation here. This can be implemented in C++ easily too, but right now I’m a little lazy to write out the split function :-). ","date":"2021-08-28","objectID":"/dcp-3/:2:1","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":null,"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. The Question Given a list of numbers and a number k, return whether any two numbers from the list add up to k. Examples [1, 2, 3], k = 4 Yes, since 1+3 = 4 [10, 15, 3, 7], k=17 Yes, since 10+7 = 17 [5, 4, 7, 12, 1], k = 2 No Solutions ","date":"2021-08-28","objectID":"/dcp-1/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":null,"content":"Brute force A simple solution would be to iterate over all possible pairs in the array and checking if a pair adds up to k. for i from 0 to n-1: for j from i+1 to n-1: if a[i] + a[j] == k: return true return false This will involve n(n+1)/2 steps, so the time complexity will be O(n^2), and O(1) space compexity. ","date":"2021-08-28","objectID":"/dcp-1/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":null,"content":"Sorting and two-pointer approach We can sort the array and use two pointers, front (starting from 0) and end (starting from n-1): If the elements pointed to currently sum up to k, then return true If the sum is less than k, increment the front pointer, since we need to increase the sum and the array is sorted. Symmetrically, if the sum is more than k, decrement the end pointer. We repeat this until front and end cross each other. sort(a) front = 0, end = n-1 while front \u003c end: if a[front] + a[end] == k: return true else if a[front] + a[end] \u003c k: front = front + 1 else end = end - 1 return false Since we are sorting an array (O(nlogn)) and looping with the front and end pointers (O(n)), the overall time complexity of this solution is (O(nlogn)). The space complexity is (O(1)). You can find the implementation of this solution here If we are required to return the indices, the sorting approach cannot be used directly. We will have to make an array of pairs of (val, index) and then sort this array. ","date":"2021-08-28","objectID":"/dcp-1/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":null,"content":"Using a set or map We can iterate through the array and keep adding the elements to a set (or hashset, map or hashmap), and for every element, check if the set contains (k-a[i]). If we find this condition to be true, then there exists a pair that adds up to k: the current a[i] and the entry in the set, k-a[i]. set m for i from 0 to n-1: if m.has(k-a[i]): return true m.add(a[i]) return false We are making a single pass through the array, finding whether a number exists in the set, and adding an element to the set. If we are using a BST implementation of set (C++ set or map) then the time complexity will be O(nlogn), since every insert/find operation takes O(logn) time. If we use a hashset or hashmap (C++ unordered_set or unordered_map) then the time complexity will be O(n), since insert/find operation can be done in constant time. You can find the implementation of this solution here If we are required to return indices of these elements, then need to use a map or hashmap, with the key-value pairs as (value, index). ","date":"2021-08-28","objectID":"/dcp-1/:3:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":null,"content":"Akshat Shah I’m an undergraduate Information Technology Engineering student at VJTI, Mumbai, currently in the final year. With a keen interest in programming and software, I am looking forward to improve my skills and work on projects and problems in the field of Web Development, Android Development and Machine Learning. Besides these, you’ll find me active on competitive programming websites. You can see some of my projects here. In my free time, I like to read and write. I’m always in for a good, meaningful movie or TV show, and I like to try my luck at carrom! Experience ","date":"2021-08-28","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Wells Fargo Intern, April - July 2021 Constructed a microservice architecture involving Node (Express), Python (Flask), Elasticsearch with a team Built a client interface using ReactJS Worked on functionality requiring NLP ","date":"2021-08-28","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"CoE - CNDS Intern, April - May 2021 Worked on the front end of a Capture The Flag website using ReactJS ","date":"2021-08-28","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Community of Coders, VJTI Member, 2019 - Present Website Contributor Magazine Contributor and Curator Workshop Instructor for Web Workshop 2020 and CLI Workshop 2020 Project Mentor as part of Inheritance, CoC’s Summer Project program for First Year students ","date":"2021-08-28","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Society of Robotics and Automation, VJTI Member, 2018-2020 Workshop Instructor for the Wall-E Workshop 2019 Education ","date":"2021-08-28","objectID":"/about/:4:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Veermata Jijabai Technological Institute August 2018 - Present, Mumbai Bachelor of Technology (BTech) in Information Technology CGPA: 9.27 ","date":"2021-08-28","objectID":"/about/:5:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Kishinchand Chellaram College July 2016 - May 2018, Mumbai Higher Secondary Education (HSC) in Science with Bifocal Computer Science Score: 95.69% aggregate Stood at the first rank across all streams in the college ","date":"2021-08-28","objectID":"/about/:6:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Bright Start Fellowship International School April 2006 - May 2016, Mumbai International General Certificate of Secondary Education (IGCSE) Grades: 7 A*, 1 A Stood at the first rank in school Skills and Tech My academic courses include the core subjects of Computer Science, like Data Structures and Algorithms, Operating Systems, Database Management Systems and Computer Networks. Along with these, notable courses include System Administration, Machine Learning, Blockchain Technology, Software Engineering and Object Oriented Analysis and Design. I’m proficient in C++, JavaScript and Python, and familiar with Java. Having done many projects in Web Development, I’m fluent in languages and web frameworks, including HTML, CSS, JavaScript, NodeJS, ReactJS, TailwindCSS, Flask and Express JS. I have worked with SQL databases like PostgreSQL, as well as with NoSQL databases like MongoDB, Firebase Realtime Database and Neo4J. Apart from Web Development, I have done a few native Android Development projects using Java and Kotlin, and have had a stint of dabbling in Robotics in my First Year. In the past year I have studied Machine Learning and practiced on problems using Scikit-learn, and currently I’m studying Deep Learning and Natural Language Processing. ","date":"2021-08-28","objectID":"/about/:7:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"This is some content ","date":"2021-08-27","objectID":"/first_post/:0:0","tags":null,"title":"HAHAHAHA","uri":"/first_post/"},{"categories":null,"content":"Testing the table of contents ","date":"2021-08-27","objectID":"/first_post/:1:0","tags":null,"title":"HAHAHAHA","uri":"/first_post/"}]