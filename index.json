[{"categories":["reading"],"content":"A list of articles, courses, books, videos  and any other things that I found personally interesting","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Here’s a list of articles, courses, books, videos, and any other things that I found personally interesting and went through them: ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:0","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Articles on Finance on Tickertape.in Call it a temporary whim, but I’ve been looking into Finance and Economics stuff (pardon me, I’ve never given it much attention before). Tickertape has a series of educational articles, directed towards concepts in economics and finance, and aims to provide a foundation for getting started in equity market investing. This series has four modules, and I’ve read the first one, Elementary Economics, which consists of the following articles: Intro to Macroeconomics Interest Rates \u0026 Forex Circular Flow Monetary Policy Deficits \u0026 Balance of Payments Fiscal Policy Now this is most likely very fundamental for most people, but frankly, it’s quite new for me, and I’m finding it really interesting so far! ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:1","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"MLOps Articles by Tezan Sahu I’ve been exploring Machine Learning and DevOps separately for the past few months, and I’ve heard about the buzz around MLOps, a field which brings the practice of Machine Learning into real-world production systems and processes. This series of articles seems very promising in teaching the principles of MLOps, by first explaining what the DevOps culture and principles are, relating them to MLOps, and also outlining what’s different. It then explains the ML workflow, and the principles that MLOps in particular advocates. A Gentle Introduction to MLOps ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:2","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Authentication system using Ethereum This article is a part of a trilogy of articles that introduce Ethereum and Smart Contracts, written by Sebastian Peyrott. Besides being a great introduction to Ethereum and Blockchain in general, it also has small projects that demonstrate the prospects of Blockchain, which includes an authentication system uses Ethereum to verify an individual’s identity. I came across this series thanks to a college assignment. However, the series is from 2017, so some of the code is deprecated. An Introduction to Ethereum and Smart Contracts: an Authentication Solution It’s also available as a PDF. ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:3","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"Natural Language Processing As part of my Final Year project, I am currently studying NLP, and I went through these articles/courses, and found them worth sharing: The Illustrated Transformer by Jay Alammar: This article explains the Transformer model for sequence-to-sequence tasks NLP For You, a course by Lena Voita: A text-based course on the fundamental concepts on NLP, including Word Embeddings, Text Classification, Language Modeling, Seq2seq, Attention, Transformer and Transfer Learning - this is a treasure! CS224N: Natural Language Processing with Deep Learning is a MOOC with lectures available on YouTube Thanks to my friends Arnav Shah and Saharsh Jain for suggesting these resources! ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:4","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"A Project of One’s Own Probably a classic now, I came across this article by Paul Graham. Go ahead and read it for yourself! ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:5","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["reading"],"content":"How to Remember What You Read This great article by Farnam Street is something that I was thinking about for a long time before I actually googled this question and came across this article. ","date":"Sep 28 2021","objectID":"/reading-list-sept-2021/:0:6","tags":["reading","articles","blogs","videos","books"],"title":"Reading List: September 2021","uri":"/reading-list-sept-2021/"},{"categories":["tools"],"content":"A guide to install Tex on Linux","date":"Sep 28 2021","objectID":"/tex-install-linux/","tags":["latex","linux"],"title":"A Guide to Install Tex on Linux","uri":"/tex-install-linux/"},{"categories":["tools"],"content":"The Story Recently, I wanted to install a Tex system on my Ubuntu 20.04 PC. I tried installing MiKTeX after someone recommended it to me (thrice…), but I found myself unable to update Tex packages because of a cryptic SSL peer certificate error. I reported this in an issue to the MiKTeX repo, but was instead told that my system did not support MiKTeX. Great. Next, I tried to install TeX Live. It seemed simple enough, with a sudo apt install texlive. Can’t get any easier than this, right? So it turns out that the apt package for TeX Live is still the 2019 version. Now unfortunately, this meant that I again could not update packages, since tlmgr, TeX Live’s package manager could not verify the signature for a repository. I tried following this post on Tex Stack Exchange, but this didn’t work out. So I decided to ditch APT, and tried following the TeX Live Quick Install docs (which is probably I should have done first). But even in this method, the default mirror which was chosen was too slow, and for some reason, the default, recommended scheme to install TeX Live (called full scheme) installs around 5GB of Tex software - fonts, packages, et cetera. For someone beginning with Tex, this did not sit well with me. Enough with this rant, let me list down the steps that I followed to install TeX Live on my system. Note that there are most likely better methods/choices that one could use, but these steps worked for me. What is Tex? Simply said, Tex is a popular typesetting system, especially in academia, that enables one to write documents that involve a lot of formatting, mathematical equations, tables et cetera. It was made by ACM Turing Awardee Donald Knuth (who is a legend, by the way). TeX Live Installation TeX Live is a software distribution for Tex, and includes some programs, macros, packages and fonts. It has a package manager specifically for TeX packages, called tlmgr, that is used to install and update TeX packages. Download install-tl (the latest one, yay!) using this link. In case this gets changed, you can find the link in the docs (Do read the docs once before installing). Extract the contents from the .tar.gz file. Here’s how the contents look: Contents of the install-tl directoryContents of the install-tl directory \" Contents of the install-tl directory Run the install-tl Perl script as root. Note that the script does not require root permissions, but requires write access to the directory where it’s going to install, which by default is /usr/local. You can change the directory by looking at the prompts of the script. Note that you can run the installer in GUI mode by the -gui flag (which I would recommend if you’re doing this for the first time, but it requires Tcl to be installed). The --repository option specifies an explicit mirror to use. Try specifying some other mirrors if the default mirror seems too slow. In my case, the mirror provided by NUS (and I stay in Mumbai) was much better than the default one. sudo perl install-tl [-gui] [--repository \u003cURL\u003e] In case you get some error related to 'tlpdb' I came across the following error when I tried using an explicit mirror: install-tl: TLPDB::from_file could not initialize from: https://mirrors.dotsrc.org/ctan/tlpkg/texlive.tlpdb install-tl: Maybe the repository setting should be changed. install-tl: More info: https://tug.org/texlive/acquire.html Try appending systems/texlive/tlnet to the mirror URL when running the install-tl script. For example, sudo perl install-tl --repository https://download.nus.edu.sg/mirror/ctan/systems/texlive/tlnet After a few seconds, something similar to the following will be visible: install-tl script optionsinstall-tl script options \" install-tl script options If you scroll up, you can see the scheme selected by default for installation: \u003cS\u003e set installation scheme: scheme-full. Below that, you can see the number of collections and the space they’ll take: \u003cC\u003e set installation collections: 40 collections out of 41, disk space require","date":"Sep 28 2021","objectID":"/tex-install-linux/:0:0","tags":["latex","linux"],"title":"A Guide to Install Tex on Linux","uri":"/tex-install-linux/"},{"categories":null,"content":"Akshat Shah I’m an undergraduate Information Technology Engineering student at VJTI, Mumbai, currently in the final year. With a keen interest in programming and software, I am looking forward to improve my skills and work on projects and problems in the field of Web Development, Android Development and Machine Learning. Besides these, you’ll find me active on competitive programming websites. You can see some of my projects here. In my free time, I like to read and write. I’m always in for a good, meaningful movie or TV show, and I like to try my luck at carrom! Experience ","date":"Aug 28 2021","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Wells Fargo Intern, April - July 2021 Constructed a microservice architecture involving Node (Express), Python (Flask), Elasticsearch with a team Built a client interface using ReactJS Worked on functionality requiring NLP ","date":"Aug 28 2021","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"CoE - CNDS Intern, April - May 2021 Worked on the front end of a Capture The Flag website using ReactJS ","date":"Aug 28 2021","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Community of Coders, VJTI Member, 2019 - Present Website Contributor Magazine Contributor and Curator Workshop Instructor for Web Workshop 2020 and CLI Workshop 2020 Project Mentor as part of Inheritance, CoC’s Summer Project program for First Year students ","date":"Aug 28 2021","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Society of Robotics and Automation, VJTI Member, 2018-2020 Workshop Instructor for the Wall-E Workshop 2019 Education ","date":"Aug 28 2021","objectID":"/about/:4:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Veermata Jijabai Technological Institute August 2018 - Present, Mumbai Bachelor of Technology (BTech) in Information Technology CGPA: 9.27 ","date":"Aug 28 2021","objectID":"/about/:5:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Kishinchand Chellaram College July 2016 - May 2018, Mumbai Higher Secondary Education (HSC) in Science with Bifocal Computer Science Score: 95.69% aggregate Stood at the first rank across all streams in the college ","date":"Aug 28 2021","objectID":"/about/:6:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Bright Start Fellowship International School April 2006 - May 2016, Mumbai International General Certificate of Secondary Education (IGCSE) Grades: 7 A*, 1 A Stood at the first rank in school Skills and Tech My academic courses include the core subjects of Computer Science, like Data Structures and Algorithms, Operating Systems, Database Management Systems and Computer Networks. Along with these, notable courses include System Administration, Machine Learning, Blockchain Technology, Software Engineering and Object Oriented Analysis and Design. I’m proficient in C++, JavaScript and Python, and familiar with Java. Having done many projects in Web Development, I’m fluent in languages and web frameworks, including HTML, CSS, JavaScript, NodeJS, ReactJS, TailwindCSS, Flask and Express JS. I have worked with SQL databases like PostgreSQL, as well as with NoSQL databases like MongoDB, Firebase Realtime Database and Neo4J. Apart from Web Development, I have done a few native Android Development projects using Java and Kotlin, and have had a stint of dabbling in Robotics in my First Year. In the past year I have studied Machine Learning and practiced on problems using Scikit-learn, and currently I’m studying Deep Learning and Natural Language Processing. ","date":"Aug 28 2021","objectID":"/about/:7:0","tags":null,"title":"About","uri":"/about/"},{"categories":["coding-problems"],"content":"Given an array of integers, find the first missing positive integer in linear time and constant space.","date":"Mar 1 2021","objectID":"/dcp-4/","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. ","date":"Mar 1 2021","objectID":"/dcp-4/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"The Question Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well. You can solve this question on LeetCode. ","date":"Mar 1 2021","objectID":"/dcp-4/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Solutions ","date":"Mar 1 2021","objectID":"/dcp-4/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Use a “map” to mark presence A simple way (albeit requiring linear auxilliary space) is to traverse through the given array, and mark all the positive number present in the array as present using a simple boolean array of size equal to the maximum number present in the array. Then we iterate through the present array and report the first missing number. If there is no missing number, then the first missing positive integer is the maximum element + 1. The following pseudocode assumes 1-based indexing. present = boolean array of size max_element(a) for i in a: if i \u003e 0 then present[i] = true for i from 1 to max_element(a) if !present[i] then return i return max_element(a) + 1 This is a linear time solution, and has space complexity linear in terms of the maximum element present. And that presents a problem: what if the numbers are too large? ","date":"Mar 1 2021","objectID":"/dcp-4/:2:1","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Put elements where they belong The question mentions that we can modify the array in place! And since we have to find the first missing positive integer, we can simply follow the same principle of “marking presence” but use the given array itself, instead of the auxilliary array. To see why this would work, say the first missing positive integer is x. To find x, we need all elements from 1 to x-1 to be placed in their correct positions. For any “large” numbers (that is, numbers greater than the size of the array), we can simply ignore them, because x_ has to be in the range [1, n+1]. Think about it. So when we encounter some element of the array that is positive and less than or equal to n, we put it at its correct place, that’s the position indexed by the element. So we place 1 at 1, 2 at 2, and so on. If an element y is already at position y, then we simply move forward, else we try to move it to position y. But this would mean replacing other elements. Note that if the elements getting replaced are negative, zero or more than n, then we don’t need to worry about them. However, if the element that will be replaced is a valid number, then we can swap the two elements instead of replacing them, and not moving forward for this case, since we need to process the swapped element too. For handling duplicates, we change y to 0 (or any other invalid number) if there’s already a y at position y, so that it can be potentially replaced by another number that should be at the current position. The conditions are a little tricky, so make note of them. For finding the first missing psoitive integer, we simply iterate through the array again and check for the first position that doesn’t match the value at that position. for i from 1 to n if a[i] \u003c= 0 or a[i] \u003e n or a[i] == i then continue else if a[a[i]] \u003c= 0 or a[a[i]] \u003e n then a[a[i]] = a[i] else if a[a[i]] == a[i] then a[i] = 0 else swap(a[i], a[a[i]]) i = i - 1 for i from 1 to n if a[i] != i then return i return n+1 You can find the C++ implementation here ","date":"Mar 1 2021","objectID":"/dcp-4/:2:2","tags":["data-structures","algorithms"],"title":"Coding Problem: First Missing Positive Integer","uri":"/dcp-4/"},{"categories":["coding-problems"],"content":"Design an algorithm to serialize and deserialize a binary tree.","date":"Mar 1 2021","objectID":"/dcp-3/","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. ","date":"Mar 1 2021","objectID":"/dcp-3/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"The Question Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. You can solve this question on LeetCode ","date":"Mar 1 2021","objectID":"/dcp-3/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"Solutions ","date":"Mar 1 2021","objectID":"/dcp-3/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"Recursion! We can use preorder traversal of a tree to encode it as a string. We start with the root, encode it, and then move on to the left subtree and serialize it, then move on to the right tree and serialize it. The base case will be when we call the recursive function for a child of a leaf node, we can encode it as “null”. fun serialize(root) if root is null then return \"null\" return str(root-\u003eval) + \",\" + serialize(root-\u003eleft) + \",\" + serialize(root-\u003eright) For deserializing a string of the type formed by serialize, we can again make use of the preorder traversal, since we know that is the order in which the serialized string was built. First, we can split the string by its delimiter (a comma, in this case) to get a list of nodes (including null nodes) and then traverse the list, while we build the tree in preorder traversal. We do this by keeping the pointer of the list common across all recursive calls, and each recursive call builds a subtree, in preorder. Whenever we hit a null element in the list, we simply return null. fun deserialize(tree) nodes = tree.split(\",\") i = 0 root = buildTree(nodes, i) return root fun buildTree(nodes, i) if nodes[i] == \"null\" then return null else root = Node(int(root)) i = i + 1 root.left = buildTree(nodes, i) i = i + 1 root.right = buildTree(nodes, i) return root You can find the Python implementation here. This can be implemented in C++ easily too, but right now I’m a little lazy to write out the split function :-). ","date":"Mar 1 2021","objectID":"/dcp-3/:2:1","tags":["data-structures","algorithms"],"title":"Coding Problem: Serialize a Binary Tree","uri":"/dcp-3/"},{"categories":["coding-problems"],"content":"Given a list of numbers and a number `k`, return whether any two numbers from the list add up to `k`.","date":"Jan 21 2021","objectID":"/dcp-1/","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":" DailyCodingProblem is a great website that sends coding problems to your inbox daily. The Question Given a list of numbers and a number k, return whether any two numbers from the list add up to k. Examples [1, 2, 3], k = 4 Yes, since 1+3 = 4 [10, 15, 3, 7], k=17 Yes, since 10+7 = 17 [5, 4, 7, 12, 1], k = 2 No Solutions ","date":"Jan 21 2021","objectID":"/dcp-1/:0:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":"Brute force A simple solution would be to iterate over all possible pairs in the array and checking if a pair adds up to k. for i from 0 to n-1: for j from i+1 to n-1: if a[i] + a[j] == k: return true return false This will involve n(n+1)/2 steps, so the time complexity will be O(n^2), and O(1) space compexity. ","date":"Jan 21 2021","objectID":"/dcp-1/:1:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":"Sorting and two-pointer approach We can sort the array and use two pointers, front (starting from 0) and end (starting from n-1): If the elements pointed to currently sum up to k, then return true If the sum is less than k, increment the front pointer, since we need to increase the sum and the array is sorted. Symmetrically, if the sum is more than k, decrement the end pointer. We repeat this until front and end cross each other. sort(a) front = 0, end = n-1 while front \u003c end: if a[front] + a[end] == k: return true else if a[front] + a[end] \u003c k: front = front + 1 else end = end - 1 return false Since we are sorting an array (O(nlogn)) and looping with the front and end pointers (O(n)), the overall time complexity of this solution is (O(nlogn)). The space complexity is (O(1)). You can find the implementation of this solution here If we are required to return the indices, the sorting approach cannot be used directly. We will have to make an array of pairs of (val, index) and then sort this array. ","date":"Jan 21 2021","objectID":"/dcp-1/:2:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"},{"categories":["coding-problems"],"content":"Using a set or map We can iterate through the array and keep adding the elements to a set (or hashset, map or hashmap), and for every element, check if the set contains (k-a[i]). If we find this condition to be true, then there exists a pair that adds up to k: the current a[i] and the entry in the set, k-a[i]. set m for i from 0 to n-1: if m.has(k-a[i]): return true m.add(a[i]) return false We are making a single pass through the array, finding whether a number exists in the set, and adding an element to the set. If we are using a BST implementation of set (C++ set or map) then the time complexity will be O(nlogn), since every insert/find operation takes O(logn) time. If we use a hashset or hashmap (C++ unordered_set or unordered_map) then the time complexity will be O(n), since insert/find operation can be done in constant time. You can find the implementation of this solution here If we are required to return indices of these elements, then need to use a map or hashmap, with the key-value pairs as (value, index). ","date":"Jan 21 2021","objectID":"/dcp-1/:3:0","tags":["data-structures","algorithms"],"title":"Coding Problem: Two Sum","uri":"/dcp-1/"}]