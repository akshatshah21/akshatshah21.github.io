<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>coding-problems - Category - Akshat Shah</title><link>http://akshatshah21.github.io/categories/coding-problems/</link><description>coding-problems - Category - Akshat Shah</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>akshatshah_21@yahoo.in (Akshat Shah)</managingEditor><webMaster>akshatshah_21@yahoo.in (Akshat Shah)</webMaster><lastBuildDate>Sun, 03 Jul 2022 10:45:56 +0530</lastBuildDate><atom:link href="http://akshatshah21.github.io/categories/coding-problems/" rel="self" type="application/rss+xml"/><item><title>Coding Problem: Array of Product Except Self</title><link>http://akshatshah21.github.io/dcp-2/</link><pubDate>Sun, 03 Jul 2022 10:45:56 +0530</pubDate><author>Akshat Shah</author><guid>http://akshatshah21.github.io/dcp-2/</guid><description><![CDATA[<blockquote>
<p><a href="https://www.dailycodingproblem.com/" target="_blank" rel="noopener noreffer ">DailyCodingProblem</a> is a great website that sends coding problems to your inbox daily.</p>
</blockquote>
<h2 id="the-question">The Question</h2>
<blockquote>
<p>Given an array of integers, return a new array such that each element at index <code>i</code> of the new array is the product of all the numbers in the original array except the one at <code>i</code>.</p>
<p>Follow-up: What if the division operation is not allowed?</p>
</blockquote>
<h2 id="examples">Examples</h2>
<ol>
<li><code>[1, 2, 3, 4, 5]</code><br>
Result: <code>[120, 60, 40, 30, 24]</code></li>
<li><code>[3, 2, 1]</code><br>
Result: <code>[2, 3, 6]</code></li>
<li>What&rsquo;s interesting about this question is if there are 0s in the array: <code>[1, 2, 3, 0]</code><br>
Result: <code>[0, 0, 0, 6]</code></li>
<li><code>[1, 2, 0, 3, 4, 0, 5]</code><br>
Result: <code>[0, 0, 0, 0, 0, 0, 0]</code></li>
</ol>
<h2 id="solutions">Solutions</h2>
<h3 id="division-of-overall-product">Division of Overall Product</h3>
<ul>
<li>The most intuitive solution is to first calculate the overall product of the array, <code>P</code> and then for each element in the given array, divide <code>P</code> by it to get the corresponding number in the result array.</li>
<li>Dividing <code>P</code> by every element can be a problem if one of the elements is 0, since we&rsquo;ll get a runtime error for dividing by 0. However, if there is indeed a 0 in the array, then <code>P</code> will also be 0. So we realize that we need to handle zeroes carefully in this solution.</li>
<li>Trying out some test cases (see <em>Examples</em> above), we realize that there are three cases when it comes to 0s in the array:
<ol>
<li>No zeroes: We can follow our simple solution above</li>
<li>One zero, at index <code>z</code>: All positions in the result array except <code>z</code> will be 0, while <code>z</code> will hold the product of all numbers in the given array without the 0</li>
<li>More than one zeroes: All positions in the result array will hold 0.
Hence, we need to keep track of the number of zeroes and construct the result accordingly. We can simply keep a running count of zeroes and <code>firstZeroIndex</code> for this, and calculate <code>P</code> accordingly.</li>
</ol>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">P = 1
zcount = 0
firstZeroIndex = -1
for i=0 to n-1:
	if a[i] == 0:
		if zcount == 0:
			firstZeroIndex = i
		zcount++
	else:
		P = P * a[i]

	if zcount &gt; 1:
		break

if zcount &gt; 1:
	result = [0, 0, ..., 0] of size n
else if zcount == 1:
	result = [0, 0, ..., 0] of size n
	result[firstZeroIndex] = P
else:
	result = []
	for i=0 to n-1:
		result[i] = P / a[i]

return result

return result
</code></pre></td></tr></table>
</div>
</div><p>The time complexity of this solution is <code>O(n)</code> with two passes required, and auxilliary space complexity is <code>O(1)</code>.</p>
<div class="details admonition warning">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw" aria-hidden="true"></i>Take care of overflow!<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Care must be taken that the variable <code>P</code> does not overflow. Use a larger integer type, or use modular arithmetic if allowable.</div>
        </div>
    </div>
<h3 id="product-prefix-and-suffix">Product Prefix and Suffix</h3>
<p>To address the follow-up of disallowing use of the division operation, we can calculate prefix and suffix product arrays and use the two to construct the final result array. These arrays hold the product of the prefix / suffix of the array without including the current element.</p>
<ul>
<li>Prefix array: <code>pref[i] = a[0] * ... a[i-1]</code>,<br>
<code>pref[0] = 1</code></li>
<li>Suffix array: <code>suff[i] = a[i+1] * ... a[n-1]</code>,<br>
<code>suff[n-1] = 1</code>
To then construct the final result array, we simply multiply these two arrays elementwise. That is, <code>result[i] = pref[i] * suff[i]</code>. This works because <code>pref[i]</code> and <code>suff[i]</code> together hold the product of every element in the prefix and the suffix respectively, accounting for the whole array except <code>a[i]</code>, which is the required result.</li>
</ul>
<p>A nice thing about this solution is that we do not need to handle 0s separately. However it does take three passes. We can skip two passes in case of zeroes, but even without that, the solution is correct.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">pref = []
pref[0] = 1
for i=1 to n-1:
	pref[i] = pref[i-1] * a[i-1]

suff = []
suff[n-1] = 1
for i=n-2 to 0:
	suff[i] = suff[i+1] * a[i+1]

result = []
for i=0 to n-1:
	result[i] = pref[i] * suff[i]

return result
</code></pre></td></tr></table>
</div>
</div><p>The time complexity of this solution is <code>O(n)</code> and it takes three passes, while the auxilliary space complexity is <code>O(n)</code> for the prefix and suffix product arrays.</p>
]]></description></item><item><title>Coding Problem: First Missing Positive Integer</title><link>http://akshatshah21.github.io/dcp-4/</link><pubDate>Mon, 01 Mar 2021 18:07:55 +0000</pubDate><author>Akshat Shah</author><guid>http://akshatshah21.github.io/dcp-4/</guid><description><![CDATA[<blockquote>
<p><a href="https://www.dailycodingproblem.com/" target="_blank" rel="noopener noreffer ">DailyCodingProblem</a> is a great website that sends coding problems to your inbox daily.</p>
</blockquote>
<h2 id="the-question">The Question</h2>
<blockquote>
<p>Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.</p>
</blockquote>
<p>You can solve this question on <a href="https://leetcode.com/problems/first-missing-positive" target="_blank" rel="noopener noreffer ">LeetCode</a>.</p>
<h2 id="solutions">Solutions</h2>
<h3 id="use-a-set-to-mark-presence">Use a set to mark presence</h3>
<p>A simple way (albeit requiring linear auxiliary space) is to traverse through the given array, and mark all the positive number present in the array as <em>present</em> using an ordered set. Then we iterate through the ordered set or from 1 to <code>n</code>, the size of the array and report the first missing number. If there is no missing number found by the time we finish, then the first missing positive integer is the <code>n + 1</code>. The following pseudocode assumes 1-based indexing.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">set = an ordered set
for i in a {
	if i &gt; 0
		set.insert(i)
}

j = 1
for i in set {
	if i != j
		return j
	j = j + 1
}

return j
</code></pre></td></tr></table>
</div>
</div><p>This is a <code>O(nlogn)</code> time solution, and has <code>O(n)</code> space complexity.</p>
<h3 id="sort-the-array">Sort the array</h3>
<p>The need for finding the <em>first</em> missing positive integer hints that sorting can be useful here. We can simply sort the array and then find the first positive element. We start traversing from 1 until we find a break in the natural numbers sequence, or we reach the end of the array, ultimately finding the required integer.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">sort(a)

i = 0
while (i &lt; n &amp;&amp; nums[i] &lt;= 0) {
	i = i + 1
}

if i == n {
	return 1
}

j = 1
while (i &lt; n &amp;&amp; j &lt;= n) {
	if (nums[i] &gt; j) {
		return j
	}
	while (i &lt; n &amp;&amp; nums[i] == j) {
		i = i + 1
	}
	j = j + 1
}

return j
</code></pre></td></tr></table>
</div>
</div><p>The time complexity of this solution is <code>O(nlogn)</code>, while the space complexity is <code>O(1)</code>.</p>
<h3 id="put-elements-where-they-belong">Put elements where they belong</h3>
<p>The question mentions that we can modify the array in place! And since we have to find the first missing positive integer, we can simply follow the same principle of &ldquo;marking presence&rdquo; but use the given array itself, instead of the set. To see why this would work, say the first missing positive integer is <code>x</code>. To find <code>x</code>, we need all elements from 1 to <code>x-1</code> to be placed in their correct positions. For any &ldquo;large&rdquo; numbers (that is, numbers greater than the size of the array), we can simply ignore them, because <code>x</code> <em>has</em> to be in the range <code>[1, n+1]</code>. Think about it.</p>
<p>So when we encounter some element of the array that is positive and less than or equal to <code>n</code>, we put it at its correct place, that&rsquo;s the position indexed by the element. So we place 1 at 1, 2 at 2, and so on.</p>
<p>If an element <code>y</code> is already at position <code>y</code>, then we simply move forward, else we try to move it to position <code>y</code>. But this would mean replacing other elements. Note that if the elements getting replaced are negative, zero or more than <code>n</code>, then we don&rsquo;t need to worry about them. However, if the element that will be replaced is a <em>valid</em> number, then we can swap the two elements instead of replacing them, and <em><strong>not moving forward</strong></em> for this case, since we need to process the swapped element too.</p>
<p>For handling duplicates, we change <code>y</code> to -1 (or any other <em>invalid</em> number) if there&rsquo;s already a <code>y</code> at position <code>y</code>, so that it can be potentially replaced by another number that should be at the current position.</p>
<p>The conditions are a little tricky, so make note of them. For finding the first missing positive integer, we simply iterate through the array again and check for the first position that doesn&rsquo;t match the value at that position.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">for i from 1 to n {
	if a[i] &lt;= 0 or a[i] &gt; n
		a[i] = -1
	else if a[i] == i
		continue
	else if a[a[i]] == a[i]
			a[i] = -1
	else {
		swap(a[i], a[a[i]])
		i = i - 1
	}
}

for i from 1 to n {
	if a[i] != i
		return i
}
return n+1
</code></pre></td></tr></table>
</div>
</div><p>This solution has <code>O(n)</code> time complexity and <code>O(1)</code> extra space (it modifies the input array).<br>
You can find the C++ implementation <a href="https://github.com/akshatshah21/Data-Structures-and-Algorithms/blob/master/C%2B%2B/Arrays/First_Missing_Positive_Int.cpp" target="_blank" rel="noopener noreffer ">here</a>.</p>
]]></description></item><item><title>Coding Problem: Serialize a Binary Tree</title><link>http://akshatshah21.github.io/dcp-3/</link><pubDate>Mon, 01 Mar 2021 18:03:44 +0000</pubDate><author>Akshat Shah</author><guid>http://akshatshah21.github.io/dcp-3/</guid><description><![CDATA[<blockquote>
<p><a href="https://www.dailycodingproblem.com/" target="_blank" rel="noopener noreffer ">DailyCodingProblem</a> is a great website that sends coding problems to your inbox daily.</p>
</blockquote>
<h2 id="the-question">The Question</h2>
<blockquote>
<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>
</blockquote>
<p>You can solve this question on <a href="https://leetcode.com/problems/serialize-and-deserialize-binary-tree" target="_blank" rel="noopener noreffer ">LeetCode</a></p>
<h2 id="solutions">Solutions</h2>
<h3 id="recursion">Recursion!</h3>
<p>We can use preorder traversal of a tree to encode it as a string. We start with the root, encode it, and then move on to the left subtree and serialize it, then move on to the right tree and serialize it. The base case will be when we call the recursive function for a child of a leaf node, we can encode it as &ldquo;null&rdquo;.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">fun serialize(root)
  if root is null then return &#34;null&#34;
  return str(root-&gt;val) + &#34;,&#34; + serialize(root-&gt;left) + &#34;,&#34; + serialize(root-&gt;right)
</code></pre></td></tr></table>
</div>
</div><p>For deserializing a string of the type formed by <code>serialize</code>, we can again make use of the preorder traversal, since we know that is the order in which the serialized string was built.</p>
<p>First, we can split the string by its delimiter (a comma, in this case) to get a list of nodes (including null nodes) and then traverse the list, while we build the tree in preorder traversal. We do this by keeping the pointer of the list common across all recursive calls, and each recursive call builds a subtree, in preorder. Whenever we hit a null element in the list, we simply return null.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">fun deserialize(tree)
  nodes = tree.split(&#34;,&#34;)
  i = 0
  root = buildTree(nodes, i)
  return root

fun buildTree(nodes, i)
  if nodes[i] == &#34;null&#34; then
    return null
  else
    root = Node(int(root))
    i = i + 1
    root.left = buildTree(nodes, i)
    i = i + 1
    root.right = buildTree(nodes, i)
    return root
</code></pre></td></tr></table>
</div>
</div><p>You can find the Python implementation <a href="https://github.com/akshatshah21/Data-Structures-and-Algorithms/blob/python/Python/BinaryTree/Serialize_Deserialize_Binary_Tree.py" target="_blank" rel="noopener noreffer ">here</a>.
This can be implemented in C++ easily too, but right now I&rsquo;m a little lazy to write out the split function :-).</p>
]]></description></item><item><title>Coding Problem: Two Sum</title><link>http://akshatshah21.github.io/dcp-1/</link><pubDate>Thu, 21 Jan 2021 17:30:51 +0000</pubDate><author>Akshat Shah</author><guid>http://akshatshah21.github.io/dcp-1/</guid><description><![CDATA[<blockquote>
<p><a href="https://www.dailycodingproblem.com/" target="_blank" rel="noopener noreffer ">DailyCodingProblem</a> is a great website that sends coding problems to your inbox daily.</p>
</blockquote>
<h1 id="the-question">The Question</h1>
<blockquote>
<p>Given a list of numbers and a number <code>k</code>, return whether any two numbers from the list add up to <code>k</code>.</p>
</blockquote>
<h1 id="examples">Examples</h1>
<ol>
<li><code>[1, 2, 3], k = 4</code></li>
</ol>
<p>Yes, since 1+3 = 4</p>
<ol start="2">
<li><code>[10, 15, 3, 7], k=17</code></li>
</ol>
<p>Yes, since 10+7 = 17</p>
<ol start="3">
<li><code>[5, 4, 7, 12, 1], k = 2</code></li>
</ol>
<p>No</p>
<h1 id="solutions">Solutions</h1>
<h2 id="brute-force">Brute force</h2>
<p>A simple solution would be to iterate over all possible pairs in the array and checking if a pair adds up to k.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">for i from 0 to n-1:
  for j from i+1 to n-1:
    if a[i] + a[j] == k:
      return true
return false
</code></pre></td></tr></table>
</div>
</div><p>This will involve <code>n(n+1)/2</code> steps, so the time complexity will be <code>O(n^2)</code>, and <code>O(1)</code> space complexity.</p>
<h2 id="sorting-and-two-pointer-approach">Sorting and two-pointer approach</h2>
<p>We can sort the array and use two pointers, <code>front</code> (starting from 0) and <code>end</code> (starting from n-1):</p>
<ol>
<li>If the elements pointed to currently sum up to <code>k</code>, then return true</li>
<li>If the sum is less than <code>k</code>, increment the <code>front</code> pointer, since we need to increase the sum and the array is sorted.</li>
<li>Symmetrically, if the sum is more than <code>k</code>, decrement the <code>end</code> pointer.
We repeat this until <code>front</code> and <code>end</code> cross each other.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">sort(a)
front = 0, end = n-1
while front &lt; end:
  if a[front] + a[end] == k:
    return true
  else if a[front] + a[end] &lt; k:
    front = front + 1
  else
    end = end - 1
return false
</code></pre></td></tr></table>
</div>
</div><p>Since we are sorting an array (<code>O(nlogn)</code>) and looping with the <code>front</code> and <code>end</code> pointers (<code>O(n)</code>), the overall time complexity of this solution is (<code>O(nlogn)</code>). The space complexity is (<code>O(1)</code>).</p>
<p>You can find the implementation of this solution <a href="https://github.com/akshatshah21/Data-Structures-and-Algorithms/blob/master/C%2B%2B/Arrays/Check_2_sum.cpp" target="_blank" rel="noopener noreffer ">here</a></p>
<p>If we are required to return the indices, the sorting approach cannot be used directly. We will have to make an array of pairs of <code>(val, index)</code> and then sort this array.</p>
<h2 id="using-a-set-or-map">Using a set or map</h2>
<p>We can iterate through the array and keep adding the elements to a set (or hashset, map or hashmap), and for every element, check if the set contains <code>(k-a[i])</code>. If we find this condition to be true, then there exists a pair that adds up to <code>k</code>: the current <code>a[i]</code> and the entry in the set, <code>k-a[i]</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">set m
for i from 0 to n-1:
  if m.has(k-a[i]):
    return true
  m.add(a[i])
return false
</code></pre></td></tr></table>
</div>
</div><p>We are making a single pass through the array, finding whether a number exists in the set, and adding an element to the set. If we are using a BST implementation of set (C++ <code>set</code> or <code>map</code>) then the time complexity will be <code>O(nlogn)</code>, since every insert/find operation takes <code>O(logn)</code> time. If we use a hashset or hashmap (C++ <code>unordered_set</code> or <code>unordered_map</code>) then the time complexity will be <code>O(n)</code>, since insert/find operation can be done in constant time.</p>
<p>You can find the implementation of this solution <a href="https://github.com/akshatshah21/Data-Structures-and-Algorithms/blob/master/C%2B%2B/Hashing%20or%20Maps/Check_Numbers_Add_Upto_k_in_Array.cpp" target="_blank" rel="noopener noreffer ">here</a></p>
<p>If we are required to return indices of these elements, then need to use a map or hashmap, with the key-value pairs as <code>(value, index)</code>.</p>
]]></description></item></channel></rss>